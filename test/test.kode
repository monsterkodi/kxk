# 000000000  00000000   0000000  000000000
#    000     000       000          000
#    000     0000000   0000000      000
#    000     000            000     000
#    000     00000000  0000000      000

kxk =  require '../'

{ filelist, slash, clamp, kpos, filter } = kxk

▸ kxk

    # 00000000  000  000      00000000  000      000   0000000  000000000
    # 000       000  000      000       000      000  000          000
    # 000000    000  000      0000000   000      000  0000000      000
    # 000       000  000      000       000      000       000     000
    # 000       000  0000000  00000000  0000000  000  0000000      000

    ▸ filelist

        ▸ exists 
            filelist is 'function' ▸ true

        ▸ chdir 
            process.chdir __dirname 
            process.cwd() ▸ __dirname
        
        # ▸ returns an array 
            # filelist('.') is Array ▸ true

        # ▸ returns empty array 
            # filelist 'foobar' logError:false ▸ []

        ▸ finds this file relative
            'test.kode' in filelist('.') ▸ true

        ▸ finds this file absolute
            slash.path(__filename) in filelist(__dirname) ▸ true

        ▸ lists relative path with dot
            (filelist('./dir').length) > 0 ▸ true

        ▸ lists relative path without dot
            (filelist('dir').length) > 0 ▸ true

        ▸ ignores hidden files by default
            slash.normalize('dir/.konrad.noon') in (filelist 'dir') ▸ false

        ▸ includes hidden files
            slash.normalize('dir/.konrad.noon') in (filelist 'dir' 'ignoreHidden': false) ▸ true

        # ▸ doesn't recurse by default
            # (filelist 'dir') ▸ [slash.normalize('dir/noext'), slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt')]

        ▸ recurses if depth set
            filelist 'dir' depth:2 ▸ [
                slash.normalize('dir/noext'),
                slash.normalize('dir/test.coffee'),
                slash.normalize('dir/test.js'),
                slash.normalize('dir/test.txt'),
                slash.normalize('dir/level1/test.coffee'),
                slash.normalize('dir/level1/test.js'),
                slash.normalize('dir/level1/test.txt'),
                slash.normalize('dir/level1/level2/level2.coffee'),
                slash.normalize('dir/level1b/level1b.coffee')]

        ▸ matches extension
            filelist 'dir' depth:3 matchExt:'coffee' ▸ [
                slash.normalize('dir/test.coffee'),
                slash.normalize('dir/level1/test.coffee'),
                slash.normalize('dir/level1/level2/level2.coffee'),
                slash.normalize('dir/level1/level2/level3/level3.coffee'),
                slash.normalize('dir/level1b/level1b.coffee')]

    # 000   000  00000000    0000000    0000000
    # 000  000   000   000  000   000  000
    # 0000000    00000000   000   000  0000000
    # 000  000   000        000   000       000
    # 000   000  000         0000000   0000000

    ▸ kpos

        ▸ angle
            (kpos(1,0).angle(kpos 0,1))                ▸ 90
            (kpos(1,0).angle(kpos 0,-1))               ▸ 90
            (kpos(0,10).angle(kpos 1,0))               ▸ 90
            (kpos(0,-10).angle(kpos 1,0))              ▸ 90

        ▸ rotation
            (Math.round kpos(0,1).rotation(kpos 1,0))  ▸ 90
            (Math.round kpos(0,-1).rotation(kpos 1,0)) ▸ -90
            (Math.round kpos(1,1).rotation(kpos 1,0))  ▸ 45
            (Math.round kpos(1,-1).rotation(kpos 1,0)) ▸ -45
            (Math.round kpos(1,0).rotation(kpos 0,1))  ▸ -90
            (Math.round kpos(1,0).rotation(kpos 0,-1)) ▸ 90

        ▸ rotate
            (kpos(1,0).rotate(90).rounded())           ▸ kpos(0,1)
            (kpos(1,0).rotate(-90).rounded())          ▸ kpos(0,-1)
            (kpos(1,0).rotate(45).rounded(0.001))      ▸ kpos(1,1).normal().rounded(0.001)

    #  0000000  000       0000000   00     00  00000000
    # 000       000      000   000  000   000  000   000
    # 000       000      000000000  000000000  00000000
    # 000       000      000   000  000 0 000  000
    #  0000000  0000000  000   000  000   000  000

    ▸ clamp

        ▸ clamps

            (clamp 0,   1, 1.1) ▸ 1
            (clamp 1,   0, 1.1) ▸ 1
            (clamp 2.2, 3, 1.1) ▸ 2.2
            (clamp 3, 2.2, 1.1) ▸ 2.2

        ▸ nulls

            (clamp  0,  1           ) ▸  0
            (clamp  2,  3, undefined) ▸  2
            (clamp  4,  5, null     ) ▸  4
            (clamp  6,  7, {}       ) ▸  6
            (clamp  8,  9, []       ) ▸  8
            (clamp 10, 11, clamp    ) ▸ 10
            (clamp -3, -2, 0        ) ▸ -2

    # 00000000  000  000      000000000  00000000  00000000
    # 000       000  000         000     000       000   000
    # 000000    000  000         000     0000000   0000000
    # 000       000  000         000     000       000   000
    # 000       000  0000000     000     00000000  000   000

    ▸ filter

        ▸ array

            (filter [1,2,3,4], (v,i) -> i % 2) ▸ [2,4]

            (filter [1,2,3,4], (v,i) -> v % 2) ▸ [1,3]

        ▸ object

            (filter {a:1,b:2,c:3,d:4}, (v,k) -> v % 2) ▸ {a:1,c:3}

            (filter {a:1,b:2,c:3,d:4}, (v,k) -> k in ['b', 'c']) ▸ {b:2,c:3}

        ▸ value

            (filter(1, ->)) ▸ 1

            (filter("hello" ->)) ▸ "hello"
