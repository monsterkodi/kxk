// koffee 1.14.0

/*
 0000000  000000000   0000000    0000000  000   000  
000          000     000   000  000       000   000  
0000000      000     000000000  0000000   000000000  
     000     000     000   000       000  000   000  
0000000      000     000   000  0000000   000   000
 */
var Stash, _, atomic, fs, kerror, noon, post, ref, sds, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), _ = ref._, atomic = ref.atomic, fs = ref.fs, kerror = ref.kerror, noon = ref.noon, post = ref.post, sds = ref.sds, slash = ref.slash;

Stash = (function() {
    function Stash(name, opt) {
        var ref1, ref2, ref3;
        this.name = name;
        this.save = bind(this.save, this);
        if (!this.name) {
            return kerror('stash.constructor -- no name?');
        }
        this.sep = (ref1 = opt != null ? opt.separator : void 0) != null ? ref1 : ':';
        this.timer = null;
        this.file = slash.path((ref2 = opt != null ? opt.file : void 0) != null ? ref2 : (post.get('userData')) + "/" + this.name + ".noon");
        this.timeout = (ref3 = opt != null ? opt.timeout : void 0) != null ? ref3 : 4000;
        this.changes = [];
        fs.ensureDirSync(slash.dirname(this.file));
        this.data = this.load();
        if ((opt != null ? opt.defaults : void 0) != null) {
            this.data = _.defaults(this.data, opt.defaults);
        }
    }

    Stash.prototype.keypath = function(key) {
        return key.split(this.sep);
    };

    Stash.prototype.get = function(key, value) {
        if ((key != null ? key.split : void 0) == null) {
            kerror('stash.get -- invalid key', key);
        }
        if ((key != null ? key.split : void 0) == null) {
            return value;
        }
        return sds.get(this.data, this.keypath(key), value);
    };

    Stash.prototype.set = function(key, value) {
        if ((key != null ? key.split : void 0) == null) {
            return kerror('stash.set -- invalid key', key);
        }
        sds.set(this.data, this.keypath(key), value);
        if (this.timer) {
            clearTimeout(this.timer);
        }
        return this.timer = setTimeout(this.save, this.timeout);
    };

    Stash.prototype.del = function(key) {
        return this.set(key);
    };

    Stash.prototype.clear = function() {
        this.data = {};
        clearTimeout(this.timer);
        this.timer = null;
        return fs.removeSync(this.file);
    };

    Stash.prototype.load = function() {
        var err;
        try {
            return noon.load(this.file);
        } catch (error) {
            err = error;
            return {};
        }
    };

    Stash.prototype.save = function() {
        var err;
        if (!this.file) {
            return;
        }
        clearTimeout(this.timer);
        this.timer = null;
        try {
            fs.ensureDirSync(slash.dir(this.file));
            return atomic.sync(this.file, noon.stringify(this.data, {
                indent: 2,
                maxalign: 8
            }));
        } catch (error) {
            err = error;
            return kerror("stash.save -- can't save to '" + this.file + "': " + err);
        }
    };

    return Stash;

})();

module.exports = Stash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhc2guanMiLCJzb3VyY2VSb290IjoiLi4vY29mZmVlIiwic291cmNlcyI6WyJzdGFzaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEseURBQUE7SUFBQTs7QUFRQSxNQUFvRCxPQUFBLENBQVEsT0FBUixDQUFwRCxFQUFFLFNBQUYsRUFBSyxtQkFBTCxFQUFhLFdBQWIsRUFBaUIsbUJBQWpCLEVBQXlCLGVBQXpCLEVBQStCLGVBQS9CLEVBQXFDLGFBQXJDLEVBQTBDOztBQUtwQztJQUVDLGVBQUMsSUFBRCxFQUFRLEdBQVI7QUFFQyxZQUFBO1FBRkEsSUFBQyxDQUFBLE9BQUQ7O1FBRUEsSUFBaUQsQ0FBSSxJQUFDLENBQUEsSUFBdEQ7QUFBQSxtQkFBTyxNQUFBLENBQU8sK0JBQVAsRUFBUDs7UUFFQSxJQUFDLENBQUEsR0FBRCxrRUFBd0I7UUFDeEIsSUFBQyxDQUFBLEtBQUQsR0FBVztRQUNYLElBQUMsQ0FBQSxJQUFELEdBQVcsS0FBSyxDQUFDLElBQU4sMkRBQXlCLENBQUMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxVQUFULENBQUQsQ0FBQSxHQUFxQixHQUFyQixHQUF3QixJQUFDLENBQUEsSUFBekIsR0FBOEIsT0FBdkQ7UUFDWCxJQUFDLENBQUEsT0FBRCxnRUFBMEI7UUFDMUIsSUFBQyxDQUFBLE9BQUQsR0FBVztRQUVYLEVBQUUsQ0FBQyxhQUFILENBQWlCLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBQyxDQUFBLElBQWYsQ0FBakI7UUFDQSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSxJQUFELENBQUE7UUFDUixJQUEwQyw2Q0FBMUM7WUFBQSxJQUFDLENBQUEsSUFBRCxHQUFRLENBQUMsQ0FBQyxRQUFGLENBQVcsSUFBQyxDQUFBLElBQVosRUFBa0IsR0FBRyxDQUFDLFFBQXRCLEVBQVI7O0lBWkQ7O29CQWNILE9BQUEsR0FBUyxTQUFDLEdBQUQ7ZUFBUyxHQUFHLENBQUMsS0FBSixDQUFVLElBQUMsQ0FBQSxHQUFYO0lBQVQ7O29CQVFULEdBQUEsR0FBSyxTQUFDLEdBQUQsRUFBTSxLQUFOO1FBQ0QsSUFBOEMsMENBQTlDO1lBQUEsTUFBQSxDQUFPLDBCQUFQLEVBQW1DLEdBQW5DLEVBQUE7O1FBQ0EsSUFBb0IsMENBQXBCO0FBQUEsbUJBQU8sTUFBUDs7ZUFDQSxHQUFHLENBQUMsR0FBSixDQUFRLElBQUMsQ0FBQSxJQUFULEVBQWUsSUFBQyxDQUFBLE9BQUQsQ0FBUyxHQUFULENBQWYsRUFBOEIsS0FBOUI7SUFIQzs7b0JBV0wsR0FBQSxHQUFLLFNBQUMsR0FBRCxFQUFNLEtBQU47UUFFRCxJQUFxRCwwQ0FBckQ7QUFBQSxtQkFBTyxNQUFBLENBQU8sMEJBQVAsRUFBbUMsR0FBbkMsRUFBUDs7UUFDQSxHQUFHLENBQUMsR0FBSixDQUFRLElBQUMsQ0FBQSxJQUFULEVBQWUsSUFBQyxDQUFBLE9BQUQsQ0FBUyxHQUFULENBQWYsRUFBOEIsS0FBOUI7UUFFQSxJQUF1QixJQUFDLENBQUEsS0FBeEI7WUFBQSxZQUFBLENBQWEsSUFBQyxDQUFBLEtBQWQsRUFBQTs7ZUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTLFVBQUEsQ0FBVyxJQUFDLENBQUEsSUFBWixFQUFrQixJQUFDLENBQUEsT0FBbkI7SUFOUjs7b0JBUUwsR0FBQSxHQUFLLFNBQUMsR0FBRDtlQUFTLElBQUMsQ0FBQSxHQUFELENBQUssR0FBTDtJQUFUOztvQkFFTCxLQUFBLEdBQU8sU0FBQTtRQUVILElBQUMsQ0FBQSxJQUFELEdBQVE7UUFDUixZQUFBLENBQWEsSUFBQyxDQUFBLEtBQWQ7UUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO2VBQ1QsRUFBRSxDQUFDLFVBQUgsQ0FBYyxJQUFDLENBQUEsSUFBZjtJQUxHOztvQkFhUCxJQUFBLEdBQU0sU0FBQTtBQUNGLFlBQUE7QUFBQTttQkFDSSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxJQUFYLEVBREo7U0FBQSxhQUFBO1lBRU07bUJBQ0YsR0FISjs7SUFERTs7b0JBWU4sSUFBQSxHQUFNLFNBQUE7QUFFRixZQUFBO1FBQUEsSUFBVSxDQUFJLElBQUMsQ0FBQSxJQUFmO0FBQUEsbUJBQUE7O1FBRUEsWUFBQSxDQUFhLElBQUMsQ0FBQSxLQUFkO1FBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUztBQUNUO1lBRUksRUFBRSxDQUFDLGFBQUgsQ0FBaUIsS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFDLENBQUEsSUFBWCxDQUFqQjttQkFDQSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxJQUFiLEVBQW1CLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBQyxDQUFBLElBQWhCLEVBQXNCO2dCQUFFLE1BQUEsRUFBUSxDQUFWO2dCQUFhLFFBQUEsRUFBVSxDQUF2QjthQUF0QixDQUFuQixFQUhKO1NBQUEsYUFBQTtZQUlNO21CQUNGLE1BQUEsQ0FBTywrQkFBQSxHQUFnQyxJQUFDLENBQUEsSUFBakMsR0FBc0MsS0FBdEMsR0FBMkMsR0FBbEQsRUFMSjs7SUFORTs7Ozs7O0FBYVYsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4wMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwICBcbiAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyMjXG5cbnsgXywgYXRvbWljLCBmcywga2Vycm9yLCBub29uLCBwb3N0LCBzZHMsIHNsYXNoIH0gPSByZXF1aXJlICcuL2t4aydcblxuIyBzaW1wbGUga2V5IHZhbHVlIHN0b3JlIHdpdGggZGVsYXllZCBzYXZpbmcgdG8gdXNlckRhdGEgZm9sZGVyXG4jIGRvZXMgbm90IHN5bmMgYmV0d2VlbiBwcm9jZXNzZXNcbiBcbmNsYXNzIFN0YXNoXG4gICAgXG4gICAgQDogKEBuYW1lLCBvcHQpIC0+XG5cbiAgICAgICAgcmV0dXJuIGtlcnJvciAnc3Rhc2guY29uc3RydWN0b3IgLS0gbm8gbmFtZT8nIGlmIG5vdCBAbmFtZVxuICAgICAgICBcbiAgICAgICAgQHNlcCA9IG9wdD8uc2VwYXJhdG9yID8gJzonXG4gICAgICAgIEB0aW1lciAgID0gbnVsbFxuICAgICAgICBAZmlsZSAgICA9IHNsYXNoLnBhdGggb3B0Py5maWxlID8gXCIje3Bvc3QuZ2V0ICd1c2VyRGF0YSd9LyN7QG5hbWV9Lm5vb25cIlxuICAgICAgICBAdGltZW91dCA9IG9wdD8udGltZW91dCA/IDQwMDBcbiAgICAgICAgQGNoYW5nZXMgPSBbXVxuICAgICAgICBcbiAgICAgICAgZnMuZW5zdXJlRGlyU3luYyBzbGFzaC5kaXJuYW1lIEBmaWxlXG4gICAgICAgIEBkYXRhID0gQGxvYWQoKVxuICAgICAgICBAZGF0YSA9IF8uZGVmYXVsdHMgQGRhdGEsIG9wdC5kZWZhdWx0cyBpZiBvcHQ/LmRlZmF1bHRzP1xuXG4gICAga2V5cGF0aDogKGtleSkgLT4ga2V5LnNwbGl0IEBzZXBcbiAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgICAgIFxuICAgIGdldDogKGtleSwgdmFsdWUpIC0+XG4gICAgICAgIGtlcnJvciAnc3Rhc2guZ2V0IC0tIGludmFsaWQga2V5Jywga2V5IGlmIG5vdCBrZXk/LnNwbGl0P1xuICAgICAgICByZXR1cm4gdmFsdWUgaWYgbm90IGtleT8uc3BsaXQ/XG4gICAgICAgIHNkcy5nZXQgQGRhdGEsIEBrZXlwYXRoKGtleSksIHZhbHVlXG4gICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgICAgMDAwICAgICBcbiAgICAjICAgICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgICBcbiAgICBcbiAgICBzZXQ6IChrZXksIHZhbHVlKSAtPlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGtlcnJvciAnc3Rhc2guc2V0IC0tIGludmFsaWQga2V5Jywga2V5IGlmIG5vdCBrZXk/LnNwbGl0P1xuICAgICAgICBzZHMuc2V0IEBkYXRhLCBAa2V5cGF0aChrZXkpLCB2YWx1ZVxuICAgICAgICBcbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lciBpZiBAdGltZXJcbiAgICAgICAgQHRpbWVyID0gc2V0VGltZW91dCBAc2F2ZSwgQHRpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgZGVsOiAoa2V5KSAtPiBAc2V0IGtleVxuICAgIFxuICAgIGNsZWFyOiAtPlxuICAgICAgICBcbiAgICAgICAgQGRhdGEgPSB7fVxuICAgICAgICBjbGVhclRpbWVvdXQgQHRpbWVyXG4gICAgICAgIEB0aW1lciA9IG51bGxcbiAgICAgICAgZnMucmVtb3ZlU3luYyBAZmlsZVxuICAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgXG4gICAgXG4gICAgbG9hZDogLT5cbiAgICAgICAgdHJ5XG4gICAgICAgICAgICBub29uLmxvYWQgQGZpbGVcbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICB7fVxuICAgICAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMDAgICAwMDAgMDAwICAgMDAwMDAwMCBcbiAgICAjICAgICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAgICAwMDAgICAgICAwICAgICAgMDAwMDAwMDBcblxuICAgIHNhdmU6ID0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgbm90IEBmaWxlXG4gICAgICAgIFxuICAgICAgICBjbGVhclRpbWVvdXQgQHRpbWVyXG4gICAgICAgIEB0aW1lciA9IG51bGxcbiAgICAgICAgdHJ5XG4gICAgICAgICAgICAjIGxvZyAnc2F2ZSBzdGFzaCcsIEBmaWxlXG4gICAgICAgICAgICBmcy5lbnN1cmVEaXJTeW5jIHNsYXNoLmRpciBAZmlsZVxuICAgICAgICAgICAgYXRvbWljLnN5bmMgQGZpbGUsIG5vb24uc3RyaW5naWZ5IEBkYXRhLCB7IGluZGVudDogMiwgbWF4YWxpZ246IDggfVxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIGtlcnJvciBcInN0YXNoLnNhdmUgLS0gY2FuJ3Qgc2F2ZSB0byAnI3tAZmlsZX0nOiAje2Vycn1cIlxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gU3Rhc2hcbiJdfQ==
//# sourceURL=../coffee/stash.coffee