// koffee 1.14.0

/*
 0000000  000000000   0000000    0000000  000   000  
000          000     000   000  000       000   000  
0000000      000     000000000  0000000   000000000  
     000     000     000   000       000  000   000  
0000000      000     000   000  0000000   000   000
 */
var Stash, _, fs, kerror, noon, post, ref, sds, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), _ = ref._, fs = ref.fs, kerror = ref.kerror, noon = ref.noon, post = ref.post, sds = ref.sds, slash = ref.slash;

Stash = (function() {
    function Stash(name, opt) {
        var ref1, ref2, ref3;
        this.name = name;
        this.save = bind(this.save, this);
        if (!this.name) {
            return kerror('stash.constructor -- no name?');
        }
        this.sep = (ref1 = opt != null ? opt.separator : void 0) != null ? ref1 : ':';
        this.timer = null;
        this.file = slash.path((ref2 = opt != null ? opt.file : void 0) != null ? ref2 : (post.get('userData')) + "/" + this.name + ".noon");
        this.timeout = (ref3 = opt != null ? opt.timeout : void 0) != null ? ref3 : 4000;
        this.changes = [];
        fs.ensureDirSync(slash.dirname(this.file));
        this.data = this.load();
        if ((opt != null ? opt.defaults : void 0) != null) {
            this.data = _.defaults(this.data, opt.defaults);
        }
    }

    Stash.prototype.keypath = function(key) {
        return key.split(this.sep);
    };

    Stash.prototype.get = function(key, value) {
        if ((key != null ? key.split : void 0) == null) {
            kerror('stash.get -- invalid key', key);
        }
        if ((key != null ? key.split : void 0) == null) {
            return value;
        }
        return sds.get(this.data, this.keypath(key), value);
    };

    Stash.prototype.set = function(key, value) {
        if ((key != null ? key.split : void 0) == null) {
            return kerror('stash.set -- invalid key', key);
        }
        sds.set(this.data, this.keypath(key), value);
        if (this.timer) {
            clearTimeout(this.timer);
        }
        return this.timer = setTimeout(this.save, this.timeout);
    };

    Stash.prototype.del = function(key) {
        return this.set(key);
    };

    Stash.prototype.clear = function() {
        this.data = {};
        clearTimeout(this.timer);
        this.timer = null;
        return fs.removeSync(this.file);
    };

    Stash.prototype.load = function() {
        var err;
        try {
            return noon.load(this.file);
        } catch (error) {
            err = error;
            return {};
        }
    };

    Stash.prototype.save = function() {
        var err;
        if (!this.file) {
            return;
        }
        clearTimeout(this.timer);
        this.timer = null;
        try {
            return fs.ensureDir(slash.dir(this.file), function(err) {
                var text;
                if (!err) {
                    text = noon.stringify(this.data, {
                        indent: 2,
                        maxalign: 8
                    });
                    return slash.writeText(this.file, text, function(p) {
                        return post.toMain('stashSaved');
                    });
                }
            });
        } catch (error) {
            err = error;
            return kerror("stash.save -- can't save to '" + this.file + "': " + err);
        }
    };

    return Stash;

})();

module.exports = Stash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhc2guanMiLCJzb3VyY2VSb290IjoiLi4vY29mZmVlIiwic291cmNlcyI6WyJzdGFzaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsaURBQUE7SUFBQTs7QUFRQSxNQUE0QyxPQUFBLENBQVEsT0FBUixDQUE1QyxFQUFFLFNBQUYsRUFBSyxXQUFMLEVBQVMsbUJBQVQsRUFBaUIsZUFBakIsRUFBdUIsZUFBdkIsRUFBNkIsYUFBN0IsRUFBa0M7O0FBSzVCO0lBRUMsZUFBQyxJQUFELEVBQVEsR0FBUjtBQUVDLFlBQUE7UUFGQSxJQUFDLENBQUEsT0FBRDs7UUFFQSxJQUFpRCxDQUFJLElBQUMsQ0FBQSxJQUF0RDtBQUFBLG1CQUFPLE1BQUEsQ0FBTywrQkFBUCxFQUFQOztRQUVBLElBQUMsQ0FBQSxHQUFELGtFQUF3QjtRQUN4QixJQUFDLENBQUEsS0FBRCxHQUFXO1FBQ1gsSUFBQyxDQUFBLElBQUQsR0FBVyxLQUFLLENBQUMsSUFBTiwyREFBeUIsQ0FBQyxJQUFJLENBQUMsR0FBTCxDQUFTLFVBQVQsQ0FBRCxDQUFBLEdBQXFCLEdBQXJCLEdBQXdCLElBQUMsQ0FBQSxJQUF6QixHQUE4QixPQUF2RDtRQUNYLElBQUMsQ0FBQSxPQUFELGdFQUEwQjtRQUMxQixJQUFDLENBQUEsT0FBRCxHQUFXO1FBRVgsRUFBRSxDQUFDLGFBQUgsQ0FBaUIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFDLENBQUEsSUFBZixDQUFqQjtRQUNBLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLElBQUQsQ0FBQTtRQUNSLElBQTBDLDZDQUExQztZQUFBLElBQUMsQ0FBQSxJQUFELEdBQVEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxJQUFDLENBQUEsSUFBWixFQUFrQixHQUFHLENBQUMsUUFBdEIsRUFBUjs7SUFaRDs7b0JBY0gsT0FBQSxHQUFTLFNBQUMsR0FBRDtlQUFTLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBQyxDQUFBLEdBQVg7SUFBVDs7b0JBUVQsR0FBQSxHQUFLLFNBQUMsR0FBRCxFQUFNLEtBQU47UUFDRCxJQUE4QywwQ0FBOUM7WUFBQSxNQUFBLENBQU8sMEJBQVAsRUFBbUMsR0FBbkMsRUFBQTs7UUFDQSxJQUFvQiwwQ0FBcEI7QUFBQSxtQkFBTyxNQUFQOztlQUNBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBQyxDQUFBLElBQVQsRUFBZSxJQUFDLENBQUEsT0FBRCxDQUFTLEdBQVQsQ0FBZixFQUE4QixLQUE5QjtJQUhDOztvQkFXTCxHQUFBLEdBQUssU0FBQyxHQUFELEVBQU0sS0FBTjtRQUVELElBQXFELDBDQUFyRDtBQUFBLG1CQUFPLE1BQUEsQ0FBTywwQkFBUCxFQUFtQyxHQUFuQyxFQUFQOztRQUNBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBQyxDQUFBLElBQVQsRUFBZSxJQUFDLENBQUEsT0FBRCxDQUFTLEdBQVQsQ0FBZixFQUE4QixLQUE5QjtRQUVBLElBQXVCLElBQUMsQ0FBQSxLQUF4QjtZQUFBLFlBQUEsQ0FBYSxJQUFDLENBQUEsS0FBZCxFQUFBOztlQUNBLElBQUMsQ0FBQSxLQUFELEdBQVMsVUFBQSxDQUFXLElBQUMsQ0FBQSxJQUFaLEVBQWtCLElBQUMsQ0FBQSxPQUFuQjtJQU5SOztvQkFRTCxHQUFBLEdBQUssU0FBQyxHQUFEO2VBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxHQUFMO0lBQVQ7O29CQUVMLEtBQUEsR0FBTyxTQUFBO1FBRUgsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLFlBQUEsQ0FBYSxJQUFDLENBQUEsS0FBZDtRQUNBLElBQUMsQ0FBQSxLQUFELEdBQVM7ZUFDVCxFQUFFLENBQUMsVUFBSCxDQUFjLElBQUMsQ0FBQSxJQUFmO0lBTEc7O29CQWFQLElBQUEsR0FBTSxTQUFBO0FBQ0YsWUFBQTtBQUFBO21CQUNJLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLElBQVgsRUFESjtTQUFBLGFBQUE7WUFFTTttQkFDRixHQUhKOztJQURFOztvQkFZTixJQUFBLEdBQU0sU0FBQTtBQUVGLFlBQUE7UUFBQSxJQUFVLENBQUksSUFBQyxDQUFBLElBQWY7QUFBQSxtQkFBQTs7UUFFQSxZQUFBLENBQWEsSUFBQyxDQUFBLEtBQWQ7UUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO0FBQ1Q7bUJBQ0ksRUFBRSxDQUFDLFNBQUgsQ0FBYSxLQUFLLENBQUMsR0FBTixDQUFVLElBQUMsQ0FBQSxJQUFYLENBQWIsRUFBK0IsU0FBQyxHQUFEO0FBQzNCLG9CQUFBO2dCQUFBLElBQUcsQ0FBSSxHQUFQO29CQUNJLElBQUEsR0FBTyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQUMsQ0FBQSxJQUFoQixFQUFzQjt3QkFBRSxNQUFBLEVBQVEsQ0FBVjt3QkFBYSxRQUFBLEVBQVUsQ0FBdkI7cUJBQXRCOzJCQUNQLEtBQUssQ0FBQyxTQUFOLENBQWdCLElBQUMsQ0FBQSxJQUFqQixFQUF1QixJQUF2QixFQUE2QixTQUFDLENBQUQ7K0JBQ3pCLElBQUksQ0FBQyxNQUFMLENBQVksWUFBWjtvQkFEeUIsQ0FBN0IsRUFGSjs7WUFEMkIsQ0FBL0IsRUFESjtTQUFBLGFBQUE7WUFNTTttQkFDRixNQUFBLENBQU8sK0JBQUEsR0FBZ0MsSUFBQyxDQUFBLElBQWpDLEdBQXNDLEtBQXRDLEdBQTJDLEdBQWxELEVBUEo7O0lBTkU7Ozs7OztBQWVWLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4gMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgIFxuMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICBcbjAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4gICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgICAgICAgMDAwICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiMjI1xuXG57IF8sIGZzLCBrZXJyb3IsIG5vb24sIHBvc3QsIHNkcywgc2xhc2ggfSA9IHJlcXVpcmUgJy4va3hrJ1xuXG4jIHNpbXBsZSBrZXkgdmFsdWUgc3RvcmUgd2l0aCBkZWxheWVkIHNhdmluZyB0byB1c2VyRGF0YSBmb2xkZXJcbiMgZG9lcyBub3Qgc3luYyBiZXR3ZWVuIHByb2Nlc3Nlc1xuIFxuY2xhc3MgU3Rhc2hcbiAgICBcbiAgICBAOiAoQG5hbWUsIG9wdCkgLT5cblxuICAgICAgICByZXR1cm4ga2Vycm9yICdzdGFzaC5jb25zdHJ1Y3RvciAtLSBubyBuYW1lPycgaWYgbm90IEBuYW1lXG4gICAgICAgIFxuICAgICAgICBAc2VwID0gb3B0Py5zZXBhcmF0b3IgPyAnOidcbiAgICAgICAgQHRpbWVyICAgPSBudWxsXG4gICAgICAgIEBmaWxlICAgID0gc2xhc2gucGF0aCBvcHQ/LmZpbGUgPyBcIiN7cG9zdC5nZXQgJ3VzZXJEYXRhJ30vI3tAbmFtZX0ubm9vblwiXG4gICAgICAgIEB0aW1lb3V0ID0gb3B0Py50aW1lb3V0ID8gNDAwMFxuICAgICAgICBAY2hhbmdlcyA9IFtdXG4gICAgICAgIFxuICAgICAgICBmcy5lbnN1cmVEaXJTeW5jIHNsYXNoLmRpcm5hbWUgQGZpbGVcbiAgICAgICAgQGRhdGEgPSBAbG9hZCgpXG4gICAgICAgIEBkYXRhID0gXy5kZWZhdWx0cyBAZGF0YSwgb3B0LmRlZmF1bHRzIGlmIG9wdD8uZGVmYXVsdHM/XG5cbiAgICBrZXlwYXRoOiAoa2V5KSAtPiBrZXkuc3BsaXQgQHNlcFxuICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgIDAwMCAgICAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICBcbiAgICAgICAgXG4gICAgZ2V0OiAoa2V5LCB2YWx1ZSkgLT5cbiAgICAgICAga2Vycm9yICdzdGFzaC5nZXQgLS0gaW52YWxpZCBrZXknLCBrZXkgaWYgbm90IGtleT8uc3BsaXQ/XG4gICAgICAgIHJldHVybiB2YWx1ZSBpZiBub3Qga2V5Py5zcGxpdD9cbiAgICAgICAgc2RzLmdldCBAZGF0YSwgQGtleXBhdGgoa2V5KSwgdmFsdWVcbiAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIHNldDogKGtleSwgdmFsdWUpIC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ga2Vycm9yICdzdGFzaC5zZXQgLS0gaW52YWxpZCBrZXknLCBrZXkgaWYgbm90IGtleT8uc3BsaXQ/XG4gICAgICAgIHNkcy5zZXQgQGRhdGEsIEBrZXlwYXRoKGtleSksIHZhbHVlXG4gICAgICAgIFxuICAgICAgICBjbGVhclRpbWVvdXQgQHRpbWVyIGlmIEB0aW1lclxuICAgICAgICBAdGltZXIgPSBzZXRUaW1lb3V0IEBzYXZlLCBAdGltZW91dFxuICAgICAgICAgICAgICAgICAgICBcbiAgICBkZWw6IChrZXkpIC0+IEBzZXQga2V5XG4gICAgXG4gICAgY2xlYXI6IC0+XG4gICAgICAgIFxuICAgICAgICBAZGF0YSA9IHt9XG4gICAgICAgIGNsZWFyVGltZW91dCBAdGltZXJcbiAgICAgICAgQHRpbWVyID0gbnVsbFxuICAgICAgICBmcy5yZW1vdmVTeW5jIEBmaWxlXG4gICAgICAgIFxuICAgICMgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICBcbiAgICBsb2FkOiAtPlxuICAgICAgICB0cnlcbiAgICAgICAgICAgIG5vb24ubG9hZCBAZmlsZVxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIHt9XG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgIDAwMCAwMDAgICAwMDAwMDAwIFxuICAgICMgICAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgIDAgICAgICAwMDAwMDAwMFxuXG4gICAgc2F2ZTogPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQGZpbGVcbiAgICAgICAgXG4gICAgICAgIGNsZWFyVGltZW91dCBAdGltZXJcbiAgICAgICAgQHRpbWVyID0gbnVsbFxuICAgICAgICB0cnlcbiAgICAgICAgICAgIGZzLmVuc3VyZURpciBzbGFzaC5kaXIoQGZpbGUpLCAoZXJyKSAtPlxuICAgICAgICAgICAgICAgIGlmIG5vdCBlcnJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IG5vb24uc3RyaW5naWZ5IEBkYXRhLCB7IGluZGVudDogMiwgbWF4YWxpZ246IDggfVxuICAgICAgICAgICAgICAgICAgICBzbGFzaC53cml0ZVRleHQgQGZpbGUsIHRleHQsIChwKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdC50b01haW4gJ3N0YXNoU2F2ZWQnXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAga2Vycm9yIFwic3Rhc2guc2F2ZSAtLSBjYW4ndCBzYXZlIHRvICcje0BmaWxlfSc6ICN7ZXJyfVwiXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTdGFzaFxuIl19
//# sourceURL=../coffee/stash.coffee