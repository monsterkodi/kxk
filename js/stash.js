// koffee 1.4.0

/*
 0000000  000000000   0000000    0000000  000   000  
000          000     000   000  000       000   000  
0000000      000     000000000  0000000   000000000  
     000     000     000   000       000  000   000  
0000000      000     000   000  0000000   000   000
 */
var Stash, _, atomic, fs, kerror, noon, ref, sds, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), noon = ref.noon, atomic = ref.atomic, slash = ref.slash, fs = ref.fs, sds = ref.sds, kerror = ref.kerror, _ = ref._;

Stash = (function() {
    function Stash(name, opt) {
        var app, electron, ref1, ref2, ref3, ref4;
        this.name = name;
        this.save = bind(this.save, this);
        if (!this.name) {
            return kerror('stash.constructor -- no name?');
        }
        electron = require('electron');
        app = (ref1 = electron.app) != null ? ref1 : electron.remote.app;
        this.sep = (ref2 = opt != null ? opt.separator : void 0) != null ? ref2 : ':';
        this.timer = null;
        this.file = slash.path((ref3 = opt != null ? opt.file : void 0) != null ? ref3 : (slash.userData()) + "/" + this.name + ".noon");
        this.timeout = (ref4 = opt != null ? opt.timeout : void 0) != null ? ref4 : 4000;
        this.changes = [];
        fs.ensureDirSync(slash.dirname(this.file));
        this.data = this.load();
        if ((opt != null ? opt.defaults : void 0) != null) {
            this.data = _.defaults(this.data, opt.defaults);
        }
    }

    Stash.prototype.keypath = function(key) {
        return key.split(this.sep);
    };

    Stash.prototype.get = function(key, value) {
        if ((key != null ? key.split : void 0) == null) {
            kerror('stash.get -- invalid key', key);
        }
        if ((key != null ? key.split : void 0) == null) {
            return value;
        }
        return sds.get(this.data, this.keypath(key), value);
    };

    Stash.prototype.set = function(key, value) {
        if ((key != null ? key.split : void 0) == null) {
            return kerror('stash.set -- invalid key', key);
        }
        sds.set(this.data, this.keypath(key), value);
        if (this.timer) {
            clearTimeout(this.timer);
        }
        return this.timer = setTimeout(this.save, this.timeout);
    };

    Stash.prototype.del = function(key) {
        return this.set(key);
    };

    Stash.prototype.clear = function() {
        this.data = {};
        clearTimeout(this.timer);
        this.timer = null;
        return fs.removeSync(this.file);
    };

    Stash.prototype.load = function() {
        var err;
        try {
            return noon.load(this.file);
        } catch (error) {
            err = error;
            return {};
        }
    };

    Stash.prototype.save = function() {
        var err;
        if (!this.file) {
            return;
        }
        clearTimeout(this.timer);
        this.timer = null;
        try {
            fs.ensureDirSync(slash.dir(this.file));
            return atomic.sync(this.file, noon.stringify(this.data, {
                indent: 2,
                maxalign: 8
            }));
        } catch (error) {
            err = error;
            return kerror("stash.save -- can't save to '" + this.file + "': " + err);
        }
    };

    return Stash;

})();

module.exports = Stash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhc2guanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLG1EQUFBO0lBQUE7O0FBUUEsTUFBOEMsT0FBQSxDQUFRLE9BQVIsQ0FBOUMsRUFBRSxlQUFGLEVBQVEsbUJBQVIsRUFBZ0IsaUJBQWhCLEVBQXVCLFdBQXZCLEVBQTJCLGFBQTNCLEVBQWdDLG1CQUFoQyxFQUF3Qzs7QUFLbEM7SUFFQyxlQUFDLElBQUQsRUFBUSxHQUFSO0FBRUMsWUFBQTtRQUZBLElBQUMsQ0FBQSxPQUFEOztRQUVBLElBQWlELENBQUksSUFBQyxDQUFBLElBQXREO0FBQUEsbUJBQU8sTUFBQSxDQUFPLCtCQUFQLEVBQVA7O1FBRUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSO1FBQ1gsR0FBQSwwQ0FBc0IsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUV0QyxJQUFDLENBQUEsR0FBRCxrRUFBd0I7UUFDeEIsSUFBQyxDQUFBLEtBQUQsR0FBVztRQUNYLElBQUMsQ0FBQSxJQUFELEdBQVcsS0FBSyxDQUFDLElBQU4sMkRBQXlCLENBQUMsS0FBSyxDQUFDLFFBQU4sQ0FBQSxDQUFELENBQUEsR0FBa0IsR0FBbEIsR0FBcUIsSUFBQyxDQUFBLElBQXRCLEdBQTJCLE9BQXBEO1FBQ1gsSUFBQyxDQUFBLE9BQUQsZ0VBQTBCO1FBQzFCLElBQUMsQ0FBQSxPQUFELEdBQVc7UUFFWCxFQUFFLENBQUMsYUFBSCxDQUFpQixLQUFLLENBQUMsT0FBTixDQUFjLElBQUMsQ0FBQSxJQUFmLENBQWpCO1FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsSUFBRCxDQUFBO1FBQ1IsSUFBMEMsNkNBQTFDO1lBQUEsSUFBQyxDQUFBLElBQUQsR0FBUSxDQUFDLENBQUMsUUFBRixDQUFXLElBQUMsQ0FBQSxJQUFaLEVBQWtCLEdBQUcsQ0FBQyxRQUF0QixFQUFSOztJQWZEOztvQkFpQkgsT0FBQSxHQUFTLFNBQUMsR0FBRDtlQUFTLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBQyxDQUFBLEdBQVg7SUFBVDs7b0JBUVQsR0FBQSxHQUFLLFNBQUMsR0FBRCxFQUFNLEtBQU47UUFDRCxJQUE4QywwQ0FBOUM7WUFBQSxNQUFBLENBQU8sMEJBQVAsRUFBbUMsR0FBbkMsRUFBQTs7UUFDQSxJQUFvQiwwQ0FBcEI7QUFBQSxtQkFBTyxNQUFQOztlQUNBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBQyxDQUFBLElBQVQsRUFBZSxJQUFDLENBQUEsT0FBRCxDQUFTLEdBQVQsQ0FBZixFQUE4QixLQUE5QjtJQUhDOztvQkFXTCxHQUFBLEdBQUssU0FBQyxHQUFELEVBQU0sS0FBTjtRQUVELElBQXFELDBDQUFyRDtBQUFBLG1CQUFPLE1BQUEsQ0FBTywwQkFBUCxFQUFtQyxHQUFuQyxFQUFQOztRQUNBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBQyxDQUFBLElBQVQsRUFBZSxJQUFDLENBQUEsT0FBRCxDQUFTLEdBQVQsQ0FBZixFQUE4QixLQUE5QjtRQUVBLElBQXVCLElBQUMsQ0FBQSxLQUF4QjtZQUFBLFlBQUEsQ0FBYSxJQUFDLENBQUEsS0FBZCxFQUFBOztlQUNBLElBQUMsQ0FBQSxLQUFELEdBQVMsVUFBQSxDQUFXLElBQUMsQ0FBQSxJQUFaLEVBQWtCLElBQUMsQ0FBQSxPQUFuQjtJQU5SOztvQkFRTCxHQUFBLEdBQUssU0FBQyxHQUFEO2VBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxHQUFMO0lBQVQ7O29CQUVMLEtBQUEsR0FBTyxTQUFBO1FBRUgsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLFlBQUEsQ0FBYSxJQUFDLENBQUEsS0FBZDtRQUNBLElBQUMsQ0FBQSxLQUFELEdBQVM7ZUFDVCxFQUFFLENBQUMsVUFBSCxDQUFjLElBQUMsQ0FBQSxJQUFmO0lBTEc7O29CQWFQLElBQUEsR0FBTSxTQUFBO0FBQ0YsWUFBQTtBQUFBO21CQUNJLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLElBQVgsRUFESjtTQUFBLGFBQUE7WUFFTTttQkFDRixHQUhKOztJQURFOztvQkFZTixJQUFBLEdBQU0sU0FBQTtBQUVGLFlBQUE7UUFBQSxJQUFVLENBQUksSUFBQyxDQUFBLElBQWY7QUFBQSxtQkFBQTs7UUFFQSxZQUFBLENBQWEsSUFBQyxDQUFBLEtBQWQ7UUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO0FBQ1Q7WUFFSSxFQUFFLENBQUMsYUFBSCxDQUFpQixLQUFLLENBQUMsR0FBTixDQUFVLElBQUMsQ0FBQSxJQUFYLENBQWpCO21CQUNBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLElBQWIsRUFBbUIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFDLENBQUEsSUFBaEIsRUFBc0I7Z0JBQUUsTUFBQSxFQUFRLENBQVY7Z0JBQWEsUUFBQSxFQUFVLENBQXZCO2FBQXRCLENBQW5CLEVBSEo7U0FBQSxhQUFBO1lBSU07bUJBQ0YsTUFBQSxDQUFPLCtCQUFBLEdBQWdDLElBQUMsQ0FBQSxJQUFqQyxHQUFzQyxLQUF0QyxHQUEyQyxHQUFsRCxFQUxKOztJQU5FOzs7Ozs7QUFhVixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICBcbjAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICBcbjAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4jIyNcblxueyBub29uLCBhdG9taWMsIHNsYXNoLCBmcywgc2RzLCBrZXJyb3IsIF8gfSA9IHJlcXVpcmUgJy4va3hrJ1xuXG4jIHNpbXBsZSBrZXkgdmFsdWUgc3RvcmUgd2l0aCBkZWxheWVkIHNhdmluZyB0byB1c2VyRGF0YSBmb2xkZXJcbiMgZG9lcyBub3Qgc3luYyBiZXR3ZWVuIHByb2Nlc3Nlc1xuIFxuY2xhc3MgU3Rhc2hcbiAgICBcbiAgICBAOiAoQG5hbWUsIG9wdCkgLT5cblxuICAgICAgICByZXR1cm4ga2Vycm9yICdzdGFzaC5jb25zdHJ1Y3RvciAtLSBubyBuYW1lPycgaWYgbm90IEBuYW1lXG4gICAgICAgIFxuICAgICAgICBlbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuICAgICAgICBhcHAgID0gZWxlY3Ryb24uYXBwID8gZWxlY3Ryb24ucmVtb3RlLmFwcFxuXG4gICAgICAgIEBzZXAgPSBvcHQ/LnNlcGFyYXRvciA/ICc6J1xuICAgICAgICBAdGltZXIgICA9IG51bGxcbiAgICAgICAgQGZpbGUgICAgPSBzbGFzaC5wYXRoIG9wdD8uZmlsZSA/IFwiI3tzbGFzaC51c2VyRGF0YSgpfS8je0BuYW1lfS5ub29uXCJcbiAgICAgICAgQHRpbWVvdXQgPSBvcHQ/LnRpbWVvdXQgPyA0MDAwXG4gICAgICAgIEBjaGFuZ2VzID0gW11cbiAgICAgICAgXG4gICAgICAgIGZzLmVuc3VyZURpclN5bmMgc2xhc2guZGlybmFtZSBAZmlsZVxuICAgICAgICBAZGF0YSA9IEBsb2FkKClcbiAgICAgICAgQGRhdGEgPSBfLmRlZmF1bHRzIEBkYXRhLCBvcHQuZGVmYXVsdHMgaWYgb3B0Py5kZWZhdWx0cz9cblxuICAgIGtleXBhdGg6IChrZXkpIC0+IGtleS5zcGxpdCBAc2VwXG4gICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgICMgMDAwICAwMDAwICAwMDAwMDAwICAgICAgMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgICAgIDAwMCAgIFxuICAgICAgICBcbiAgICBnZXQ6IChrZXksIHZhbHVlKSAtPlxuICAgICAgICBrZXJyb3IgJ3N0YXNoLmdldCAtLSBpbnZhbGlkIGtleScsIGtleSBpZiBub3Qga2V5Py5zcGxpdD9cbiAgICAgICAgcmV0dXJuIHZhbHVlIGlmIG5vdCBrZXk/LnNwbGl0P1xuICAgICAgICBzZHMuZ2V0IEBkYXRhLCBAa2V5cGF0aChrZXkpLCB2YWx1ZVxuICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgICAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAgICAgIDAwMCAgICAgXG4gICAgXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgLT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBrZXJyb3IgJ3N0YXNoLnNldCAtLSBpbnZhbGlkIGtleScsIGtleSBpZiBub3Qga2V5Py5zcGxpdD9cbiAgICAgICAgc2RzLnNldCBAZGF0YSwgQGtleXBhdGgoa2V5KSwgdmFsdWVcbiAgICAgICAgXG4gICAgICAgIGNsZWFyVGltZW91dCBAdGltZXIgaWYgQHRpbWVyXG4gICAgICAgIEB0aW1lciA9IHNldFRpbWVvdXQgQHNhdmUsIEB0aW1lb3V0XG4gICAgICAgICAgICAgICAgICAgIFxuICAgIGRlbDogKGtleSkgLT4gQHNldCBrZXlcbiAgICBcbiAgICBjbGVhcjogLT5cbiAgICAgICAgXG4gICAgICAgIEBkYXRhID0ge31cbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICBAdGltZXIgPSBudWxsXG4gICAgICAgIGZzLnJlbW92ZVN5bmMgQGZpbGVcbiAgICAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIGxvYWQ6IC0+XG4gICAgICAgIHRyeVxuICAgICAgICAgICAgbm9vbi5sb2FkIEBmaWxlXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAge31cbiAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwICAgMDAwICAgICAgMCAgICAgIDAwMDAwMDAwXG5cbiAgICBzYXZlOiA9PlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAZmlsZVxuICAgICAgICBcbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICBAdGltZXIgPSBudWxsXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgIyBsb2cgJ3NhdmUgc3Rhc2gnLCBAZmlsZVxuICAgICAgICAgICAgZnMuZW5zdXJlRGlyU3luYyBzbGFzaC5kaXIgQGZpbGVcbiAgICAgICAgICAgIGF0b21pYy5zeW5jIEBmaWxlLCBub29uLnN0cmluZ2lmeSBAZGF0YSwgeyBpbmRlbnQ6IDIsIG1heGFsaWduOiA4IH1cbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBrZXJyb3IgXCJzdGFzaC5zYXZlIC0tIGNhbid0IHNhdmUgdG8gJyN7QGZpbGV9JzogI3tlcnJ9XCJcbiAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXNoXG4iXX0=
//# sourceURL=../coffee/stash.coffee