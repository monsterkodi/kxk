(function() {
  /*
   0000000  000000000   0000000    0000000  000   000  
  000          000     000   000  000       000   000  
  0000000      000     000000000  0000000   000000000  
       000     000     000   000       000  000   000  
  0000000      000     000   000  0000000   000   000  
  */
  var Stash, _, atomic, error, fs, log, noon, sds, slash;

  ({noon, atomic, slash, fs, sds, log, error, _} = require('./kxk'));

  // simple key value store with delayed saving to userData folder
  // does not sync between processes
  Stash = class Stash {
    constructor(name, opt) {
      var app, electron, ref, ref1, ref2, ref3;
      
      //  0000000   0000000   000   000  00000000
      // 000       000   000  000   000  000     
      // 0000000   000000000   000 000   0000000 
      //      000  000   000     000     000     
      // 0000000   000   000      0      00000000
      this.save = this.save.bind(this);
      this.name = name;
      if (!this.name) {
        return error('stash.constructor -- no name?');
      }
      electron = require('electron');
      app = (ref = electron.app) != null ? ref : electron.remote.app;
      this.sep = (ref1 = opt != null ? opt.separator : void 0) != null ? ref1 : ':';
      this.timer = null;
      this.file = slash.path((ref2 = opt != null ? opt.file : void 0) != null ? ref2 : `${app.getPath('userData')}/${this.name}.noon`);
      this.timeout = (ref3 = opt != null ? opt.timeout : void 0) != null ? ref3 : 4000;
      this.changes = [];
      fs.ensureDirSync(slash.dirname(this.file));
      this.data = this.load();
      if ((opt != null ? opt.defaults : void 0) != null) {
        this.data = _.defaults(this.data, opt.defaults);
      }
    }

    keypath(key) {
      return key.split(this.sep);
    }

    
    //  0000000   00000000  000000000
    // 000        000          000   
    // 000  0000  0000000      000   
    // 000   000  000          000   
    //  0000000   00000000     000   
    get(key, value) {
      if ((key != null ? key.split : void 0) == null) {
        error('stash.get -- invalid key', key);
      }
      if ((key != null ? key.split : void 0) == null) {
        return value;
      }
      return sds.get(this.data, this.keypath(key), value);
    }

    
    //  0000000  00000000  000000000  
    // 000       000          000     
    // 0000000   0000000      000     
    //      000  000          000     
    // 0000000   00000000     000     
    set(key, value) {
      if ((key != null ? key.split : void 0) == null) {
        return error('stash.set -- invalid key', key);
      }
      sds.set(this.data, this.keypath(key), value);
      if (this.timer) {
        clearTimeout(this.timer);
      }
      return this.timer = setTimeout(this.save, this.timeout);
    }

    del(key) {
      return this.set(key);
    }

    clear() {
      this.data = {};
      clearTimeout(this.timer);
      this.timer = null;
      return fs.removeSync(this.file);
    }

    
    // 000       0000000    0000000   0000000    
    // 000      000   000  000   000  000   000  
    // 000      000   000  000000000  000   000  
    // 000      000   000  000   000  000   000  
    // 0000000   0000000   000   000  0000000    
    load() {
      var err;
      try {
        return noon.load(this.file);
      } catch (error1) {
        err = error1;
        return {};
      }
    }

    save() {
      var err;
      if (!this.file) {
        return;
      }
      clearTimeout(this.timer);
      this.timer = null;
      try {
        // log 'save stash', @file
        fs.ensureDirSync(slash.dir(this.file));
        return atomic.sync(this.file, noon.stringify(this.data, {
          indent: 2,
          maxalign: 8
        }));
      } catch (error1) {
        err = error1;
        return error(`stash.save -- can't save to '${this.file}': ${err}`);
      }
    }

  };

  module.exports = Stash;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhc2guanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiLi4vY29mZmVlL3N0YXNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBOztFQVFBLENBQUEsQ0FBRSxJQUFGLEVBQVEsTUFBUixFQUFnQixLQUFoQixFQUF1QixFQUF2QixFQUEyQixHQUEzQixFQUFnQyxHQUFoQyxFQUFxQyxLQUFyQyxFQUE0QyxDQUE1QyxDQUFBLEdBQWtELE9BQUEsQ0FBUSxPQUFSLENBQWxELEVBUkE7Ozs7RUFhTSxRQUFOLE1BQUEsTUFBQTtJQUVJLFdBQWEsS0FBQSxFQUFRLEdBQVIsQ0FBQTtBQUVULFVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBOzs7Ozs7O1VBcUVKLENBQUEsV0FBQSxDQUFBO01BdkVjLElBQUMsQ0FBQTtNQUVYLElBQWdELENBQUksSUFBQyxDQUFBLElBQXJEO0FBQUEsZUFBTyxLQUFBLENBQU0sK0JBQU4sRUFBUDs7TUFFQSxRQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7TUFDWCxHQUFBLHdDQUFzQixRQUFRLENBQUMsTUFBTSxDQUFDO01BRXRDLElBQUMsQ0FBQSxHQUFELGtFQUF3QjtNQUN4QixJQUFDLENBQUEsS0FBRCxHQUFXO01BQ1gsSUFBQyxDQUFBLElBQUQsR0FBVyxLQUFLLENBQUMsSUFBTiwyREFBdUIsQ0FBQSxDQUFBLENBQUcsR0FBRyxDQUFDLE9BQUosQ0FBWSxVQUFaLENBQUgsQ0FBMkIsQ0FBM0IsQ0FBQSxDQUE4QixJQUFDLENBQUEsSUFBL0IsQ0FBb0MsS0FBcEMsQ0FBdkI7TUFDWCxJQUFDLENBQUEsT0FBRCxnRUFBMEI7TUFDMUIsSUFBQyxDQUFBLE9BQUQsR0FBVztNQUVYLEVBQUUsQ0FBQyxhQUFILENBQWlCLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBQyxDQUFBLElBQWYsQ0FBakI7TUFDQSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSxJQUFELENBQUE7TUFDUixJQUEwQyw2Q0FBMUM7UUFBQSxJQUFDLENBQUEsSUFBRCxHQUFRLENBQUMsQ0FBQyxRQUFGLENBQVcsSUFBQyxDQUFBLElBQVosRUFBa0IsR0FBRyxDQUFDLFFBQXRCLEVBQVI7O0lBZlM7O0lBaUJiLE9BQVMsQ0FBQyxHQUFELENBQUE7YUFBUyxHQUFHLENBQUMsS0FBSixDQUFVLElBQUMsQ0FBQSxHQUFYO0lBQVQsQ0FqQlQ7Ozs7Ozs7O0lBeUJBLEdBQUssQ0FBQyxHQUFELEVBQU0sS0FBTixDQUFBO01BQ0QsSUFBNkMsMENBQTdDO1FBQUEsS0FBQSxDQUFNLDBCQUFOLEVBQWtDLEdBQWxDLEVBQUE7O01BQ0EsSUFBb0IsMENBQXBCO0FBQUEsZUFBTyxNQUFQOzthQUNBLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBQyxDQUFBLElBQVQsRUFBZSxJQUFDLENBQUEsT0FBRCxDQUFTLEdBQVQsQ0FBZixFQUE4QixLQUE5QjtJQUhDLENBekJMOzs7Ozs7OztJQW9DQSxHQUFLLENBQUMsR0FBRCxFQUFNLEtBQU4sQ0FBQTtNQUVELElBQW9ELDBDQUFwRDtBQUFBLGVBQU8sS0FBQSxDQUFNLDBCQUFOLEVBQWtDLEdBQWxDLEVBQVA7O01BQ0EsR0FBRyxDQUFDLEdBQUosQ0FBUSxJQUFDLENBQUEsSUFBVCxFQUFlLElBQUMsQ0FBQSxPQUFELENBQVMsR0FBVCxDQUFmLEVBQThCLEtBQTlCO01BRUEsSUFBdUIsSUFBQyxDQUFBLEtBQXhCO1FBQUEsWUFBQSxDQUFhLElBQUMsQ0FBQSxLQUFkLEVBQUE7O2FBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxVQUFBLENBQVcsSUFBQyxDQUFBLElBQVosRUFBa0IsSUFBQyxDQUFBLE9BQW5CO0lBTlI7O0lBUUwsR0FBSyxDQUFDLEdBQUQsQ0FBQTthQUFTLElBQUMsQ0FBQSxHQUFELENBQUssR0FBTDtJQUFUOztJQUVMLEtBQU8sQ0FBQSxDQUFBO01BRUgsSUFBQyxDQUFBLElBQUQsR0FBUSxDQUFBO01BQ1IsWUFBQSxDQUFhLElBQUMsQ0FBQSxLQUFkO01BQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUzthQUNULEVBQUUsQ0FBQyxVQUFILENBQWMsSUFBQyxDQUFBLElBQWY7SUFMRyxDQTlDUDs7Ozs7Ozs7SUEyREEsSUFBTSxDQUFBLENBQUE7QUFDRixVQUFBO0FBQUE7ZUFDSSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxJQUFYLEVBREo7T0FBQSxjQUFBO1FBRU07ZUFDRixDQUFBLEVBSEo7O0lBREU7O0lBWU4sSUFBTSxDQUFBLENBQUE7QUFFRixVQUFBO01BQUEsSUFBVSxDQUFJLElBQUMsQ0FBQSxJQUFmO0FBQUEsZUFBQTs7TUFFQSxZQUFBLENBQWEsSUFBQyxDQUFBLEtBQWQ7TUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTO0FBQ1Q7O1FBRUksRUFBRSxDQUFDLGFBQUgsQ0FBaUIsS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFDLENBQUEsSUFBWCxDQUFqQjtlQUNBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLElBQWIsRUFBbUIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFDLENBQUEsSUFBaEIsRUFBc0I7VUFBRSxNQUFBLEVBQVEsQ0FBVjtVQUFhLFFBQUEsRUFBVTtRQUF2QixDQUF0QixDQUFuQixFQUhKO09BQUEsY0FBQTtRQUlNO2VBQ0YsS0FBQSxDQUFNLENBQUEsNkJBQUEsQ0FBQSxDQUFnQyxJQUFDLENBQUEsSUFBakMsQ0FBc0MsR0FBdEMsQ0FBQSxDQUEyQyxHQUEzQyxDQUFBLENBQU4sRUFMSjs7SUFORTs7RUF6RVY7O0VBc0ZBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBbkdqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICBcbjAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICBcbjAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4jIyNcblxueyBub29uLCBhdG9taWMsIHNsYXNoLCBmcywgc2RzLCBsb2csIGVycm9yLCBfIH0gPSByZXF1aXJlICcuL2t4aydcblxuIyBzaW1wbGUga2V5IHZhbHVlIHN0b3JlIHdpdGggZGVsYXllZCBzYXZpbmcgdG8gdXNlckRhdGEgZm9sZGVyXG4jIGRvZXMgbm90IHN5bmMgYmV0d2VlbiBwcm9jZXNzZXNcbiBcbmNsYXNzIFN0YXNoXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAbmFtZSwgb3B0KSAtPlxuXG4gICAgICAgIHJldHVybiBlcnJvciAnc3Rhc2guY29uc3RydWN0b3IgLS0gbm8gbmFtZT8nIGlmIG5vdCBAbmFtZVxuICAgICAgICBcbiAgICAgICAgZWxlY3Ryb24gPSByZXF1aXJlICdlbGVjdHJvbidcbiAgICAgICAgYXBwICA9IGVsZWN0cm9uLmFwcCA/IGVsZWN0cm9uLnJlbW90ZS5hcHBcblxuICAgICAgICBAc2VwID0gb3B0Py5zZXBhcmF0b3IgPyAnOidcbiAgICAgICAgQHRpbWVyICAgPSBudWxsXG4gICAgICAgIEBmaWxlICAgID0gc2xhc2gucGF0aCBvcHQ/LmZpbGUgPyBcIiN7YXBwLmdldFBhdGgoJ3VzZXJEYXRhJyl9LyN7QG5hbWV9Lm5vb25cIlxuICAgICAgICBAdGltZW91dCA9IG9wdD8udGltZW91dCA/IDQwMDBcbiAgICAgICAgQGNoYW5nZXMgPSBbXVxuICAgICAgICBcbiAgICAgICAgZnMuZW5zdXJlRGlyU3luYyBzbGFzaC5kaXJuYW1lIEBmaWxlXG4gICAgICAgIEBkYXRhID0gQGxvYWQoKVxuICAgICAgICBAZGF0YSA9IF8uZGVmYXVsdHMgQGRhdGEsIG9wdC5kZWZhdWx0cyBpZiBvcHQ/LmRlZmF1bHRzP1xuXG4gICAga2V5cGF0aDogKGtleSkgLT4ga2V5LnNwbGl0IEBzZXBcbiAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgICAgIFxuICAgIGdldDogKGtleSwgdmFsdWUpIC0+XG4gICAgICAgIGVycm9yICdzdGFzaC5nZXQgLS0gaW52YWxpZCBrZXknLCBrZXkgaWYgbm90IGtleT8uc3BsaXQ/XG4gICAgICAgIHJldHVybiB2YWx1ZSBpZiBub3Qga2V5Py5zcGxpdD9cbiAgICAgICAgc2RzLmdldCBAZGF0YSwgQGtleXBhdGgoa2V5KSwgdmFsdWVcbiAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIHNldDogKGtleSwgdmFsdWUpIC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZXJyb3IgJ3N0YXNoLnNldCAtLSBpbnZhbGlkIGtleScsIGtleSBpZiBub3Qga2V5Py5zcGxpdD9cbiAgICAgICAgc2RzLnNldCBAZGF0YSwgQGtleXBhdGgoa2V5KSwgdmFsdWVcbiAgICAgICAgXG4gICAgICAgIGNsZWFyVGltZW91dCBAdGltZXIgaWYgQHRpbWVyXG4gICAgICAgIEB0aW1lciA9IHNldFRpbWVvdXQgQHNhdmUsIEB0aW1lb3V0XG4gICAgICAgICAgICAgICAgICAgIFxuICAgIGRlbDogKGtleSkgLT4gQHNldCBrZXlcbiAgICBcbiAgICBjbGVhcjogLT5cbiAgICAgICAgXG4gICAgICAgIEBkYXRhID0ge31cbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICBAdGltZXIgPSBudWxsXG4gICAgICAgIGZzLnJlbW92ZVN5bmMgQGZpbGVcbiAgICAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIGxvYWQ6IC0+XG4gICAgICAgIHRyeVxuICAgICAgICAgICAgbm9vbi5sb2FkIEBmaWxlXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAge31cbiAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwICAgMDAwICAgICAgMCAgICAgIDAwMDAwMDAwXG5cbiAgICBzYXZlOiA9PlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAZmlsZVxuICAgICAgICBcbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICBAdGltZXIgPSBudWxsXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgIyBsb2cgJ3NhdmUgc3Rhc2gnLCBAZmlsZVxuICAgICAgICAgICAgZnMuZW5zdXJlRGlyU3luYyBzbGFzaC5kaXIgQGZpbGVcbiAgICAgICAgICAgIGF0b21pYy5zeW5jIEBmaWxlLCBub29uLnN0cmluZ2lmeSBAZGF0YSwgeyBpbmRlbnQ6IDIsIG1heGFsaWduOiA4IH1cbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBlcnJvciBcInN0YXNoLnNhdmUgLS0gY2FuJ3Qgc2F2ZSB0byAnI3tAZmlsZX0nOiAje2Vycn1cIlxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gU3Rhc2hcbiJdfQ==
//# sourceURL=../coffee/stash.coffee