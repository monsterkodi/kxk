// Generated by CoffeeScript 1.12.7

/*
 0000000  000000000   0000000    0000000  000   000  
000          000     000   000  000       000   000  
0000000      000     000000000  0000000   000000000  
     000     000     000   000       000  000   000  
0000000      000     000   000  0000000   000   000
 */

(function() {
  var Stash, _, atomic, error, fs, log, noon, ref, sds, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('./kxk'), noon = ref.noon, atomic = ref.atomic, slash = ref.slash, fs = ref.fs, sds = ref.sds, log = ref.log, error = ref.error, _ = ref._;

  Stash = (function() {
    function Stash(name, opt) {
      var app, electron, ref1, ref2, ref3, ref4;
      this.name = name;
      this.save = bind(this.save, this);
      if (!this.name) {
        return error('stash.constructor -- no name?');
      }
      electron = require('electron');
      app = (ref1 = electron.app) != null ? ref1 : electron.remote.app;
      this.sep = (ref2 = opt != null ? opt.separator : void 0) != null ? ref2 : ':';
      this.timer = null;
      this.file = (ref3 = opt != null ? opt.file : void 0) != null ? ref3 : (app.getPath('userData')) + "/" + this.name + ".noon";
      this.timeout = (ref4 = opt != null ? opt.timeout : void 0) != null ? ref4 : 4000;
      this.changes = [];
      fs.ensureDirSync(slash.dirname(this.file));
      this.data = this.load();
      if ((opt != null ? opt.defaults : void 0) != null) {
        this.data = _.defaults(this.data, opt.defaults);
      }
    }

    Stash.prototype.keypath = function(key) {
      return key.split(this.sep);
    };

    Stash.prototype.get = function(key, value) {
      if ((key != null ? key.split : void 0) == null) {
        error('stash.get -- invalid key', key);
      }
      if ((key != null ? key.split : void 0) == null) {
        return value;
      }
      return sds.get(this.data, this.keypath(key), value);
    };

    Stash.prototype.set = function(key, value) {
      if ((key != null ? key.split : void 0) == null) {
        return error('stash.set -- invalid key', key);
      }
      sds.set(this.data, this.keypath(key), value);
      if (this.timer) {
        clearTimeout(this.timer);
      }
      return this.timer = setTimeout(this.save, this.timeout);
    };

    Stash.prototype.del = function(key) {
      return this.set(key);
    };

    Stash.prototype.clear = function() {
      this.data = {};
      clearTimeout(this.timer);
      this.timer = null;
      return fs.removeSync(this.file);
    };

    Stash.prototype.load = function() {
      var err;
      try {
        return noon.load(this.file);
      } catch (error1) {
        err = error1;
        return {};
      }
    };

    Stash.prototype.save = function() {
      var err;
      if (!this.file) {
        return;
      }
      clearTimeout(this.timer);
      this.timer = null;
      try {
        return atomic.sync(this.file, noon.stringify(this.data, {
          indent: 2,
          maxalign: 8
        }));
      } catch (error1) {
        err = error1;
        return error("stash.save -- can't save to '" + this.file + "': " + err);
      }
    };

    return Stash;

  })();

  module.exports = Stash;

}).call(this);
