// koffee 1.14.0

/*
000   000  000  000   000  
000 0 000  000  0000  000  
000000000  000  000 0 000  
000   000  000  000  0000  
00     00  000  000   000
 */
var $, Win, _, electron, empty, keyinfo, klog, kpos, open, popup, post, prefs, ref, scheme, slash, stopEvent, title,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), $ = ref.$, _ = ref._, empty = ref.empty, keyinfo = ref.keyinfo, klog = ref.klog, kpos = ref.kpos, open = ref.open, popup = ref.popup, post = ref.post, prefs = ref.prefs, scheme = ref.scheme, slash = ref.slash, stopEvent = ref.stopEvent, title = ref.title;

if (process.type === 'renderer') {
    electron = require('electron');
}

Win = (function() {
    function Win(opt) {
        var base, ref1, sep;
        this.opt = opt;
        this.onKeyUp = bind(this.onKeyUp, this);
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.onMenuAction = bind(this.onMenuAction, this);
        this.onMoved = bind(this.onMoved, this);
        window.onerror = function(msg, source, line, col, error) {
            var err;
            try {
                console.error('window.onerror', msg, source, line, col);
            } catch (error1) {
                err = error1;
                console.log('dafuk?', err);
            }
            return true;
        };
        sep = (ref1 = this.opt.prefsSeperator) != null ? ref1 : 'â–¸';
        prefs.init({
            separator: sep
        });
        if (this.opt.icon) {
            klog.slog.icon = slash.fileUrl(slash.join(this.opt.dir, this.opt.icon));
        }
        this.id = window.winID = electron.ipcRenderer.sendSync('getWinID');
        window.win = this;
        this.modifiers = '';
        this.userData = post.get('userData');
        post.on('menuAction', this.onMenuAction);
        post.on('winMoved', this.onMoved);
        if ((base = this.opt).title != null) {
            base.title;
        } else {
            base.title = process.argv[0].endsWith('Electron Helper') && ['version'] || [];
        }
        window.titlebar = new title(this.opt);
        if (this.opt.context !== false) {
            document.body.addEventListener('contextmenu', this.onContextMenu);
        }
        if (!this.opt.nokeys) {
            document.addEventListener('keydown', this.onKeyDown);
            document.addEventListener('keyup', this.onKeyUp);
        }
        if (this.opt.scheme !== false) {
            scheme.set(prefs.get('scheme', 'dark'));
        }
    }

    Win.prototype.getBounds = function() {
        return electron.ipcRenderer.sendSync('getWinBounds');
    };

    Win.prototype.setBounds = function(b) {
        return electron.ipcRenderer.send('setWinBounds', b);
    };

    Win.prototype.onMoved = function() {};

    Win.prototype.onMenuAction = function(action, args) {
        switch (action) {
            case 'Preferences':
                return open(prefs.store.file);
        }
        electron.ipcRenderer.send('menuAction', action);
        return 'unhandled';
    };

    Win.prototype.onContextMenu = function(event) {
        var absPos, items, ref1;
        if ((ref1 = this.win) != null) {
            ref1.focus();
        }
        absPos = kpos(event);
        if (absPos == null) {
            absPos = kpos($("#main").getBoundingClientRect().left, $("#main").getBoundingClientRect().top);
        }
        items = _.clone(window.titlebar.menuTemplate());
        if (_.isFunction(this.opt.context)) {
            items = this.opt.context(items);
            if (empty(items)) {
                return;
            }
        } else {
            items.unshift({
                text: 'Clear',
                accel: 'cmdctrl+k'
            });
        }
        return popup.menu({
            items: items,
            x: absPos.x,
            y: absPos.y,
            onClose: function() {
                return post.emit('contextClosed');
            }
        });
    };

    Win.prototype.onKeyDown = function(event) {
        var info;
        if ('unhandled' !== window.titlebar.handleKey(event, true)) {
            return stopEvent(event);
        }
        info = keyinfo.forEvent(event);
        this.modifiers = info.mod;
        info.event = event;
        return post.emit('combo', info.combo, info);
    };

    Win.prototype.onKeyUp = function(event) {
        var info;
        info = keyinfo.forEvent(event);
        return this.modifiers = info.mod;
    };

    return Win;

})();

module.exports = Win;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/win.coffee