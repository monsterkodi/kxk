// koffee 1.4.0

/*
000   000  000  000   000  
000 0 000  000  0000  000  
000000000  000  000 0 000  
000   000  000  000  0000  
00     00  000  000   000
 */
var $, Win, _, empty, fs, keyinfo, klog, kpos, open, popup, post, prefs, ref, scheme, slash, stopEvent, title, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), post = ref.post, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, scheme = ref.scheme, prefs = ref.prefs, slash = ref.slash, title = ref.title, valid = ref.valid, empty = ref.empty, popup = ref.popup, klog = ref.klog, open = ref.open, kpos = ref.kpos, fs = ref.fs, $ = ref.$, _ = ref._;

Win = (function() {
    function Win(opt) {
        var base, electron, onLoad, onShow, ref1, sep;
        this.opt = opt;
        this.onKeyUp = bind(this.onKeyUp, this);
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.onMenuAction = bind(this.onMenuAction, this);
        window.onerror = function(msg, source, line, col, err) {
            var srcmap;
            console.error('window.onerror', msg, source, line, col);
            srcmap = require('./srcmap');
            srcmap.logErr(err);
            return true;
        };
        sep = (ref1 = this.opt.prefsSeperator) != null ? ref1 : ':';
        prefs.init({
            separator: sep
        });
        if (this.opt.icon) {
            klog.slog.icon = slash.fileUrl(slash.join(this.opt.dir, this.opt.icon));
        }
        electron = require('electron');
        this.win = window.win = electron.remote.getCurrentWindow();
        this.id = window.winID = this.win.id;
        this.modifiers = '';
        this.userData = slash.userData();
        post.on('menuAction', this.onMenuAction);
        if ((base = this.opt).title != null) {
            base.title;
        } else {
            base.title = process.argv[0].endsWith('Electron Helper') && ['version'] || [];
        }
        window.titlebar = new title(this.opt);
        if (this.opt.context !== false) {
            document.body.addEventListener('contextmenu', this.onContextMenu);
        }
        if (!this.opt.nokeys) {
            document.addEventListener('keydown', this.onKeyDown);
            document.addEventListener('keyup', this.onKeyUp);
        }
        if (this.opt.scheme !== false) {
            scheme.set(prefs.get('scheme', 'dark'));
        }
        if (_.isFunction(this.opt.onShow)) {
            onShow = (function(_this) {
                return function() {
                    _this.opt.onShow();
                    return _this.win.removeListener('ready-to-show', onShow);
                };
            })(this);
            this.win.on('ready-to-show', onShow);
        }
        if (_.isFunction(this.opt.onLoad)) {
            onLoad = (function(_this) {
                return function() {
                    _this.opt.onLoad();
                    return _this.win.webContents.removeListener('did-finish-load', onLoad);
                };
            })(this);
            this.win.webContents.on('did-finish-load', onLoad);
        }
    }

    Win.prototype.screenshot = function() {
        return this.win.webContents.capturePage().then((function(_this) {
            return function(img) {
                var file;
                file = slash.resolve("~/Desktop/" + _this.opt.pkg.name + "-screenshot.png");
                return fs.writeFile(file, img.toPNG(), function(err) {
                    if (valid(err)) {
                        return klog('saving screenshot failed', err);
                    } else {
                        return klog("screenshot saved to " + file);
                    }
                });
            };
        })(this));
    };

    Win.prototype.onMenuAction = function(action, args) {
        switch (action) {
            case 'Screenshot':
                return this.screenshot();
            case 'Preferences':
                return open(prefs.store.file);
            case 'Fullscreen':
                return this.win.setFullScreen(!this.win.isFullScreen());
            case 'About':
                return post.toMain('showAbout');
            case 'Save':
                return post.toMain('saveBuffer');
            case 'Quit':
                return post.toMain('quitApp');
        }
        post.toMain('menuAction', action, args);
        return 'unhandled';
    };

    Win.prototype.onContextMenu = function(event) {
        var absPos, items;
        this.win.focus();
        absPos = kpos(event);
        if (absPos == null) {
            absPos = kpos($("#main").getBoundingClientRect().left, $("#main").getBoundingClientRect().top);
        }
        items = _.clone(window.titlebar.menuTemplate());
        if (_.isFunction(this.opt.context)) {
            items = this.opt.context(items);
            if (empty(items)) {
                return;
            }
        } else {
            items.unshift({
                text: 'Clear',
                accel: 'cmdctrl+k'
            });
        }
        return popup.menu({
            items: items,
            x: absPos.x,
            y: absPos.y,
            onClose: function() {
                return post.emit('contextClosed');
            }
        });
    };

    Win.prototype.onKeyDown = function(event) {
        var info;
        if ('unhandled' !== window.titlebar.handleKey(event, true)) {
            return stopEvent(event);
        }
        info = keyinfo.forEvent(event);
        this.modifiers = info.mod;
        info.event = event;
        return post.emit('combo', info.combo, info);
    };

    Win.prototype.onKeyUp = function(event) {
        var info;
        info = keyinfo.forEvent(event);
        return this.modifiers = info.mod;
    };

    return Win;

})();

module.exports = Win;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/win.coffee