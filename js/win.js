/*
000   000  000  000   000  
000 0 000  000  0000  000  
000000000  000  000 0 000  
000   000  000  000  0000  
00     00  000  000   000  
*/
var $, Win, _, elem, empty, fs, keyinfo, log, popup, pos, post, prefs, scheme, slash, stopEvent, str, title, valid;

({post, keyinfo, title, scheme, stopEvent, prefs, slash, elem, empty, valid, popup, pos, str, fs, log, $, _} = require('./kxk'));

Win = class Win {
  constructor(opt) {
    var electron, onLoad, onShow;
    
    // 00     00  00000000  000   000  000   000   0000000    0000000  000000000  000   0000000   000   000  
    // 000   000  000       0000  000  000   000  000   000  000          000     000  000   000  0000  000  
    // 000000000  0000000   000 0 000  000   000  000000000  000          000     000  000   000  000 0 000  
    // 000 0 000  000       000  0000  000   000  000   000  000          000     000  000   000  000  0000  
    // 000   000  00000000  000   000   0000000   000   000   0000000     000     000   0000000   000   000  
    this.onMenuAction = this.onMenuAction.bind(this);
    //  0000000   0000000   000   000  000000000  00000000  000   000  000000000  
    // 000       000   000  0000  000     000     000        000 000      000     
    // 000       000   000  000 0 000     000     0000000     00000       000     
    // 000       000   000  000  0000     000     000        000 000      000     
    //  0000000   0000000   000   000     000     00000000  000   000     000     
    this.onContextMenu = this.onContextMenu.bind(this);
    
    // 000   000  00000000  000   000
    // 000  000   000        000 000
    // 0000000    0000000     00000
    // 000  000   000          000
    // 000   000  00000000     000
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
    this.opt = opt;
    window.onerror = function(msg, source, line, col, err) {
      var srcmap;
      srcmap = require('./srcmap');
      srcmap.logErr(err);
      return true;
    };
    prefs.init();
    if (this.opt.icon) {
      log.slog.icon = slash.fileUrl(slash.join(this.opt.dir, this.opt.icon));
    }
    electron = require('electron');
    this.win = window.win = electron.remote.getCurrentWindow();
    this.id = window.winID = this.win.id;
    this.modifiers = '';
    this.userData = slash.userData();
    post.on('menuAction', this.onMenuAction);
    window.titlebar = new title(this.opt);
    document.body.addEventListener('contextmenu', this.onContextMenu);
    if (!this.opt.nokeys) {
      document.addEventListener('keydown', this.onKeyDown);
      document.addEventListener('keyup', this.onKeyUp);
    }
    if (this.opt.scheme !== false) {
      scheme.set(prefs.get('scheme', 'dark'));
    }
    if (_.isFunction(this.opt.onShow)) {
      onShow = () => {
        this.opt.onShow();
        return this.win.removeListener('ready-to-show', onShow);
      };
      this.win.on('ready-to-show', onShow);
    }
    if (_.isFunction(this.opt.onLoad)) {
      onLoad = () => {
        this.opt.onLoad();
        return this.win.webContents.removeListener('did-finish-load', onLoad);
      };
      this.win.webContents.on('did-finish-load', onLoad);
    }
  }

  
  // 0000000   0000000  00000000   00000000  00000000  000   000   0000000  000   000   0000000   000000000
  //000       000       000   000  000       000       0000  000  000       000   000  000   000     000
  //0000000   000       0000000    0000000   0000000   000 0 000  0000000   000000000  000   000     000
  //     000  000       000   000  000       000       000  0000       000  000   000  000   000     000
  //0000000    0000000  000   000  00000000  00000000  000   000  0000000   000   000   0000000      000
  screenshot() {
    return this.win.capturePage((img) => {
      var file;
      file = slash.resolve(`~/Desktop/${this.opt.pkg.name}-screenshot.png`);
      return fs.writeFile(file, img.toPNG(), function(err) {
        if (valid(err)) {
          return log('saving screenshot failed', err);
        } else {
          return log(`screenshot saved to ${file}`);
        }
      });
    });
  }

  onMenuAction(action, args) {
    switch (action) {
      case 'Screenshot':
        return this.screenshot();
      case 'About':
        return post.toMain('showAbout');
      case 'Save':
        return post.toMain('saveBuffer');
      case 'Quit':
        return post.toMain('quitApp');
    }
  }

  onContextMenu(event) {
    var absPos, items;
    this.win.focus();
    absPos = pos(event);
    if (absPos == null) {
      absPos = pos($("#main").getBoundingClientRect().left, $("#main").getBoundingClientRect().top);
    }
    items = _.clone(window.titlebar.menuTemplate());
    if (_.isFunction(this.opt.context)) {
      items = this.opt.context(items);
    } else {
      items.unshift({
        text: 'Clear',
        accel: 'cmdctrl+k'
      });
    }
    return popup.menu({
      items: items,
      x: absPos.x,
      y: absPos.y,
      onClose: function() {
        return post.emit('contextClosed');
      }
    });
  }

  onKeyDown(event) {
    var info;
    if ('unhandled' !== window.titlebar.handleKey(event, true)) {
      return stopEvent(event);
    }
    info = keyinfo.forEvent(event);
    this.modifiers = info.mod;
    
    // if info.combo
    info.event = event;
    return post.emit('combo', info.combo, info);
  }

  onKeyUp(event) {
    var info;
    info = keyinfo.forEvent(event);
    return this.modifiers = info.mod;
  }

};

module.exports = Win;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/win.coffee