(function() {
  /*
   0000000   00000000   00000000   
  000   000  000   000  000   000  
  000000000  00000000   00000000   
  000   000  000        000        
  000   000  000        000        
  */
  var App, _, about, args, childp, empty, error, fs, log, post, prefs, slash, valid, watch;

  ({args, prefs, empty, valid, slash, about, post, watch, childp, fs, error, log, _} = require('./kxk'));

  App = class App {
    constructor(opt) {
      var argl, electron;
      this.resolve = this.resolve.bind(this);
      
      //00000000   00000000   0000000   0000000    000   000
      //000   000  000       000   000  000   000   000 000
      //0000000    0000000   000000000  000   000    00000
      //000   000  000       000   000  000   000     000
      //000   000  00000000  000   000  0000000       000
      this.onReady = this.onReady.bind(this);
      // 000000000  00000000    0000000   000   000  
      //    000     000   000  000   000   000 000   
      //    000     0000000    000000000    00000    
      //    000     000   000  000   000     000     
      //    000     000   000  000   000     000     
      this.initTray = this.initTray.bind(this);
      
      //  0000000   0000000     0000000   000   000  000000000  
      // 000   000  000   000  000   000  000   000     000     
      // 000000000  0000000    000   000  000   000     000     
      // 000   000  000   000  000   000  000   000     000     
      // 000   000  0000000     0000000    0000000      000     
      this.showAbout = this.showAbout.bind(this);
      
      //  0000000   000   000  000  000000000  
      // 000   000  000   000  000     000     
      // 000 00 00  000   000  000     000     
      // 000 0000   000   000  000     000     
      //  00000 00   0000000   000     000     
      this.quitApp = this.quitApp.bind(this);
      this.exitApp = this.exitApp.bind(this);
      
      // 0000000     0000000    0000000  000   000  
      // 000   000  000   000  000       000  000   
      // 000   000  000   000  000       0000000    
      // 000   000  000   000  000       000  000   
      // 0000000     0000000    0000000  000   000  
      this.hideDock = this.hideDock.bind(this);
      this.showDock = this.showDock.bind(this);
      
      //000   000  000  000   000  0000000     0000000   000   000
      //000 0 000  000  0000  000  000   000  000   000  000 0 000
      //000000000  000  000 0 000  000   000  000   000  000000000
      //000   000  000  000  0000  000   000  000   000  000   000
      //00     00  000  000   000  0000000     0000000   00     00
      this.toggleWindow = this.toggleWindow.bind(this);
      this.toggleWindowFromTray = this.toggleWindowFromTray.bind(this);
      this.showWindow = this.showWindow.bind(this);
      
      //  0000000  00000000   00000000   0000000   000000000  00000000  
      // 000       000   000  000       000   000     000     000       
      // 000       0000000    0000000   000000000     000     0000000   
      // 000       000   000  000       000   000     000     000       
      //  0000000  000   000  00000000  000   000     000     00000000  
      this.createWindow = this.createWindow.bind(this);
      this.saveBounds = this.saveBounds.bind(this);
      
      // 000   000   0000000   000000000   0000000  000   000  00000000  00000000     
      // 000 0 000  000   000     000     000       000   000  000       000   000    
      // 000000000  000000000     000     000       000000000  0000000   0000000      
      // 000   000  000   000     000     000       000   000  000       000   000    
      // 00     00  000   000     000      0000000  000   000  00000000  000   000    
      this.startWatcher = this.startWatcher.bind(this);
      this.stopWatcher = this.stopWatcher.bind(this);
      this.onSrcChange = this.onSrcChange.bind(this);
      this.opt = opt;
      process.on('uncaughtException', function(err) {
        var ref, stack, stackTrace, sutil;
        error((ref = err.message) != null ? ref : err);
        // try
        sutil = require('stack-utils');
        stack = new sutil({
          cwd: process.cwd(),
          internals: sutil.nodeInternals()
        });
        stackTrace = stack.captureString();
        // console.log 'stackTrace', stackTrace.split('\n').length, stackTrace
        return log(stackTrace);
      });
      
      // catch err
      // error err.message ? err
      this.watcher = null;
      electron = require('electron');
      this.app = electron.app;
      this.userData = this.app.getPath('userData');
      if (this.opt.tray) {
        log.slog.icon = slash.fileUrl(this.resolve(this.opt.tray));
      }
      if (this.opt.single !== false) {
        if (this.app.makeSingleInstance(this.showWindow)) {
          this.app.quit();
          return;
        }
      }
      argl = "noprefs     don't load preferences      false\ndevtools    open developer tools        false  -D\nwatch       watch sources for changes   false";
      if (this.opt.args) {
        argl = this.opt.args + '\n' + argl;
      }
      args = args.init(argl);
      post.on('showAbout', this.showAbout);
      post.on('quitApp', this.quitApp);
      this.app.setName(this.opt.pkg.name);
      this.app.on('ready', this.onReady);
      this.app.on('window-all-closed', function(event) {
        return event.preventDefault();
      });
    }

    resolve(file) {
      return slash.resolve(slash.join(this.opt.dir, file));
    }

    onReady() {
      var electron;
      log('App.onReady');
      if (this.opt.tray) {
        this.initTray();
      }
      this.hideDock();
      this.app.setName(this.opt.pkg.name);
      log('App.onReady init prefs', args);
      if (!args.noprefs) {
        if (this.opt.shortcut) {
          log('App.onReady shortcut', this.opt.shortcut);
          prefs.init({
            shortcut: this.opt.shortcut
          });
        } else {
          log('App.onReady no shortcut');
          prefs.init();
        }
      }
      log('App.onReady setShortcut', prefs.get('shortcut'));
      if (valid(prefs.get('shortcut'))) {
        electron = require('electron');
        electron.globalShortcut.register(prefs.get('shortcut'), this.showWindow);
      }
      log('App.onReady init watch');
      if (args.watch) {
        this.startWatcher();
      }
      log('App.onReady init onShow');
      if (this.opt.onShow) {
        this.opt.onShow();
      } else {
        this.showWindow();
      }
      post.emit('appReady');
      return log('App.onReady done');
    }

    initTray() {
      var electron, trayImg;
      electron = require('electron');
      trayImg = this.resolve(this.opt.tray);
      this.tray = new electron.Tray(trayImg);
      this.tray.on('click', this.toggleWindowFromTray);
      return this.tray.setContextMenu(electron.Menu.buildFromTemplate([
        {
          label: "Quit",
          click: this.quitApp
        },
        {
          label: "About",
          click: this.showAbout
        }
      ]));
    }

    showAbout() {
      var dark;
      dark = 'dark' === prefs.get('scheme', 'dark');
      return about({
        img: this.resolve(this.opt.about),
        color: dark && '#383838' || '#ddd',
        background: dark && '#282828' || '#fff',
        highlight: dark && '#fff' || '#000',
        pkg: this.opt.pkg,
        debug: this.opt.aboutDebug
      });
    }

    quitApp() {
      var base;
      this.stopWatcher();
      this.saveBounds();
      if ('delay' !== (typeof (base = this.opt).onQuit === "function" ? base.onQuit() : void 0)) {
        return this.exitApp();
      }
    }

    exitApp() {
      this.app.exit(0);
      return process.exit(0);
    }

    hideDock() {
      var ref;
      return (ref = this.app.dock) != null ? ref.hide() : void 0;
    }

    showDock() {
      var ref;
      return (ref = this.app.dock) != null ? ref.show() : void 0;
    }

    toggleWindow() {
      var ref;
      if ((ref = this.win) != null ? ref.isVisible() : void 0) {
        this.win.hide();
        return this.hideDock();
      } else {
        return this.showWindow();
      }
    }

    toggleWindowFromTray() {
      return this.showWindow();
    }

    showWindow() {
      if (this.win != null) {
        this.win.show();
      } else {
        this.createWindow();
      }
      return this.showDock();
    }

    createWindow(onReadyToShow) {
      var bounds, electron, height, ref, ref1, ref2, ref3, ref4, ref5, width;
      log('App.createWindow');
      electron = require('electron');
      bounds = prefs.get('bounds');
      width = (ref = (ref1 = bounds != null ? bounds.width : void 0) != null ? ref1 : this.opt.width) != null ? ref : 500;
      height = (ref2 = (ref3 = bounds != null ? bounds.height : void 0) != null ? ref3 : this.opt.height) != null ? ref2 : 500;
      this.win = new electron.BrowserWindow({
        width: width,
        height: height,
        minWidth: (ref4 = this.opt.minWidth) != null ? ref4 : 250,
        minHeight: (ref5 = this.opt.minHeight) != null ? ref5 : 250,
        backgroundColor: '#181818',
        fullscreen: false,
        show: false,
        frame: false,
        resizable: true,
        maximizable: true,
        minimizable: true,
        transparent: true,
        autoHideMenuBar: true,
        icon: this.resolve(this.opt.icon)
      });
      if (bounds != null) {
        this.win.setPosition(bounds.x, bounds.y);
      }
      this.win.loadURL(slash.fileUrl(this.resolve(this.opt.index)));
      if (args.devtools) {
        this.win.webContents.openDevTools();
      }
      this.win.on('resize', this.saveBounds);
      this.win.on('move', this.saveBounds);
      this.win.on('closed', () => {
        return this.win = null;
      });
      this.win.on('close', () => {
        return this.hideDock();
      });
      this.win.on('ready-to-show', (event) => {
        var win;
        win = event.sender;
        if (typeof onReadyToShow === "function") {
          onReadyToShow(win);
        }
        win.show();
        return post.emit('winReady', win.id);
      });
      this.showDock();
      log('App.createWindow done');
      return this.win;
    }

    saveBounds() {
      if (this.win != null) {
        return prefs.set('bounds', this.win.getBounds());
      }
    }

    screenSize() {
      var electron;
      electron = require('electron');
      return electron.screen.getPrimaryDisplay().workAreaSize;
    }

    startWatcher() {
      this.watcher = watch.watch(this.opt.dir);
      this.watcher.on('change', this.onSrcChange);
      return this.watcher.on('error', function(err) {
        return error(err);
      });
    }

    stopWatcher() {
      if (this.watcher != null) {
        this.watcher.close();
        return this.watcher = null;
      }
    }

    onSrcChange(path) {
      log('onSrcChange', path, this.opt.dir, path.startsWith(this.opt.dir));
      if (slash.file(path) === 'main') {
        this.stopWatcher();
        this.app.exit(0);
        childp.execSync(`${this.opt.dir}/../node_modules/.bin/electron . -w`, {
          cwd: `${this.opt.dir}/..`,
          encoding: 'utf8',
          stdio: 'inherit',
          shell: true
        });
        return process.exit(0);
      } else {
        return post.toWins('menuAction', 'Reload');
      }
    }

  };

  module.exports = App;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/app.coffee