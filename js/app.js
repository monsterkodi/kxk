
/*
 0000000   00000000   00000000   
000   000  000   000  000   000  
000000000  00000000   00000000   
000   000  000        000        
000   000  000        000
 */
var App, _, about, args, childp, empty, error, fs, log, os, post, prefs, ref, slash, valid, watch,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), args = ref.args, prefs = ref.prefs, watch = ref.watch, empty = ref.empty, valid = ref.valid, slash = ref.slash, about = ref.about, post = ref.post, childp = ref.childp, os = ref.os, fs = ref.fs, error = ref.error, log = ref.log, _ = ref._;

App = (function() {
  function App(opt) {
    var argl, cb, electron, ref1;
    this.opt = opt;
    this.onSrcChange = bind(this.onSrcChange, this);
    this.stopWatcher = bind(this.stopWatcher, this);
    this.startWatcher = bind(this.startWatcher, this);
    this.saveBounds = bind(this.saveBounds, this);
    this.createWindow = bind(this.createWindow, this);
    this.showWindow = bind(this.showWindow, this);
    this.toggleWindowFromTray = bind(this.toggleWindowFromTray, this);
    this.toggleWindow = bind(this.toggleWindow, this);
    this.showDock = bind(this.showDock, this);
    this.hideDock = bind(this.hideDock, this);
    this.exitApp = bind(this.exitApp, this);
    this.quitApp = bind(this.quitApp, this);
    this.showAbout = bind(this.showAbout, this);
    this.initTray = bind(this.initTray, this);
    this.onReady = bind(this.onReady, this);
    this.resolve = bind(this.resolve, this);
    process.on('uncaughtException', function(err) {
      var srcmap;
      srcmap = require('./srcmap');
      srcmap.logErr(err, 'ðŸ”»');
      return true;
    });
    this.watchers = [];
    electron = require('electron');
    this.app = electron.app;
    this.userData = slash.userData();
    if (this.opt.tray) {
      log.slog.icon = slash.fileUrl(this.resolve(this.opt.tray));
    }
    argl = "noprefs     don't load preferences      false\ndevtools    open developer tools        false  -D\nwatch       watch sources for changes   false";
    if (this.opt.args) {
      argl = this.opt.args + '\n' + argl;
    }
    args = args.init(argl);
    if (this.opt.single !== false) {
      if ((this.app.makeSingleInstance != null) && this.app.makeSingleInstance((ref1 = this.opt.onOtherInstance) != null ? ref1 : this.showWindow)) {
        log('app.quit single');
        this.app.quit();
        return;
      } else if (this.app.requestSingleInstanceLock != null) {
        if (this.app.requestSingleInstanceLock()) {
          if (this.opt.onOtherInstance) {
            cb = (function(_this) {
              return function(event, args, dir) {
                return _this.opt.onOtherInstance(args, dir);
              };
            })(this);
          } else {
            cb = this.showWindow;
          }
          this.app.on('second-instance', cb);
        } else {
          this.app.quit();
          return;
        }
      }
    }
    post.on('showAbout', this.showAbout);
    post.on('quitApp', this.quitApp);
    this.app.setName(this.opt.pkg.name);
    this.app.on('ready', this.onReady);
    this.app.on('window-all-closed', (function(_this) {
      return function(event) {
        if (!_this.opt.singleWindow) {
          return event.preventDefault();
        } else {
          return _this.quitApp();
        }
      };
    })(this));
  }

  App.prototype.resolve = function(file) {
    return slash.resolve(slash.join(this.opt.dir, file));
  };

  App.prototype.onReady = function() {
    var electron;
    if (this.opt.tray) {
      this.initTray();
    }
    this.hideDock();
    this.app.setName(this.opt.pkg.name);
    if (!args.noprefs) {
      if (this.opt.shortcut) {
        prefs.init({
          shortcut: this.opt.shortcut
        });
      } else {
        prefs.init();
      }
    }
    if (valid(prefs.get('shortcut'))) {
      electron = require('electron');
      electron.globalShortcut.register(prefs.get('shortcut'), this.showWindow);
    }
    if (args.watch) {
      log('App.onReady startWatcher');
      this.startWatcher();
    }
    if (this.opt.onShow) {
      this.opt.onShow();
    } else {
      this.showWindow();
    }
    return post.emit('appReady');
  };

  App.prototype.initTray = function() {
    var electron, template, trayImg;
    electron = require('electron');
    trayImg = this.resolve(this.opt.tray);
    this.tray = new electron.Tray(trayImg);
    this.tray.on('click', this.toggleWindowFromTray);
    if (os.platform() !== 'darwin') {
      template = [
        {
          label: "Quit",
          click: this.quitApp
        }, {
          label: "About",
          click: this.showAbout
        }, {
          label: "Activate",
          click: this.toggleWindowFromTray
        }
      ];
      return this.tray.setContextMenu(electron.Menu.buildFromTemplate(template));
    }
  };

  App.prototype.showAbout = function() {
    var dark;
    dark = 'dark' === prefs.get('scheme', 'dark');
    return about({
      img: this.resolve(this.opt.about),
      color: dark && '#383838' || '#ddd',
      background: dark && '#282828' || '#fff',
      highlight: dark && '#fff' || '#000',
      pkg: this.opt.pkg,
      debug: this.opt.aboutDebug
    });
  };

  App.prototype.quitApp = function() {
    var base;
    this.stopWatcher();
    this.saveBounds();
    prefs.save();
    if ('delay' !== (typeof (base = this.opt).onQuit === "function" ? base.onQuit() : void 0)) {
      return this.exitApp();
    }
  };

  App.prototype.exitApp = function() {
    this.app.exit(0);
    return process.exit(0);
  };

  App.prototype.hideDock = function() {
    var ref1;
    return (ref1 = this.app.dock) != null ? ref1.hide() : void 0;
  };

  App.prototype.showDock = function() {
    var ref1;
    return (ref1 = this.app.dock) != null ? ref1.show() : void 0;
  };

  App.prototype.toggleWindow = function() {
    var ref1;
    if ((ref1 = this.win) != null ? ref1.isVisible() : void 0) {
      this.win.hide();
      return this.hideDock();
    } else {
      return this.showWindow();
    }
  };

  App.prototype.toggleWindowFromTray = function() {
    return this.showWindow();
  };

  App.prototype.showWindow = function() {
    var base;
    if (typeof (base = this.opt).onWillShowWin === "function") {
      base.onWillShowWin();
    }
    if (this.win != null) {
      this.win.show();
    } else {
      this.createWindow();
    }
    return this.showDock();
  };

  App.prototype.createWindow = function(onReadyToShow) {
    var bounds, electron, height, ref1, ref2, ref3, ref4, ref5, ref6, width;
    electron = require('electron');
    bounds = prefs.get('bounds');
    width = (ref1 = (ref2 = bounds != null ? bounds.width : void 0) != null ? ref2 : this.opt.width) != null ? ref1 : 500;
    height = (ref3 = (ref4 = bounds != null ? bounds.height : void 0) != null ? ref4 : this.opt.height) != null ? ref3 : 500;
    this.win = new electron.BrowserWindow({
      width: width,
      height: height,
      minWidth: (ref5 = this.opt.minWidth) != null ? ref5 : 250,
      minHeight: (ref6 = this.opt.minHeight) != null ? ref6 : 250,
      backgroundColor: '#181818',
      fullscreenenable: true,
      fullscreen: false,
      show: false,
      frame: false,
      resizable: true,
      maximizable: true,
      minimizable: true,
      transparent: true,
      autoHideMenuBar: true,
      icon: this.resolve(this.opt.icon),
      webPreferences: {
        nodeIntegration: true
      }
    });
    if (bounds != null) {
      this.win.setPosition(bounds.x, bounds.y);
    }
    this.win.loadURL(slash.fileUrl(this.resolve(this.opt.index)));
    if (args.devtools) {
      this.win.webContents.openDevTools();
    }
    this.win.on('resize', this.saveBounds);
    this.win.on('move', this.saveBounds);
    this.win.on('closed', (function(_this) {
      return function() {
        return _this.win = null;
      };
    })(this));
    this.win.on('close', (function(_this) {
      return function() {
        return _this.hideDock();
      };
    })(this));
    this.win.on('ready-to-show', (function(_this) {
      return function(event) {
        var win;
        win = event.sender;
        if (typeof onReadyToShow === "function") {
          onReadyToShow(win);
        }
        win.show();
        return post.emit('winReady', win.id);
      };
    })(this));
    this.showDock();
    return this.win;
  };

  App.prototype.saveBounds = function() {
    if (this.win != null) {
      return prefs.set('bounds', this.win.getBounds());
    }
  };

  App.prototype.screenSize = function() {
    var electron;
    electron = require('electron');
    return electron.screen.getPrimaryDisplay().workAreaSize;
  };

  App.prototype.startWatcher = function() {
    var dir, i, len, ref1, results, watcher;
    this.opt.dir = slash.resolve(this.opt.dir);
    console.log('startWatcher', this.opt.dir);
    watcher = watch.dir(this.opt.dir);
    watcher.on('change', this.onSrcChange);
    watcher.on('error', function(err) {
      return error(err);
    });
    this.watchers.push(watcher);
    if (empty(this.opt.dirs)) {
      return;
    }
    console.log('startWatchers', this.opt.dirs);
    ref1 = this.opt.dirs;
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      dir = ref1[i];
      watcher = watch.dir(slash.resolve(slash.join(this.opt.dir, dir)));
      watcher.on('change', this.onSrcChange);
      watcher.on('error', function(err) {
        return error(err);
      });
      results.push(this.watchers.push(watcher));
    }
    return results;
  };

  App.prototype.stopWatcher = function() {
    var i, len, ref1, watcher;
    if (empty(this.watchers)) {
      return;
    }
    ref1 = this.watchers;
    for (i = 0, len = ref1.length; i < len; i++) {
      watcher = ref1[i];
      watcher.close();
    }
    return this.watchers = [];
  };

  App.prototype.onSrcChange = function(info) {
    var pkg;
    log("onSrcChange '" + info.change + "'", info.path);
    if (slash.base(info.path) === 'main') {
      this.stopWatcher();
      this.app.exit(0);
      if (pkg = slash.pkg(this.opt.dir)) {
        if (slash.isDir(slash.join(pkg, 'node_modules'))) {
          childp.execSync(pkg + "/node_modules/.bin/electron . -w", {
            cwd: pkg,
            encoding: 'utf8',
            stdio: 'inherit',
            shell: true
          });
          process.exit(0);
          return;
        }
      }
    }
    return post.toWins('menuAction', 'Reload');
  };

  return App;

})();

module.exports = App;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/app.coffee