// Generated by CoffeeScript 1.12.7

/*
 0000000   00000000   00000000   
000   000  000   000  000   000  
000000000  00000000   00000000   
000   000  000        000        
000   000  000        000
 */

(function() {
  var App, _, about, args, childp, empty, error, fs, log, post, prefs, ref, slash, watch,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('./kxk'), args = ref.args, prefs = ref.prefs, empty = ref.empty, slash = ref.slash, about = ref.about, post = ref.post, watch = ref.watch, childp = ref.childp, fs = ref.fs, log = ref.log, error = ref.error, _ = ref._;

  App = (function() {
    function App(opt) {
      var argl, electron;
      this.opt = opt;
      this.onSrcChange = bind(this.onSrcChange, this);
      this.stopWatcher = bind(this.stopWatcher, this);
      this.startWatcher = bind(this.startWatcher, this);
      this.saveBounds = bind(this.saveBounds, this);
      this.createWindow = bind(this.createWindow, this);
      this.showWindow = bind(this.showWindow, this);
      this.toggleWindow = bind(this.toggleWindow, this);
      this.showDock = bind(this.showDock, this);
      this.hideDock = bind(this.hideDock, this);
      this.quitApp = bind(this.quitApp, this);
      this.showAbout = bind(this.showAbout, this);
      this.initTray = bind(this.initTray, this);
      this.onReady = bind(this.onReady, this);
      this.resolve = bind(this.resolve, this);
      this.watcher = null;
      electron = require('electron');
      this.app = electron.app;
      if (this.opt.single !== false) {
        if (this.app.makeSingleInstance(this.showWindow)) {
          this.app.quit();
          return;
        }
      }
      argl = "noprefs     don't load preferences      false\nDevTools    open developer tools        false\nwatch       watch sources for changes   false\nverbose     |                           false\ndebug       |                           false";
      if (this.opt.args) {
        argl = this.opt.args + '\n' + argl;
      }
      args = args.init(argl);
      post.on('showAbout', this.showAbout);
      post.on('quitApp', this.quitApp);
      this.app.setName(this.opt.pkg.name);
      this.app.on('ready', this.onReady);
      this.app.on('window-all-closed', function(event) {
        return event.preventDefault();
      });
    }

    App.prototype.resolve = function(file) {
      return slash.resolve(slash.join(this.opt.dir, file));
    };

    App.prototype.onReady = function() {
      var electron;
      if (this.opt.tray) {
        this.initTray();
      }
      this.hideDock();
      this.app.setName(this.opt.pkg.name);
      if (!args.noprefs) {
        prefs.init({
          shortcut: this.opt.shortcut
        });
      }
      if (!empty(prefs.get('shortcut'))) {
        electron = require('electron');
        electron.globalShortcut.register(prefs.get('shortcut'), this.showWindow);
      }
      this.showWindow();
      if (args.watch) {
        return this.startWatcher();
      }
    };

    App.prototype.initTray = function() {
      var electron;
      electron = require('electron');
      this.tray = new electron.Tray(this.resolve(this.opt.tray));
      this.tray.on('click', this.toggleWindow);
      return this.tray.setContextMenu(electron.Menu.buildFromTemplate([
        {
          label: "Quit",
          click: this.quitApp
        }, {
          label: "About",
          click: this.showAbout
        }
      ]));
    };

    App.prototype.showAbout = function() {
      var dark;
      dark = 'dark' === prefs.get('scheme', 'dark');
      return about({
        img: this.resolve(this.opt.about),
        color: dark && '#383838' || '#ddd',
        background: dark && '#282828' || '#fff',
        highlight: dark && '#fff' || '#000',
        pkg: this.opt.pkg,
        debug: this.opt.aboutDebug
      });
    };

    App.prototype.quitApp = function() {
      this.stopWatcher();
      this.saveBounds();
      this.app.exit(0);
      return process.exit(0);
    };

    App.prototype.hideDock = function() {
      var ref1;
      return (ref1 = this.app.dock) != null ? ref1.hide() : void 0;
    };

    App.prototype.showDock = function() {
      var ref1;
      return (ref1 = this.app.dock) != null ? ref1.show() : void 0;
    };

    App.prototype.toggleWindow = function() {
      var ref1;
      if ((ref1 = this.win) != null ? ref1.isVisible() : void 0) {
        this.win.hide();
        return this.hideDock();
      } else {
        return this.showWindow();
      }
    };

    App.prototype.showWindow = function() {
      if (this.win != null) {
        this.win.show();
      } else {
        this.createWindow();
      }
      return this.showDock();
    };

    App.prototype.createWindow = function() {
      var bounds, electron, height, ref1, ref2, ref3, ref4, ref5, ref6, width;
      electron = require('electron');
      bounds = prefs.get('bounds');
      width = (ref1 = (ref2 = bounds != null ? bounds.width : void 0) != null ? ref2 : this.opt.width) != null ? ref1 : 500;
      height = (ref3 = (ref4 = bounds != null ? bounds.height : void 0) != null ? ref4 : this.opt.height) != null ? ref3 : 500;
      log('createWindow', width, height);
      this.win = new electron.BrowserWindow({
        width: width,
        height: height,
        minWidth: (ref5 = this.opt.minWidth) != null ? ref5 : 250,
        minHeight: (ref6 = this.opt.minHeight) != null ? ref6 : 250,
        backgroundColor: '#181818',
        fullscreen: false,
        show: false,
        frame: false,
        resizable: true,
        maximizable: true,
        minimizable: true,
        transparent: true,
        autoHideMenuBar: true,
        icon: this.resolve(this.opt.icon)
      });
      if (bounds != null) {
        this.win.setPosition(bounds.x, bounds.y);
      }
      this.win.loadURL(slash.fileUrl(this.resolve(this.opt.index)));
      if (args.DevTools) {
        this.win.webContents.openDevTools();
      }
      this.win.on('resize', this.saveBounds);
      this.win.on('move', this.saveBounds);
      this.win.on('closed', (function(_this) {
        return function() {
          return _this.win = null;
        };
      })(this));
      this.win.on('close', (function(_this) {
        return function() {
          return _this.hideDock();
        };
      })(this));
      this.win.on('ready-to-show', (function(_this) {
        return function() {
          return _this.win.show();
        };
      })(this));
      this.showDock();
      return this.win;
    };

    App.prototype.saveBounds = function() {
      if (this.win != null) {
        return prefs.set('bounds', this.win.getBounds());
      }
    };

    App.prototype.startWatcher = function() {
      this.watcher = watch.watch(this.opt.dir);
      this.watcher.on('change', this.onSrcChange);
      return this.watcher.on('error', function(err) {
        return error(err);
      });
    };

    App.prototype.stopWatcher = function() {
      if (this.watcher != null) {
        this.watcher.close();
        return this.watcher = null;
      }
    };

    App.prototype.onSrcChange = function(path) {
      log('onSrcChange', path, this.opt.dir, path.startsWith(this.opt.dir));
      if (slash.file(path) === 'main') {
        this.stopWatcher();
        this.app.exit(0);
        childp.execSync(this.opt.dir + "/../node_modules/.bin/electron . -w", {
          cwd: this.opt.dir + "/..",
          encoding: 'utf8',
          stdio: 'inherit',
          shell: true
        });
        return process.exit(0);
      } else {
        return post.toWins('menuAction', 'Reload');
      }
    };

    return App;

  })();

  module.exports = App;

}).call(this);
