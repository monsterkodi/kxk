
/*
 0000000   00000000   00000000   
000   000  000   000  000   000  
000000000  00000000   00000000   
000   000  000        000        
000   000  000        000
 */
var App, _, about, args, childp, empty, error, fs, log, os, post, prefs, ref, slash, valid, watch,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), args = ref.args, prefs = ref.prefs, watch = ref.watch, empty = ref.empty, valid = ref.valid, slash = ref.slash, about = ref.about, post = ref.post, childp = ref.childp, os = ref.os, fs = ref.fs, error = ref.error, log = ref.log, _ = ref._;

App = (function() {
  function App(opt) {
    var argl, electron, ref1, ref2;
    this.opt = opt;
    this.onSrcChange = bind(this.onSrcChange, this);
    this.stopWatcher = bind(this.stopWatcher, this);
    this.startWatcher = bind(this.startWatcher, this);
    this.saveBounds = bind(this.saveBounds, this);
    this.createWindow = bind(this.createWindow, this);
    this.showWindow = bind(this.showWindow, this);
    this.toggleWindowFromTray = bind(this.toggleWindowFromTray, this);
    this.toggleWindow = bind(this.toggleWindow, this);
    this.showDock = bind(this.showDock, this);
    this.hideDock = bind(this.hideDock, this);
    this.exitApp = bind(this.exitApp, this);
    this.quitApp = bind(this.quitApp, this);
    this.showAbout = bind(this.showAbout, this);
    this.initTray = bind(this.initTray, this);
    this.onReady = bind(this.onReady, this);
    this.resolve = bind(this.resolve, this);
    process.on('uncaughtException', function(err) {
      var srcmap;
      srcmap = require('./srcmap');
      srcmap.logErr(err, 'ðŸ”»');
      return true;
    });
    this.watchers = [];
    electron = require('electron');
    this.app = electron.app;
    this.userData = slash.userData();
    if (this.opt.tray) {
      log.slog.icon = slash.fileUrl(this.resolve(this.opt.tray));
    }
    argl = "noprefs     don't load preferences      false\ndevtools    open developer tools        false  -D\nwatch       watch sources for changes   false";
    if (this.opt.args) {
      argl = this.opt.args + '\n' + argl;
    }
    args = args.init(argl);
    if (this.opt.single !== false) {
      if ((this.app.makeSingleInstance != null) && this.app.makeSingleInstance((ref1 = this.opt.onOtherInstance) != null ? ref1 : this.showWindow)) {
        log('app.quit single');
        this.app.quit();
        return;
      } else if (this.app.requestSingleInstanceLock != null) {
        if (this.app.requestSingleInstanceLock()) {
          this.app.on('second-instance', (ref2 = this.opt.onOtherInstance) != null ? ref2 : this.showWindow);
        } else {
          this.app.quit();
          return;
        }
      }
    }
    post.on('showAbout', this.showAbout);
    post.on('quitApp', this.quitApp);
    this.app.setName(this.opt.pkg.name);
    this.app.on('ready', this.onReady);
    this.app.on('window-all-closed', (function(_this) {
      return function(event) {
        if (!_this.opt.singleWindow) {
          return event.preventDefault();
        } else {
          return _this.quitApp();
        }
      };
    })(this));
  }

  App.prototype.resolve = function(file) {
    return slash.resolve(slash.join(this.opt.dir, file));
  };

  App.prototype.onReady = function() {
    var electron;
    if (this.opt.tray) {
      this.initTray();
    }
    this.hideDock();
    this.app.setName(this.opt.pkg.name);
    if (!args.noprefs) {
      if (this.opt.shortcut) {
        prefs.init({
          shortcut: this.opt.shortcut
        });
      } else {
        prefs.init();
      }
    }
    if (valid(prefs.get('shortcut'))) {
      electron = require('electron');
      electron.globalShortcut.register(prefs.get('shortcut'), this.showWindow);
    }
    if (args.watch) {
      log('App.onReady startWatcher');
      this.startWatcher();
    }
    if (this.opt.onShow) {
      this.opt.onShow();
    } else {
      this.showWindow();
    }
    return post.emit('appReady');
  };

  App.prototype.initTray = function() {
    var electron, template, trayImg;
    electron = require('electron');
    trayImg = this.resolve(this.opt.tray);
    this.tray = new electron.Tray(trayImg);
    this.tray.on('click', this.toggleWindowFromTray);
    if (os.platform() !== 'darwin') {
      template = [
        {
          label: "Quit",
          click: this.quitApp
        }, {
          label: "About",
          click: this.showAbout
        }, {
          label: "Activate",
          click: this.toggleWindowFromTray
        }
      ];
      return this.tray.setContextMenu(electron.Menu.buildFromTemplate(template));
    }
  };

  App.prototype.showAbout = function() {
    var dark;
    dark = 'dark' === prefs.get('scheme', 'dark');
    return about({
      img: this.resolve(this.opt.about),
      color: dark && '#383838' || '#ddd',
      background: dark && '#282828' || '#fff',
      highlight: dark && '#fff' || '#000',
      pkg: this.opt.pkg,
      debug: this.opt.aboutDebug
    });
  };

  App.prototype.quitApp = function() {
    var base;
    this.stopWatcher();
    this.saveBounds();
    prefs.save();
    if ('delay' !== (typeof (base = this.opt).onQuit === "function" ? base.onQuit() : void 0)) {
      return this.exitApp();
    }
  };

  App.prototype.exitApp = function() {
    this.app.exit(0);
    return process.exit(0);
  };

  App.prototype.hideDock = function() {
    var ref1;
    return (ref1 = this.app.dock) != null ? ref1.hide() : void 0;
  };

  App.prototype.showDock = function() {
    var ref1;
    return (ref1 = this.app.dock) != null ? ref1.show() : void 0;
  };

  App.prototype.toggleWindow = function() {
    var ref1;
    if ((ref1 = this.win) != null ? ref1.isVisible() : void 0) {
      this.win.hide();
      return this.hideDock();
    } else {
      return this.showWindow();
    }
  };

  App.prototype.toggleWindowFromTray = function() {
    return this.showWindow();
  };

  App.prototype.showWindow = function() {
    var base;
    if (typeof (base = this.opt).onWillShowWin === "function") {
      base.onWillShowWin();
    }
    if (this.win != null) {
      this.win.show();
    } else {
      this.createWindow();
    }
    return this.showDock();
  };

  App.prototype.createWindow = function(onReadyToShow) {
    var bounds, electron, height, ref1, ref2, ref3, ref4, ref5, ref6, width;
    electron = require('electron');
    bounds = prefs.get('bounds');
    width = (ref1 = (ref2 = bounds != null ? bounds.width : void 0) != null ? ref2 : this.opt.width) != null ? ref1 : 500;
    height = (ref3 = (ref4 = bounds != null ? bounds.height : void 0) != null ? ref4 : this.opt.height) != null ? ref3 : 500;
    this.win = new electron.BrowserWindow({
      width: width,
      height: height,
      minWidth: (ref5 = this.opt.minWidth) != null ? ref5 : 250,
      minHeight: (ref6 = this.opt.minHeight) != null ? ref6 : 250,
      backgroundColor: '#181818',
      fullscreenenable: true,
      fullscreen: false,
      show: false,
      frame: false,
      resizable: true,
      maximizable: true,
      minimizable: true,
      transparent: true,
      autoHideMenuBar: true,
      icon: this.resolve(this.opt.icon),
      webPreferences: {
        nodeIntegration: true
      }
    });
    if (bounds != null) {
      this.win.setPosition(bounds.x, bounds.y);
    }
    this.win.loadURL(slash.fileUrl(this.resolve(this.opt.index)));
    if (args.devtools) {
      this.win.webContents.openDevTools();
    }
    this.win.on('resize', this.saveBounds);
    this.win.on('move', this.saveBounds);
    this.win.on('closed', (function(_this) {
      return function() {
        return _this.win = null;
      };
    })(this));
    this.win.on('close', (function(_this) {
      return function() {
        return _this.hideDock();
      };
    })(this));
    this.win.on('ready-to-show', (function(_this) {
      return function(event) {
        var win;
        win = event.sender;
        if (typeof onReadyToShow === "function") {
          onReadyToShow(win);
        }
        win.show();
        return post.emit('winReady', win.id);
      };
    })(this));
    this.showDock();
    return this.win;
  };

  App.prototype.saveBounds = function() {
    if (this.win != null) {
      return prefs.set('bounds', this.win.getBounds());
    }
  };

  App.prototype.screenSize = function() {
    var electron;
    electron = require('electron');
    return electron.screen.getPrimaryDisplay().workAreaSize;
  };

  App.prototype.startWatcher = function() {
    var dir, i, len, ref1, results, watcher;
    this.opt.dir = slash.resolve(this.opt.dir);
    console.log('startWatcher', this.opt.dir);
    watcher = watch.dir(this.opt.dir);
    watcher.on('change', this.onSrcChange);
    watcher.on('error', function(err) {
      return error(err);
    });
    this.watchers.push(watcher);
    if (empty(this.opt.dirs)) {
      return;
    }
    console.log('startWatchers', this.opt.dirs);
    ref1 = this.opt.dirs;
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      dir = ref1[i];
      watcher = watch.dir(slash.resolve(slash.join(this.opt.dir, dir)));
      watcher.on('change', this.onSrcChange);
      watcher.on('error', function(err) {
        return error(err);
      });
      results.push(this.watchers.push(watcher));
    }
    return results;
  };

  App.prototype.stopWatcher = function() {
    var i, len, ref1, watcher;
    if (empty(this.watchers)) {
      return;
    }
    ref1 = this.watchers;
    for (i = 0, len = ref1.length; i < len; i++) {
      watcher = ref1[i];
      watcher.close();
    }
    return this.watchers = [];
  };

  App.prototype.onSrcChange = function(info) {
    var pkg;
    log("onSrcChange '" + info.change + "'", info.path);
    if (slash.base(info.path) === 'main') {
      this.stopWatcher();
      this.app.exit(0);
      if (pkg = slash.pkg(this.opt.dir)) {
        if (slash.isDir(slash.join(pkg, 'node_modules'))) {
          childp.execSync(pkg + "/node_modules/.bin/electron . -w", {
            cwd: pkg,
            encoding: 'utf8',
            stdio: 'inherit',
            shell: true
          });
          process.exit(0);
          return;
        }
      }
    }
    return post.toWins('menuAction', 'Reload');
  };

  return App;

})();

module.exports = App;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLDZGQUFBO0VBQUE7O0FBUUEsTUFBMEYsT0FBQSxDQUFRLE9BQVIsQ0FBMUYsRUFBRSxlQUFGLEVBQVEsaUJBQVIsRUFBZSxpQkFBZixFQUFzQixpQkFBdEIsRUFBNkIsaUJBQTdCLEVBQW9DLGlCQUFwQyxFQUEyQyxpQkFBM0MsRUFBa0QsZUFBbEQsRUFBd0QsbUJBQXhELEVBQWdFLFdBQWhFLEVBQW9FLFdBQXBFLEVBQXdFLGlCQUF4RSxFQUErRSxhQUEvRSxFQUFvRjs7QUFFOUU7RUFFVyxhQUFDLEdBQUQ7QUFFVCxRQUFBO0lBRlUsSUFBQyxDQUFBLE1BQUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRVYsT0FBTyxDQUFDLEVBQVIsQ0FBVyxtQkFBWCxFQUFnQyxTQUFDLEdBQUQ7QUFDNUIsVUFBQTtNQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjtNQUNULE1BQU0sQ0FBQyxNQUFQLENBQWMsR0FBZCxFQUFtQixJQUFuQjthQUNBO0lBSDRCLENBQWhDO0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUVaLFFBQUEsR0FBVyxPQUFBLENBQVEsVUFBUjtJQUNYLElBQUMsQ0FBQSxHQUFELEdBQU8sUUFBUSxDQUFDO0lBQ2hCLElBQUMsQ0FBQSxRQUFELEdBQVksS0FBSyxDQUFDLFFBQU4sQ0FBQTtJQUVaLElBQUcsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFSO01BQ0ksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFULEdBQWdCLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBQyxDQUFBLE9BQUQsQ0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLElBQWQsQ0FBZCxFQURwQjs7SUFHQSxJQUFBLEdBQU87SUFNUCxJQUFrQyxJQUFDLENBQUEsR0FBRyxDQUFDLElBQXZDO01BQUEsSUFBQSxHQUFPLElBQUMsQ0FBQSxHQUFHLENBQUMs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QUVULFFBQUE7SUFBQSxJQUFVLEtBQUEsQ0FBTSxJQUFDLENBQUEsUUFBUCxDQUFWO0FBQUEsYUFBQTs7QUFDQTtBQUFBLFNBQUEsc0NBQUE7O01BQ0ksT0FBTyxDQUFDLEtBQVIsQ0FBQTtBQURKO1dBRUEsSUFBQyxDQUFBLFFBQUQsR0FBWTtFQUxIOztnQkFPYixXQUFBLEdBQWEsU0FBQyxJQUFEO0FBRVQsUUFBQTtJQUFBLEdBQUEsQ0FBSSxlQUFBLEdBQWdCLElBQUksQ0FBQyxNQUFyQixHQUE0QixHQUFoQyxFQUFvQyxJQUFJLENBQUMsSUFBekM7SUFDQSxJQUFHLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxDQUFDLElBQWhCLENBQUEsS0FBeUIsTUFBNUI7TUFDSSxJQUFDLENBQUEsV0FBRCxDQUFBO01BQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsQ0FBVjtNQUNBLElBQUcsR0FBQSxHQUFNLEtBQUssQ0FBQyxHQUFOLENBQVUsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFmLENBQVQ7UUFDSSxJQUFHLEtBQUssQ0FBQyxLQUFOLENBQVksS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYLEVBQWdCLGNBQWhCLENBQVosQ0FBSDtVQUNJLE1BQU0sQ0FBQyxRQUFQLENBQW1CLEdBQUQsR0FBSyxrQ0FBdkIsRUFDSTtZQUFBLEdBQUEsRUFBVSxHQUFWO1lBQ0EsUUFBQSxFQUFVLE1BRFY7WUFFQSxLQUFBLEVBQVUsU0FGVjtZQUdBLEtBQUEsRUFBVSxJQUhWO1dBREo7VUFLQSxPQUFPLENBQUMsSUFBUixDQUFhLENBQWI7QUFDQSxpQkFQSjtTQURKO09BSEo7O1dBWUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxZQUFaLEVBQTBCLFFBQTFCO0VBZlM7Ozs7OztBQWlCakIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgIFxuMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAgXG4jIyNcblxueyBhcmdzLCBwcmVmcywgd2F0Y2gsIGVtcHR5LCB2YWxpZCwgc2xhc2gsIGFib3V0LCBwb3N0LCBjaGlsZHAsIG9zLCBmcywgZXJyb3IsIGxvZywgXyB9ID0gcmVxdWlyZSAnLi9reGsnXG5cbmNsYXNzIEFwcFxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQG9wdCkgLT5cblxuICAgICAgICBwcm9jZXNzLm9uICd1bmNhdWdodEV4Y2VwdGlvbicsIChlcnIpIC0+XG4gICAgICAgICAgICBzcmNtYXAgPSByZXF1aXJlICcuL3NyY21hcCcgICAgXG4gICAgICAgICAgICBzcmNtYXAubG9nRXJyIGVyciwgJ/CflLsnXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgIFxuICAgICAgICBAd2F0Y2hlcnMgPSBbXVxuICAgICAgICAgICAgXG4gICAgICAgIGVsZWN0cm9uID0gcmVxdWlyZSAnZWxlY3Ryb24nXG4gICAgICAgIEBhcHAgPSBlbGVjdHJvbi5hcHBcbiAgICAgICAgQHVzZXJEYXRhID0gc2xhc2gudXNlckRhdGEoKSAjQGFwcC5nZXRQYXRoICd1c2VyRGF0YSdcbiAgICAgICAgXG4gICAgICAgIGlmIEBvcHQudHJheVxuICAgICAgICAgICAgbG9nLnNsb2cuaWNvbiA9IHNsYXNoLmZpbGVVcmwgQHJlc29sdmUgQG9wdC50cmF5ICBcbiAgICAgICAgICAgIFxuICAgICAgICBhcmdsID0gXCJcIlwiXG4gICAgICAgICAgICBub3ByZWZzICAgICBkb24ndCBsb2FkIHByZWZlcmVuY2VzICAgICAgZmFsc2VcbiAgICAgICAgICAgIGRldnRvb2xzICAgIG9wZW4gZGV2ZWxvcGVyIHRvb2xzICAgICAgICBmYWxzZSAgLURcbiAgICAgICAgICAgIHdhdGNoICAgICAgIHdhdGNoIHNvdXJjZXMgZm9yIGNoYW5nZXMgICBmYWxzZVxuICAgICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgYXJnbCA9IEBvcHQuYXJncyArICdcXG4nICsgYXJnbCBpZiBAb3B0LmFyZ3NcbiAgICAgICAgYXJncyA9IGFyZ3MuaW5pdCBhcmdsXG4gICAgICAgIFxuICAgICAgICAjIGxvZyAnYXBwLmFyZ3MnLCBhcmdzXG4gICAgICAgIFxuICAgICAgICBpZiBAb3B0LnNpbmdsZSAhPSBmYWxzZVxuICAgICAgICAgICAgaWYgQGFwcC5tYWtlU2luZ2xlSW5zdGFuY2U/IGFuZCBAYXBwLm1ha2VTaW5nbGVJbnN0YW5jZSBAb3B0Lm9uT3RoZXJJbnN0YW5jZSA/IEBzaG93V2luZG93XG4gICAgICAgICAgICAgICAgbG9nICdhcHAucXVpdCBzaW5nbGUnXG4gICAgICAgICAgICAgICAgQGFwcC5xdWl0KClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIGVsc2UgaWYgQGFwcC5yZXF1ZXN0U2luZ2xlSW5zdGFuY2VMb2NrPyBcbiAgICAgICAgICAgICAgICBpZiBAYXBwLnJlcXVlc3RTaW5nbGVJbnN0YW5jZUxvY2soKVxuICAgICAgICAgICAgICAgICAgICBAYXBwLm9uICdzZWNvbmQtaW5zdGFuY2UnLCBAb3B0Lm9uT3RoZXJJbnN0YW5jZSA/IEBzaG93V2luZG93XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBAYXBwLnF1aXQoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIHBvc3Qub24gJ3Nob3dBYm91dCcsIEBzaG93QWJvdXRcbiAgICAgICAgcG9zdC5vbiAncXVpdEFwcCcsICAgQHF1aXRBcHBcblxuICAgICAgICBAYXBwLnNldE5hbWUgQG9wdC5wa2cubmFtZVxuICAgICAgICBAYXBwLm9uICdyZWFkeScsIEBvblJlYWR5XG4gICAgICAgIEBhcHAub24gJ3dpbmRvdy1hbGwtY2xvc2VkJywgKGV2ZW50KSA9PiBcbiAgICAgICAgICAgIGlmIG5vdCBAb3B0LnNpbmdsZVdpbmRvd1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgICAgICAgIFxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIEBxdWl0QXBwKClcbiAgICAgICAgXG4gICAgcmVzb2x2ZTogKGZpbGUpID0+IHNsYXNoLnJlc29sdmUgc2xhc2guam9pbiBAb3B0LmRpciwgZmlsZVxuICAgIFxuICAgICMwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAgMDAwXG4gICAgIzAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMFxuICAgICMwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAwMDAwMFxuICAgICMwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwXG4gICAgIzAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAwMDBcbiAgICBcbiAgICBvblJlYWR5OiA9PlxuICAgIFxuICAgICAgICBpZiBAb3B0LnRyYXkgdGhlbiBAaW5pdFRyYXkoKVxuICAgICAgICAgXG4gICAgICAgIEBoaWRlRG9jaygpXG4gICAgICAgICBcbiAgICAgICAgQGFwcC5zZXROYW1lIEBvcHQucGtnLm5hbWVcbiAgICBcbiAgICAgICAgaWYgbm90IGFyZ3Mubm9wcmVmc1xuICAgICAgICAgICAgaWYgQG9wdC5zaG9ydGN1dFxuICAgICAgICAgICAgICAgIHByZWZzLmluaXQgc2hvcnRjdXQ6IEBvcHQuc2hvcnRjdXRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwcmVmcy5pbml0KClcbiAgICBcbiAgICAgICAgaWYgdmFsaWQgcHJlZnMuZ2V0ICdzaG9ydGN1dCdcbiAgICAgICAgICAgIGVsZWN0cm9uID0gcmVxdWlyZSAnZWxlY3Ryb24nXG4gICAgICAgICAgICBlbGVjdHJvbi5nbG9iYWxTaG9ydGN1dC5yZWdpc3RlciBwcmVmcy5nZXQoJ3Nob3J0Y3V0JyksIEBzaG93V2luZG93XG4gICAgICAgICAgICAgXG4gICAgICAgIGlmIGFyZ3Mud2F0Y2hcbiAgICAgICAgICAgIGxvZyAnQXBwLm9uUmVhZHkgc3RhcnRXYXRjaGVyJ1xuICAgICAgICAgICAgQHN0YXJ0V2F0Y2hlcigpXG4gICAgICAgIFxuICAgICAgICBpZiBAb3B0Lm9uU2hvd1xuICAgICAgICAgICAgQG9wdC5vblNob3coKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAc2hvd1dpbmRvdygpXG5cbiAgICAgICAgcG9zdC5lbWl0ICdhcHBSZWFkeSdcbiAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgICMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMCAwMDAgICBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwMCAgICAwMDAwMDAwMDAgICAgMDAwMDAgICAgXG4gICAgIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICBcbiAgICBpbml0VHJheTogPT5cbiAgICAgICAgXG4gICAgICAgIGVsZWN0cm9uID0gcmVxdWlyZSAnZWxlY3Ryb24nXG4gICAgICAgIHRyYXlJbWcgPSBAcmVzb2x2ZSBAb3B0LnRyYXlcbiAgICAgICAgQHRyYXkgPSBuZXcgZWxlY3Ryb24uVHJheSB0cmF5SW1nXG4gICAgICAgIEB0cmF5Lm9uICdjbGljaycsIEB0b2dnbGVXaW5kb3dGcm9tVHJheVxuICAgICAgICBcbiAgICAgICAgaWYgb3MucGxhdGZvcm0oKSAhPSAnZGFyd2luJ1xuICAgICAgICAgICAgdGVtcGxhdGUgPSBbXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiUXVpdFwiXG4gICAgICAgICAgICAgICAgY2xpY2s6IEBxdWl0QXBwXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQWJvdXRcIlxuICAgICAgICAgICAgICAgIGNsaWNrOiBAc2hvd0Fib3V0XG4gICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiQWN0aXZhdGVcIlxuICAgICAgICAgICAgICAgIGNsaWNrOiBAdG9nZ2xlV2luZG93RnJvbVRyYXlcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIEB0cmF5LnNldENvbnRleHRNZW51IGVsZWN0cm9uLk1lbnUuYnVpbGRGcm9tVGVtcGxhdGUgdGVtcGxhdGVcbiAgICAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgIFxuICAgIHNob3dBYm91dDogPT5cbiAgICAgICAgXG4gICAgICAgIGRhcmsgPSAnZGFyaycgPT0gcHJlZnMuZ2V0ICdzY2hlbWUnLCAnZGFyaydcbiAgICAgICAgYWJvdXRcbiAgICAgICAgICAgIGltZzogICAgICAgIEByZXNvbHZlIEBvcHQuYWJvdXRcbiAgICAgICAgICAgIGNvbG9yOiAgICAgIGRhcmsgYW5kICcjMzgzODM4JyBvciAnI2RkZCdcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGRhcmsgYW5kICcjMjgyODI4JyBvciAnI2ZmZidcbiAgICAgICAgICAgIGhpZ2hsaWdodDogIGRhcmsgYW5kICcjZmZmJyAgICBvciAnIzAwMCdcbiAgICAgICAgICAgIHBrZzogICAgICAgIEBvcHQucGtnXG4gICAgICAgICAgICBkZWJ1ZzogICAgICBAb3B0LmFib3V0RGVidWdcbiAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwIDAwIDAwICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMCAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAgMDAwMDAgMDAgICAwMDAwMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIHF1aXRBcHA6ID0+XG4gICAgICAgIFxuICAgICAgICBAc3RvcFdhdGNoZXIoKVxuICAgICAgICBAc2F2ZUJvdW5kcygpXG4gICAgICAgIHByZWZzLnNhdmUoKVxuICAgICAgICBcbiAgICAgICAgaWYgJ2RlbGF5JyAhPSBAb3B0Lm9uUXVpdD8oKVxuICAgICAgICAgICAgQGV4aXRBcHAoKVxuICAgICAgICAgICAgXG4gICAgZXhpdEFwcDogPT5cbiAgICAgICAgXG4gICAgICAgIEBhcHAuZXhpdCAwXG4gICAgICAgIHByb2Nlc3MuZXhpdCAwXG4gICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGhpZGVEb2NrOiA9PiBAYXBwLmRvY2s/LmhpZGUoKVxuICAgIHNob3dEb2NrOiA9PiBAYXBwLmRvY2s/LnNob3coKVxuICAgICAgICBcbiAgICAjMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICMwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwXG4gICAgIzAwMDAwMDAwMCAgMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMDBcbiAgICAjMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMwMCAgICAgMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAgICAgIDAwXG4gICAgXG4gICAgdG9nZ2xlV2luZG93OiA9PlxuICAgICAgICAgXG4gICAgICAgIGlmIEB3aW4/LmlzVmlzaWJsZSgpXG4gICAgICAgICAgICBAd2luLmhpZGUoKVxuICAgICAgICAgICAgQGhpZGVEb2NrKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNob3dXaW5kb3coKVxuXG4gICAgdG9nZ2xlV2luZG93RnJvbVRyYXk6ID0+IEBzaG93V2luZG93KClcbiAgICAgICAgICAgIFxuICAgIHNob3dXaW5kb3c6ID0+XG4gICAgICAgIFxuICAgICAgICBAb3B0Lm9uV2lsbFNob3dXaW4/KClcbiAgICAgICAgXG4gICAgICAgIGlmIEB3aW4/XG4gICAgICAgICAgICBAd2luLnNob3coKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAY3JlYXRlV2luZG93KClcbiAgICAgICAgICAgIFxuICAgICAgICBAc2hvd0RvY2soKVxuICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgY3JlYXRlV2luZG93OiAob25SZWFkeVRvU2hvdykgPT5cbiAgICBcbiAgICAgICAgZWxlY3Ryb24gPSByZXF1aXJlICdlbGVjdHJvbidcbiAgICAgICAgXG4gICAgICAgIGJvdW5kcyA9IHByZWZzLmdldCAnYm91bmRzJ1xuICAgICAgICB3aWR0aCAgPSBib3VuZHM/LndpZHRoICA/IEBvcHQud2lkdGggID8gNTAwXG4gICAgICAgIGhlaWdodCA9IGJvdW5kcz8uaGVpZ2h0ID8gQG9wdC5oZWlnaHQgPyA1MDBcbiAgICAgICAgXG4gICAgICAgIEB3aW4gPSBuZXcgZWxlY3Ryb24uQnJvd3NlcldpbmRvd1xuICAgICAgICAgICAgd2lkdGg6ICAgICAgICAgICB3aWR0aFxuICAgICAgICAgICAgaGVpZ2h0OiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgIG1pbldpZHRoOiAgICAgICAgQG9wdC5taW5XaWR0aCAgPyAyNTBcbiAgICAgICAgICAgIG1pbkhlaWdodDogICAgICAgQG9wdC5taW5IZWlnaHQgPyAyNTBcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMxODE4MTgnXG4gICAgICAgICAgICBmdWxsc2NyZWVuZW5hYmxlOiB0cnVlXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiAgICAgIGZhbHNlXG4gICAgICAgICAgICBzaG93OiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICBmcmFtZTogICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICByZXNpemFibGU6ICAgICAgIHRydWVcbiAgICAgICAgICAgIG1heGltaXphYmxlOiAgICAgdHJ1ZVxuICAgICAgICAgICAgbWluaW1pemFibGU6ICAgICB0cnVlXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogICAgIHRydWVcbiAgICAgICAgICAgIGF1dG9IaWRlTWVudUJhcjogdHJ1ZVxuICAgICAgICAgICAgaWNvbjogICAgICAgICAgICBAcmVzb2x2ZSBAb3B0Lmljb24gXG4gICAgICAgICAgICB3ZWJQcmVmZXJlbmNlczogXG4gICAgICAgICAgICAgICAgbm9kZUludGVncmF0aW9uOiB0cnVlXG4gICAgXG4gICAgICAgIEB3aW4uc2V0UG9zaXRpb24gYm91bmRzLngsIGJvdW5kcy55IGlmIGJvdW5kcz9cbiAgICBcbiAgICAgICAgQHdpbi5sb2FkVVJMIHNsYXNoLmZpbGVVcmwgQHJlc29sdmUgQG9wdC5pbmRleFxuICAgICAgICBAd2luLndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpIGlmIGFyZ3MuZGV2dG9vbHNcbiAgICAgICAgQHdpbi5vbiAncmVzaXplJywgQHNhdmVCb3VuZHNcbiAgICAgICAgQHdpbi5vbiAnbW92ZScsICAgQHNhdmVCb3VuZHNcbiAgICAgICAgQHdpbi5vbiAnY2xvc2VkJywgPT4gQHdpbiA9IG51bGxcbiAgICAgICAgQHdpbi5vbiAnY2xvc2UnLCAgPT4gQGhpZGVEb2NrKClcbiAgICAgICAgQHdpbi5vbiAncmVhZHktdG8tc2hvdycsIChldmVudCkgPT4gXG4gICAgICAgICAgICB3aW4gPSBldmVudC5zZW5kZXJcbiAgICAgICAgICAgIG9uUmVhZHlUb1Nob3c/IHdpbiBcbiAgICAgICAgICAgIHdpbi5zaG93KCkgXG4gICAgICAgICAgICBwb3N0LmVtaXQgJ3dpblJlYWR5Jywgd2luLmlkXG4gICAgICAgIEBzaG93RG9jaygpXG4gICAgICAgIFxuICAgICAgICBAd2luXG5cbiAgICBzYXZlQm91bmRzOiA9PiBpZiBAd2luPyB0aGVuIHByZWZzLnNldCAnYm91bmRzJywgQHdpbi5nZXRCb3VuZHMoKVxuICAgIHNjcmVlblNpemU6IC0+IFxuICAgICAgICBlbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuICAgICAgICBlbGVjdHJvbi5zY3JlZW4uZ2V0UHJpbWFyeURpc3BsYXkoKS53b3JrQXJlYVNpemVcbiAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMCAgICAgXG4gICAgIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgXG4gICAgIyAwMCAgICAgMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgIFxuICAgICAgICBcbiAgICBzdGFydFdhdGNoZXI6ID0+XG4gICAgICAgIFxuICAgICAgICBAb3B0LmRpciA9IHNsYXNoLnJlc29sdmUgQG9wdC5kaXJcbiAgICAgICAgY29uc29sZS5sb2cgJ3N0YXJ0V2F0Y2hlcicsIEBvcHQuZGlyXG4gICAgICAgIHdhdGNoZXIgPSB3YXRjaC5kaXIgQG9wdC5kaXJcbiAgICAgICAgd2F0Y2hlci5vbiAnY2hhbmdlJywgQG9uU3JjQ2hhbmdlXG4gICAgICAgIHdhdGNoZXIub24gJ2Vycm9yJywgKGVycikgLT4gZXJyb3IgZXJyXG4gICAgICAgIEB3YXRjaGVycy5wdXNoIHdhdGNoZXJcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBlbXB0eSBAb3B0LmRpcnNcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nICdzdGFydFdhdGNoZXJzJywgQG9wdC5kaXJzXG4gICAgICAgIGZvciBkaXIgaW4gQG9wdC5kaXJzXG4gICAgICAgICAgICB3YXRjaGVyID0gd2F0Y2guZGlyIHNsYXNoLnJlc29sdmUgc2xhc2guam9pbiBAb3B0LmRpciwgZGlyXG4gICAgICAgICAgICB3YXRjaGVyLm9uICdjaGFuZ2UnLCBAb25TcmNDaGFuZ2VcbiAgICAgICAgICAgIHdhdGNoZXIub24gJ2Vycm9yJywgKGVycikgLT4gZXJyb3IgZXJyXG4gICAgICAgICAgICBAd2F0Y2hlcnMucHVzaCB3YXRjaGVyIFxuICAgIFxuICAgIHN0b3BXYXRjaGVyOiA9PlxuICAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBlbXB0eSBAd2F0Y2hlcnNcbiAgICAgICAgZm9yIHdhdGNoZXIgaW4gQHdhdGNoZXJzXG4gICAgICAgICAgICB3YXRjaGVyLmNsb3NlKClcbiAgICAgICAgQHdhdGNoZXJzID0gW11cbiAgICBcbiAgICBvblNyY0NoYW5nZTogKGluZm8pID0+XG4gICAgXG4gICAgICAgIGxvZyBcIm9uU3JjQ2hhbmdlICcje2luZm8uY2hhbmdlfSdcIiwgaW5mby5wYXRoXG4gICAgICAgIGlmIHNsYXNoLmJhc2UoaW5mby5wYXRoKSA9PSAnbWFpbidcbiAgICAgICAgICAgIEBzdG9wV2F0Y2hlcigpXG4gICAgICAgICAgICBAYXBwLmV4aXQgMFxuICAgICAgICAgICAgaWYgcGtnID0gc2xhc2gucGtnIEBvcHQuZGlyXG4gICAgICAgICAgICAgICAgaWYgc2xhc2guaXNEaXIgc2xhc2guam9pbiBwa2csICdub2RlX21vZHVsZXMnXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcC5leGVjU3luYyBcIiN7cGtnfS9ub2RlX21vZHVsZXMvLmJpbi9lbGVjdHJvbiAuIC13XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjd2Q6ICAgICAgcGtnXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGRpbzogICAgJ2luaGVyaXQnXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGVsbDogICAgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQgMFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgcG9zdC50b1dpbnMgJ21lbnVBY3Rpb24nLCAnUmVsb2FkJ1xuICAgICAgICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBBcHBcbiAgICAiXX0=
//# sourceURL=../coffee/app.coffee