/*
 0000000   00000000   00000000   
000   000  000   000  000   000  
000000000  00000000   00000000   
000   000  000        000        
000   000  000        000        
*/
var App, _, about, args, childp, empty, error, fs, log, post, prefs, slash, valid, watch;

({args, prefs, watch, empty, valid, slash, about, post, childp, fs, error, log, _} = require('./kxk'));

App = class App {
  constructor(opt) {
    var argl, electron, ref, ref1;
    this.resolve = this.resolve.bind(this);
    
    //00000000   00000000   0000000   0000000    000   000
    //000   000  000       000   000  000   000   000 000
    //0000000    0000000   000000000  000   000    00000
    //000   000  000       000   000  000   000     000
    //000   000  00000000  000   000  0000000       000
    this.onReady = this.onReady.bind(this);
    
    // 000000000  00000000    0000000   000   000  
    //    000     000   000  000   000   000 000   
    //    000     0000000    000000000    00000    
    //    000     000   000  000   000     000     
    //    000     000   000  000   000     000     
    this.initTray = this.initTray.bind(this);
    
    //  0000000   0000000     0000000   000   000  000000000  
    // 000   000  000   000  000   000  000   000     000     
    // 000000000  0000000    000   000  000   000     000     
    // 000   000  000   000  000   000  000   000     000     
    // 000   000  0000000     0000000    0000000      000     
    this.showAbout = this.showAbout.bind(this);
    
    //  0000000   000   000  000  000000000  
    // 000   000  000   000  000     000     
    // 000 00 00  000   000  000     000     
    // 000 0000   000   000  000     000     
    //  00000 00   0000000   000     000     
    this.quitApp = this.quitApp.bind(this);
    this.exitApp = this.exitApp.bind(this);
    
    // 0000000     0000000    0000000  000   000  
    // 000   000  000   000  000       000  000   
    // 000   000  000   000  000       0000000    
    // 000   000  000   000  000       000  000   
    // 0000000     0000000    0000000  000   000  
    this.hideDock = this.hideDock.bind(this);
    this.showDock = this.showDock.bind(this);
    
    //000   000  000  000   000  0000000     0000000   000   000
    //000 0 000  000  0000  000  000   000  000   000  000 0 000
    //000000000  000  000 0 000  000   000  000   000  000000000
    //000   000  000  000  0000  000   000  000   000  000   000
    //00     00  000  000   000  0000000     0000000   00     00
    this.toggleWindow = this.toggleWindow.bind(this);
    this.toggleWindowFromTray = this.toggleWindowFromTray.bind(this);
    this.showWindow = this.showWindow.bind(this);
    
    //  0000000  00000000   00000000   0000000   000000000  00000000  
    // 000       000   000  000       000   000     000     000       
    // 000       0000000    0000000   000000000     000     0000000   
    // 000       000   000  000       000   000     000     000       
    //  0000000  000   000  00000000  000   000     000     00000000  
    this.createWindow = this.createWindow.bind(this);
    this.saveBounds = this.saveBounds.bind(this);
    
    // 000   000   0000000   000000000   0000000  000   000  00000000  00000000     
    // 000 0 000  000   000     000     000       000   000  000       000   000    
    // 000000000  000000000     000     000       000000000  0000000   0000000      
    // 000   000  000   000     000     000       000   000  000       000   000    
    // 00     00  000   000     000      0000000  000   000  00000000  000   000    
    this.startWatcher = this.startWatcher.bind(this);
    this.stopWatcher = this.stopWatcher.bind(this);
    this.onSrcChange = this.onSrcChange.bind(this);
    this.opt = opt;
    process.on('uncaughtException', function(err) {
      var srcmap;
      srcmap = require('./srcmap');
      srcmap.logErr(err, 'ðŸ”»');
      return true;
    });
    this.watchers = [];
    electron = require('electron');
    this.app = electron.app;
    this.userData = slash.userData(); //@app.getPath 'userData'
    if (this.opt.tray) {
      log.slog.icon = slash.fileUrl(this.resolve(this.opt.tray));
    }
    argl = "noprefs     don't load preferences      false\ndevtools    open developer tools        false  -D\nwatch       watch sources for changes   false";
    if (this.opt.args) {
      argl = this.opt.args + '\n' + argl;
    }
    args = args.init(argl);
    
    // log 'app.args', args
    if (this.opt.single !== false) {
      if ((this.app.makeSingleInstance != null) && this.app.makeSingleInstance((ref = this.opt.onOtherInstance) != null ? ref : this.showWindow)) {
        log('app.quit single');
        this.app.quit();
        return;
      } else if (this.app.requestSingleInstanceLock != null) {
        if (this.app.requestSingleInstanceLock()) {
          this.app.on('second-instance', (ref1 = this.opt.onOtherInstance) != null ? ref1 : this.showWindow);
        } else {
          this.app.quit();
          return;
        }
      }
    }
    post.on('showAbout', this.showAbout);
    post.on('quitApp', this.quitApp);
    this.app.setName(this.opt.pkg.name);
    this.app.on('ready', this.onReady);
    this.app.on('window-all-closed', (event) => {
      if (!this.opt.singleWindow) {
        return event.preventDefault();
      } else {
        return this.quitApp();
      }
    });
  }

  resolve(file) {
    return slash.resolve(slash.join(this.opt.dir, file));
  }

  onReady() {
    var electron;
    if (this.opt.tray) {
      this.initTray();
    }
    this.hideDock();
    this.app.setName(this.opt.pkg.name);
    if (!args.noprefs) {
      if (this.opt.shortcut) {
        prefs.init({
          shortcut: this.opt.shortcut
        });
      } else {
        prefs.init();
      }
    }
    if (valid(prefs.get('shortcut'))) {
      electron = require('electron');
      electron.globalShortcut.register(prefs.get('shortcut'), this.showWindow);
    }
    if (args.watch) {
      log('App.onReady startWatcher');
      this.startWatcher();
    }
    if (this.opt.onShow) {
      this.opt.onShow();
    } else {
      this.showWindow();
    }
    return post.emit('appReady');
  }

  initTray() {
    var electron, template, trayImg;
    electron = require('electron');
    trayImg = this.resolve(this.opt.tray);
    this.tray = new electron.Tray(trayImg);
    this.tray.on('click', this.toggleWindowFromTray);
    template = [
      {
        label: "Quit",
        click: this.quitApp
      },
      {
        label: "About",
        click: this.showAbout
      },
      {
        label: "Activate",
        click: this.toggleWindowFromTray
      }
    ];
    return this.tray.setContextMenu(electron.Menu.buildFromTemplate(template));
  }

  showAbout() {
    var dark;
    dark = 'dark' === prefs.get('scheme', 'dark');
    return about({
      img: this.resolve(this.opt.about),
      color: dark && '#383838' || '#ddd',
      background: dark && '#282828' || '#fff',
      highlight: dark && '#fff' || '#000',
      pkg: this.opt.pkg,
      debug: this.opt.aboutDebug
    });
  }

  quitApp() {
    var base;
    this.stopWatcher();
    this.saveBounds();
    prefs.save();
    if ('delay' !== (typeof (base = this.opt).onQuit === "function" ? base.onQuit() : void 0)) {
      return this.exitApp();
    }
  }

  exitApp() {
    this.app.exit(0);
    return process.exit(0);
  }

  hideDock() {
    var ref;
    return (ref = this.app.dock) != null ? ref.hide() : void 0;
  }

  showDock() {
    var ref;
    return (ref = this.app.dock) != null ? ref.show() : void 0;
  }

  toggleWindow() {
    var ref;
    if ((ref = this.win) != null ? ref.isVisible() : void 0) {
      this.win.hide();
      return this.hideDock();
    } else {
      return this.showWindow();
    }
  }

  toggleWindowFromTray() {
    return this.showWindow();
  }

  showWindow() {
    var base;
    if (typeof (base = this.opt).onWillShowWin === "function") {
      base.onWillShowWin();
    }
    if (this.win != null) {
      this.win.show();
    } else {
      this.createWindow();
    }
    return this.showDock();
  }

  createWindow(onReadyToShow) {
    var bounds, electron, height, ref, ref1, ref2, ref3, ref4, ref5, width;
    electron = require('electron');
    bounds = prefs.get('bounds');
    width = (ref = (ref1 = bounds != null ? bounds.width : void 0) != null ? ref1 : this.opt.width) != null ? ref : 500;
    height = (ref2 = (ref3 = bounds != null ? bounds.height : void 0) != null ? ref3 : this.opt.height) != null ? ref2 : 500;
    this.win = new electron.BrowserWindow({
      width: width,
      height: height,
      minWidth: (ref4 = this.opt.minWidth) != null ? ref4 : 250,
      minHeight: (ref5 = this.opt.minHeight) != null ? ref5 : 250,
      backgroundColor: '#181818',
      fullscreen: false,
      show: false,
      frame: false,
      resizable: true,
      maximizable: true,
      minimizable: true,
      transparent: true,
      autoHideMenuBar: true,
      icon: this.resolve(this.opt.icon),
      webPreferences: {
        nodeIntegration: true
      }
    });
    if (bounds != null) {
      this.win.setPosition(bounds.x, bounds.y);
    }
    this.win.loadURL(slash.fileUrl(this.resolve(this.opt.index)));
    if (args.devtools) {
      this.win.webContents.openDevTools();
    }
    this.win.on('resize', this.saveBounds);
    this.win.on('move', this.saveBounds);
    this.win.on('closed', () => {
      return this.win = null;
    });
    this.win.on('close', () => {
      return this.hideDock();
    });
    this.win.on('ready-to-show', (event) => {
      var win;
      win = event.sender;
      if (typeof onReadyToShow === "function") {
        onReadyToShow(win);
      }
      win.show();
      return post.emit('winReady', win.id);
    });
    this.showDock();
    return this.win;
  }

  saveBounds() {
    if (this.win != null) {
      return prefs.set('bounds', this.win.getBounds());
    }
  }

  screenSize() {
    var electron;
    electron = require('electron');
    return electron.screen.getPrimaryDisplay().workAreaSize;
  }

  startWatcher() {
    var dir, i, len, ref, results, watcher;
    this.opt.dir = slash.resolve(this.opt.dir);
    console.log('startWatcher', this.opt.dir);
    watcher = watch.dir(this.opt.dir);
    watcher.on('change', this.onSrcChange);
    watcher.on('error', function(err) {
      return error(err);
    });
    this.watchers.push(watcher);
    if (empty(this.opt.dirs)) {
      return;
    }
    console.log('startWatchers', this.opt.dirs);
    ref = this.opt.dirs;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      dir = ref[i];
      watcher = watch.dir(slash.resolve(slash.join(this.opt.dir, dir)));
      watcher.on('change', this.onSrcChange);
      watcher.on('error', function(err) {
        return error(err);
      });
      results.push(this.watchers.push(watcher));
    }
    return results;
  }

  stopWatcher() {
    var i, len, ref, watcher;
    if (empty(this.watchers)) {
      return;
    }
    ref = this.watchers;
    for (i = 0, len = ref.length; i < len; i++) {
      watcher = ref[i];
      watcher.close();
    }
    return this.watchers = [];
  }

  onSrcChange(info) {
    var pkg;
    log(`onSrcChange '${info.change}'`, info.path);
    if (slash.base(info.path) === 'main') {
      this.stopWatcher();
      this.app.exit(0);
      if (pkg = slash.pkg(this.opt.dir)) {
        if (slash.isDir(slash.join(pkg, 'node_modules'))) {
          childp.execSync(`${pkg}/node_modules/.bin/electron . -w`, {
            cwd: pkg,
            encoding: 'utf8',
            stdio: 'inherit',
            shell: true
          });
          process.exit(0);
          return;
        }
      }
    }
    return post.toWins('menuAction', 'Reload');
  }

};

module.exports = App;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/app.coffee