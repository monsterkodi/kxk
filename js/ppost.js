(function() {
  /*
  00000000    0000000    0000000  000000000    
  000   000  000   000  000          000       
  00000000   000   000  0000000      000       
  000        000   000       000     000       
  000         0000000   0000000      000       
  */
  var Emitter, POST, PostMain, PostRenderer, _, electron, remote,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
    indexOf = [].indexOf;

  _ = require('lodash');

  Emitter = require('events');

  POST = '__POST__';

  if (process.type === 'renderer') {
    electron = require('electron');
    remote = electron.remote;
    
    // 000   000  000  000   000    
    // 000 0 000  000  0000  000    
    // 000000000  000  000 0 000    
    // 000   000  000  000  0000    
    // 00     00  000  000   000    
    PostRenderer = class PostRenderer extends Emitter {
      constructor() {
        super();
        this.dispose = this.dispose.bind(this);
        this.dbg = false;
        this.id = remote.getCurrentWindow().id;
        this.ipc = electron.ipcRenderer;
        this.ipc.on(POST, (event, type, argl) => {
          return this.emit.apply(this, [type].concat(argl));
        });
        window.addEventListener('beforeunload', this.dispose);
      }

      dispose() {
        boundMethodCheck(this, PostRenderer);
        window.removeEventListener('beforeunload', this.dispose);
        this.ipc.removeAllListeners(POST);
        return this.ipc = null;
      }

      toAll(type, ...args) {
        return this.send('toAll', type, args);
      }

      toOthers(type, ...args) {
        return this.send('toOthers', type, args, this.id);
      }

      toMain(type, ...args) {
        return this.send('toMain', type, args);
      }

      toOtherWins(type, ...args) {
        return this.send('toOtherWins', type, args, this.id);
      }

      toWins(type, ...args) {
        return this.send('toWins', type, args);
      }

      toWin(id, type, ...args) {
        return this.send('toWin', type, args, id);
      }

      get(type, ...args) {
        return this.ipc.sendSync(POST, 'get', type, args);
      }

      debug(dbg = ['emit', 'toAll', 'toOthers', 'toMain', 'toOtherWins', 'toWins', 'toWin']) {
        this.dbg = dbg;
        return console.log(`post.debug id:${this.id}`, this.dbg);
      }

      emit(type, ...args) {
        if (indexOf.call(this.dbg, 'emit') >= 0) {
          console.log(`post.emit ${type}`, args.map(function(a) {
            return new String(a);
          }).join(' '));
        }
        return super.emit(...arguments);
      }

      send(receivers, type, args, id) {
        if (indexOf.call(this.dbg, receivers) >= 0) {
          console.log(`post.${receivers} ${type}`, args.map(function(a) {
            return new String(a);
          }).join(' '));
        }
        return this.ipc.send(POST, receivers, type, args, id);
      }

    };
    module.exports = new PostRenderer();
  } else {
    // 00     00   0000000   000  000   000  
    // 000   000  000   000  000  0000  000  
    // 000000000  000000000  000  000 0 000  
    // 000 0 000  000   000  000  000  0000  
    // 000   000  000   000  000  000   000  
    PostMain = class PostMain extends Emitter {
      constructor() {
        var err, ipc;
        super();
        this.getCallbacks = {};
        try {
          ipc = require('electron').ipcMain;
          if (ipc != null) {
            ipc.on(POST, (event, kind, type, argl, id) => {
              var retval;
              id = id || event.sender.id;
              switch (kind) {
                case 'toMain':
                  return this.sendToMain(type, argl);
                case 'toAll':
                  return this.sendToWins(type, argl).sendToMain(type, argl);
                case 'toOthers':
                  return this.sendToWins(type, argl, id).sendToMain(type, argl);
                case 'toOtherWins':
                  return this.sendToWins(type, argl, id);
                case 'toWins':
                  return this.sendToWins(type, argl);
                case 'toWin':
                  if (this.dbg) {
                    console.log('to win', id, type, argl);
                  }
                  return this.toWin.apply(this, [id, type].concat(argl));
                case 'get':
                  if (this.dbg) {
                    console.log('post get', type, argl, this.getCallbacks[type]);
                  }
                  if (_.isFunction(this.getCallbacks[type])) {
                    retval = this.getCallbacks[type].apply(this.getCallbacks[type], argl);
                    return event.returnValue = retval != null ? retval : [];
                  }
              }
            });
          }
        } catch (error) {
          err = error;
          null; // don't log error here (this gets called for non-electron scripts as well)
        }
      }

      toAll(type, ...args) {
        return this.sendToWins(type, args).sendToMain(type, args);
      }

      toMain(type, ...args) {
        return this.sendToMain(type, args);
      }

      toWins(type, ...args) {
        return this.sendToWins(type, args);
      }

      toWin(id, type, ...args) {
        var ref;
        return (ref = require('electron').BrowserWindow.fromId(id)) != null ? ref.webContents.send(POST, type, args) : void 0;
      }

      onGet(type, cb) {
        this.getCallbacks[type] = cb;
        return this;
      }

      sendToMain(type, argl) {
        if (this.dbg) {
          console.log("post to main", type, argl);
        }
        argl.unshift(type);
        this.emit.apply(this, argl);
        return this;
      }

      sendToWins(type, argl, except) {
        var i, len, ref, win;
        ref = require('electron').BrowserWindow.getAllWindows();
        for (i = 0, len = ref.length; i < len; i++) {
          win = ref[i];
          if (win.id !== except) {
            if (this.dbg) {
              console.log(`post to ${win.id} ${type //, argl.map((a) -> new String(a)).join ' '
}`);
            }
            win.webContents.send(POST, type, argl);
          }
        }
        return this;
      }

      debug(dbg = true) {
        this.dbg = dbg;
        return console.log("post.debug", this.dbg);
      }

    };
    module.exports = new PostMain();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/ppost.coffee