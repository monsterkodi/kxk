(function() {
  /*
   0000000  000       0000000    0000000  000   000    
  000       000      000   000  000       000   000    
  0000000   000      000000000  0000000   000000000    
       000  000      000   000       000  000   000    
  0000000   0000000  000   000  0000000   000   000    
  */
  var Slash, _, empty, fs, os, path, valid;

  ({fs, os, empty, valid, _} = require('./kxk'));

  path = require('path');

  Slash = (function() {
    class Slash {
      static win() {
        return path.sep === '\\';
      }

      static error(msg) {
        var error;
        error = require('./error');
        error(msg);
        return '';
      }

      
      // 00000000    0000000   000000000  000   000  
      // 000   000  000   000     000     000   000  
      // 00000000   000000000     000     000000000  
      // 000        000   000     000     000   000  
      // 000        000   000     000     000   000  
      static path(p) {
        if ((p == null) || p.length === 0) {
          return Slash.error(`Slash.path -- no path? ${p}`);
        }
        p = path.normalize(p);
        p = p.replace(Slash.reg, '/');
        return p;
      }

      static unslash(p) {
        if ((p == null) || p.length === 0) {
          return Slash.error(`Slash.unslash -- no path? ${p}`);
        }
        p = Slash.path(p);
        if (Slash.win()) {
          if (p.length >= 3 && (p[0] === '/' && '/' === p[2])) {
            p = p[1] + ':' + p.slice(2);
          }
          p = path.normalize(p);
          if (p[1] === ':') {
            p = p.splice(0, 1, p[0].toUpperCase());
          }
        }
        return p;
      }

      
      //  0000000  00000000   000      000  000000000  
      // 000       000   000  000      000     000     
      // 0000000   00000000   000      000     000     
      //      000  000        000      000     000     
      // 0000000   000        0000000  000     000     
      static split(p) {
        return Slash.path(p).split('/').filter(function(e) {
          return e.length;
        });
      }

      static splitDrive(p) {
        var filePath, root;
        if (Slash.win()) {
          root = Slash.parse(p).root;
          if (root.length > 1) {
            if (p.length > root.length) {
              filePath = Slash.path(p.slice(root.length - 1));
            } else {
              filePath = '/';
            }
            return [filePath, root.slice(0, root.length - 2)];
          }
        }
        return [Slash.path(p), ''];
      }

      static removeDrive(p) {
        return Slash.splitDrive(p)[0];
      }

      static isRoot(p) {
        return Slash.removeDrive(p) === '/';
      }

      static splitFileLine(p) { // file.txt:1:0 --> ['file.txt', 1, 0]
        var c, clmn, d, f, l, line, split;
        [f, d] = Slash.splitDrive(p);
        split = String(f).split(':');
        if (split.length > 1) {
          line = parseInt(split[1]);
        }
        if (split.length > 2) {
          clmn = parseInt(split[2]);
        }
        l = c = 0;
        if (Number.isInteger(line)) {
          l = line;
        }
        if (Number.isInteger(clmn)) {
          c = clmn;
        }
        if (d !== '') {
          d = d + ':';
        }
        return [d + split[0], Math.max(l, 1), Math.max(c, 0)];
      }

      static splitFilePos(p) { // file.txt:1:3 --> ['file.txt', [3, 0]]
        var c, f, l;
        [f, l, c] = Slash.splitFileLine(p);
        return [f, [c, l - 1]];
      }

      static removeLinePos(p) {
        return Slash.splitFileLine(p)[0];
      }

      static removeColumn(p) {
        var f, l;
        [f, l] = Slash.splitFileLine(p);
        if (l > 1) {
          return f + ':' + l;
        } else {
          return f;
        }
      }

      static ext(p) {
        return path.extname(p).slice(1);
      }

      static splitExt(p) {
        return [Slash.removeExt(p), Slash.ext(p)];
      }

      static removeExt(p) {
        return Slash.join(Slash.dir(p), Slash.base(p));
      }

      static swapExt(p, ext) {
        return Slash.removeExt(p) + (ext.startsWith('.') && ext || `.${ext}`);
      }

      
      //       000   0000000   000  000   000  
      //       000  000   000  000  0000  000  
      //       000  000   000  000  000 0 000  
      // 000   000  000   000  000  000  0000  
      //  0000000    0000000   000  000   000  
      static join() {
        return [].map.call(arguments, Slash.path).join('/');
      }

      static joinFilePos(file, pos) { // ['file.txt', [3, 0]] --> file.txt:1:3
        if ((pos == null) || !pos[0] && !pos[1]) {
          return file;
        } else if (pos[0]) {
          return file + `:${pos[1] + 1}:${pos[0]}`;
        } else {
          return file + `:${pos[1] + 1}`;
        }
      }

      static joinFileLine(file, line, col) { // 'file.txt', 1, 2 --> file.txt:1:2
        if (line == null) {
          return file;
        }
        if (col == null) {
          return `${file}:${line}`;
        }
        return `${file}:${line}:${col}`;
      }

      
      // 000   000   0000000   00     00  00000000  
      // 0000  000  000   000  000   000  000       
      // 000 0 000  000000000  000000000  0000000   
      // 000  0000  000   000  000 0 000  000       
      // 000   000  000   000  000   000  00000000  
      static base(p) {
        return path.basename(Slash.sanitize(p), path.extname(Slash.sanitize(p)));
      }

      static file(p) {
        return path.basename(Slash.sanitize(p));
      }

      static extname(p) {
        return path.extname(Slash.sanitize(p));
      }

      static basename(p, e) {
        return path.basename(Slash.sanitize(p), e);
      }

      static isAbsolute(p) {
        return path.isAbsolute(Slash.sanitize(p));
      }

      static isRelative(p) {
        return !Slash.isAbsolute(Slash.sanitize(p));
      }

      static dirname(p) {
        return Slash.path(path.dirname(Slash.sanitize(p)));
      }

      static dir(p) {
        return Slash.path(path.dirname(Slash.sanitize(p)));
      }

      static normalize(p) {
        return Slash.path(path.normalize(Slash.sanitize(p)));
      }

      static sanitize(p) {
        if (empty(p)) {
          return Slash.error('empty path!');
        }
        if (p[0] === '\n') {
          Slash.error(`leading newline in path! '${p}'`);
          return Slash.sanitize(p.substr(1));
        }
        if (p.endsWith('\n')) {
          Slash.error(`trailing newline in path! '${p}'`);
          return Slash.sanitize(p.substr(0, p.length - 1));
        }
        return p;
      }

      static parse(p) {
        var dict;
        dict = path.parse(p);
        if (dict.dir.length === 2 && dict.dir[1] === ':') {
          dict.dir += '/';
        }
        if (dict.root.length === 2 && dict.root[1] === ':') {
          dict.root += '/';
        }
        return dict;
      }

      
      // 00     00  000   0000000   0000000    
      // 000   000  000  000       000         
      // 000000000  000  0000000   000         
      // 000 0 000  000       000  000         
      // 000   000  000  0000000    0000000    
      static home() {
        return Slash.path(os.homedir());
      }

      static tilde(p) {
        var ref;
        return (ref = Slash.path(p)) != null ? ref.replace(Slash.home(), '~') : void 0;
      }

      static untilde(p) {
        var ref;
        return (ref = Slash.path(p)) != null ? ref.replace(/^\~/, Slash.home()) : void 0;
      }

      static unenv(p) {
        var i, k, ref, v;
        i = p.indexOf('$', 0);
        while (i >= 0) {
          ref = process.env;
          for (k in ref) {
            v = ref[k];
            if (k === p.slice(i + 1, i + 1 + k.length)) {
              p = p.slice(0, i) + v + p.slice(i + k.length + 1);
              break;
            }
          }
          i = p.indexOf('$', i + 1);
        }
        return Slash.path(p);
      }

      static resolve(p) {
        if (empty(p)) {
          return Slash.error(`Slash.resolve -- no path? ${p}`);
        }
        return Slash.path(path.resolve(Slash.unenv(Slash.untilde(p))));
      }

      static relative(rel, to) {
        if (empty(to)) {
          Slash.error(`Slash.relative -- to nothing? rel:'${rel}' to:'${to}'`);
          return rel;
        }
        rel = Slash.resolve(rel);
        if (!Slash.isAbsolute(rel)) {
          return rel;
        }
        if (Slash.resolve(to) === rel) {
          return '.';
        }
        return Slash.path(path.relative(Slash.resolve(to), rel));
      }

      static fileUrl(p) {
        return `file://${Slash.encode(Slash.resolve(p))}`;
      }

      static samePath(a, b) {
        return Slash.resolve(a) === Slash.resolve(b);
      }

      static escape(p) {
        return p.replace(/([\`"])/g, '\\$1');
      }

      static encode(p) {
        p = encodeURI(p);
        p = p.replace(/\#/g, "%23");
        p = p.replace(/\&/g, "%26");
        return p = p.replace(/\'/g, "%27");
      }

      static pkg(p) {
        var ref;
        if ((p != null ? p.length : void 0) != null) {
          while (p.length && ((ref = this.removeDrive(p)) !== '.' && ref !== '/' && ref !== '')) {
            if (Slash.dirExists(Slash.join(p, '.git'))) {
              return Slash.resolve(p);
            }
            if (Slash.fileExists(Slash.join(p, 'package.noon'))) {
              return Slash.resolve(p);
            }
            if (Slash.fileExists(Slash.join(p, 'package.json'))) {
              return Slash.resolve(p);
            }
            p = Slash.dirname(p);
          }
        }
        return null;
      }

      static exists(p, cb) {
        var err, stat;
        if (_.isFunction(cb)) {
          if (p == null) {
            cb();
            return;
          }
          p = Slash.resolve(p);
          fs.access(p, fs.R_OK | fs.F_OK, function(err) {
            if (valid(err)) {
              return cb();
            } else {
              return cb(p);
            }
          });
          return;
        }
        if (p == null) {
          return false;
        }
        try {
          p = Slash.resolve(p);
          if (stat = fs.statSync(p)) {
            fs.accessSync(p, fs.R_OK);
            return stat;
          }
        } catch (error1) {
          err = error1;
          if (err.code === 'ENOENT') {
            return false;
          }
          console.log(err);
        }
        return null;
      }

      static isWritable(p) {
        try {
          fs.accessSync(Slash.resolve(p), fs.R_OK | fs.W_OK);
          return true;
        } catch (error1) {
          return false;
        }
      }

      static fileExists(p) {
        var stat;
        if (stat = Slash.exists(p)) {
          if (stat.isFile()) {
            return stat;
          }
        }
      }

      static dirExists(p) {
        var stat;
        if (stat = Slash.exists(p)) {
          if (stat.isDirectory()) {
            return stat;
          }
        }
      }

      static isDir(p) {
        return this.dirExists(p);
      }

      static isFile(p) {
        return this.fileExists(p);
      }

    };

    Slash.reg = new RegExp("\\\\", 'g');

    return Slash;

  }).call(this);

  module.exports = Slash;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/slash.coffee