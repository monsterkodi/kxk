// Generated by CoffeeScript 1.12.7

/*
 0000000  000       0000000    0000000  000   000    
000       000      000   000  000       000   000    
0000000   000      000000000  0000000   000000000    
     000  000      000   000       000  000   000    
0000000   0000000  000   000  0000000   000   000
 */

(function() {
  var Slash, _, empty, error, fs, log, os, path, ref;

  ref = require('./kxk'), fs = ref.fs, os = ref.os, empty = ref.empty, log = ref.log, error = ref.error, _ = ref._;

  path = require('path');

  Slash = (function() {
    function Slash() {}

    Slash.reg = new RegExp("\\\\", 'g');

    Slash.win = function() {
      return path.sep === '\\';
    };

    Slash.path = function(p) {
      if ((p == null) || p.length === 0) {
        return error("Slash.path -- no path? " + p);
      }
      p = path.normalize(p);
      p = p.replace(Slash.reg, '/');
      return p;
    };

    Slash.unslash = function(p) {
      if ((p == null) || p.length === 0) {
        return error("Slash.unslash -- no path? " + p);
      }
      p = Slash.path(p);
      if (Slash.win()) {
        if (p.length >= 3 && (p[0] === '/' && '/' === p[2])) {
          p = p[1] + ':' + p.slice(2);
        }
        p = path.normalize(p);
        if (p[1] === ':') {
          p = p.splice(0, 1, p[0].toUpperCase());
        }
      }
      return p;
    };

    Slash.split = function(p) {
      return Slash.path(p).split('/').filter(function(e) {
        return e.length;
      });
    };

    Slash.splitDrive = function(p) {
      var filePath, root;
      if (Slash.win()) {
        root = Slash.parse(p).root;
        if (root.length > 1) {
          if (p.length > root.length) {
            filePath = Slash.path(p.slice(root.length - 1));
          } else {
            filePath = '/';
          }
          return [filePath, root.slice(0, root.length - 2)];
        }
      }
      return [Slash.path(p), ''];
    };

    Slash.removeDrive = function(p) {
      return Slash.splitDrive(p)[0];
    };

    Slash.isRoot = function(p) {
      return this.removeDrive(p) === '/';
    };

    Slash.splitFileLine = function(p) {
      var c, clmn, d, f, l, line, ref1, split;
      ref1 = Slash.splitDrive(p), f = ref1[0], d = ref1[1];
      split = String(f).split(':');
      if (split.length > 1) {
        line = parseInt(split[1]);
      }
      if (split.length > 2) {
        clmn = parseInt(split[2]);
      }
      l = c = 0;
      if (Number.isInteger(line)) {
        l = line;
      }
      if (Number.isInteger(clmn)) {
        c = clmn;
      }
      if (d !== '') {
        d = d + ':';
      }
      return [d + split[0], Math.max(l, 1), Math.max(c, 0)];
    };

    Slash.splitFilePos = function(p) {
      var c, f, l, ref1;
      ref1 = Slash.splitFileLine(p), f = ref1[0], l = ref1[1], c = ref1[2];
      return [f, [c, l - 1]];
    };

    Slash.removeLinePos = function(p) {
      return Slash.splitFileLine(p)[0];
    };

    Slash.removeColumn = function(p) {
      var f, l, ref1;
      ref1 = Slash.splitFileLine(p), f = ref1[0], l = ref1[1];
      if (l > 1) {
        return f + ':' + l;
      } else {
        return f;
      }
    };

    Slash.ext = function(p) {
      return path.extname(p).slice(1);
    };

    Slash.splitExt = function(p) {
      return [Slash.removeExt(p), Slash.ext(p)];
    };

    Slash.removeExt = function(p) {
      return Slash.join(Slash.dir(p), Slash.base(p));
    };

    Slash.swapExt = function(p, ext) {
      return Slash.removeExt(p) + (ext.startsWith('.') && ext || ("." + ext));
    };

    Slash.join = function() {
      return [].map.call(arguments, Slash.path).join('/');
    };

    Slash.joinFilePos = function(file, pos) {
      if ((pos == null) || !pos[0] && !pos[1]) {
        return file;
      } else if (pos[0]) {
        return file + (":" + (pos[1] + 1) + ":" + pos[0]);
      } else {
        return file + (":" + (pos[1] + 1));
      }
    };

    Slash.joinFileLine = function(file, line, col) {
      if (line == null) {
        return file;
      }
      if (col == null) {
        return file + ":" + line;
      }
      return file + ":" + line + ":" + col;
    };

    Slash.base = function(p) {
      return path.basename(p, path.extname(p));
    };

    Slash.file = function(p) {
      return path.basename(p);
    };

    Slash.extname = function(p) {
      return path.extname(p);
    };

    Slash.basename = function(p, e) {
      return path.basename(p, e);
    };

    Slash.isAbsolute = function(p) {
      return path.isAbsolute(p);
    };

    Slash.isRelative = function(p) {
      return !Slash.isAbsolute(p);
    };

    Slash.dirname = function(p) {
      return Slash.path(path.dirname(p));
    };

    Slash.dir = function(p) {
      return Slash.path(path.dirname(p));
    };

    Slash.normalize = function(p) {
      return Slash.path(path.normalize(p));
    };

    Slash.parse = function(p) {
      var dict;
      dict = path.parse(p);
      if (dict.dir.length === 2 && dict.dir[1] === ':') {
        dict.dir += '/';
      }
      if (dict.root.length === 2 && dict.root[1] === ':') {
        dict.root += '/';
      }
      return dict;
    };

    Slash.home = function() {
      return Slash.path(os.homedir());
    };

    Slash.tilde = function(p) {
      var ref1;
      return (ref1 = Slash.path(p)) != null ? ref1.replace(Slash.home(), '~') : void 0;
    };

    Slash.untilde = function(p) {
      var ref1;
      return (ref1 = Slash.path(p)) != null ? ref1.replace(/^\~/, Slash.home()) : void 0;
    };

    Slash.unenv = function(p) {
      var i, k, ref1, v;
      i = p.indexOf('$', 0);
      while (i >= 0) {
        ref1 = process.env;
        for (k in ref1) {
          v = ref1[k];
          if (k === p.slice(i + 1, i + 1 + k.length)) {
            p = p.slice(0, i) + v + p.slice(i + k.length + 1);
            break;
          }
        }
        i = p.indexOf('$', i + 1);
      }
      return Slash.path(p);
    };

    Slash.resolve = function(p) {
      if (empty(p)) {
        return error("Slash.resolve -- no path? " + p);
      }
      return Slash.path(path.resolve(Slash.unenv(Slash.untilde(p))));
    };

    Slash.relative = function(rel, to) {
      if (empty(to)) {
        error("Slash.relative -- to nothing?", rel, to);
        return rel;
      }
      rel = Slash.resolve(rel);
      if (!Slash.isAbsolute(rel)) {
        return rel;
      }
      if (Slash.resolve(to) === rel) {
        return '.';
      }
      return Slash.path(path.relative(Slash.resolve(to), rel));
    };

    Slash.fileUrl = function(p) {
      return "file://" + (Slash.encode(Slash.resolve(p)));
    };

    Slash.samePath = function(a, b) {
      return Slash.resolve(a) === Slash.resolve(b);
    };

    Slash.escape = function(p) {
      return p.replace(/([\`"])/g, '\\$1');
    };

    Slash.encode = function(p) {
      p = encodeURI(p);
      p = p.replace(/\#/g, "%23");
      p = p.replace(/\&/g, "%26");
      return p = p.replace(/\'/g, "%27");
    };

    Slash.pkg = function(p) {
      var ref1;
      if ((p != null ? p.length : void 0) != null) {
        while (p.length && ((ref1 = this.removeDrive(p)) !== '.' && ref1 !== '/' && ref1 !== '')) {
          if (Slash.dirExists(Slash.join(p, '.git'))) {
            return Slash.resolve(p);
          }
          if (Slash.fileExists(Slash.join(p, 'package.noon'))) {
            return Slash.resolve(p);
          }
          if (Slash.fileExists(Slash.join(p, 'package.json'))) {
            return Slash.resolve(p);
          }
          p = Slash.dirname(p);
        }
      }
      return null;
    };

    Slash.exists = function(p) {
      var stat;
      if (p == null) {
        return false;
      }
      try {
        p = Slash.resolve(p);
        if (stat = fs.statSync(p)) {
          fs.accessSync(p, fs.R_OK);
          return stat;
        }
      } catch (error1) {
        return null;
      }
      return null;
    };

    Slash.isWritable = function(p) {
      try {
        fs.accessSync(Slash.resolve(p), fs.R_OK | fs.W_OK);
        return true;
      } catch (error1) {
        return false;
      }
    };

    Slash.fileExists = function(p) {
      var stat;
      if (stat = Slash.exists(p)) {
        if (stat.isFile()) {
          return stat;
        }
      }
    };

    Slash.dirExists = function(p) {
      var stat;
      if (stat = Slash.exists(p)) {
        if (stat.isDirectory()) {
          return stat;
        }
      }
    };

    Slash.isDir = function(p) {
      return this.dirExists(p);
    };

    Slash.isFile = function(p) {
      return this.fileExists(p);
    };

    return Slash;

  })();

  module.exports = Slash;

}).call(this);
