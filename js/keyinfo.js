// Generated by CoffeeScript 1.12.7

/*
000   000  00000000  000   000  000  000   000  00000000   0000000   
000  000   000        000 000   000  0000  000  000       000   000  
0000000    0000000     00000    000  000 0 000  000000    000   000  
000  000   000          000     000  000  0000  000       000   000  
000   000  00000000     000     000  000   000  000        0000000
 */

(function() {
  var Keyinfo, ansiKey, keycode,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  keycode = require('keycode');

  ansiKey = require('ansi-keycode');

  Keyinfo = (function() {
    function Keyinfo() {}

    Keyinfo.forEvent = function(event) {
      var combo;
      combo = Keyinfo.comboForEvent(event);
      return {
        mod: Keyinfo.modifiersForEvent(event),
        key: Keyinfo.keynameForEvent(event),
        char: Keyinfo.characterForEvent(event),
        combo: combo,
        short: Keyinfo.short(combo)
      };
    };

    Keyinfo.modifierNames = ['shift', 'ctrl', 'alt', 'command'];

    Keyinfo.modifierChars = ['⌂', '⌃', '⌥', '⌘'];

    Keyinfo.iconKeyNames = ['shift', 'ctrl', 'alt', 'command', 'backspace', 'delete', 'home', 'end', 'page up', 'page down', 'return', 'enter', 'up', 'down', 'left', 'right', 'tab', 'click'];

    Keyinfo.iconKeyChars = ['⌂', '⌃', '⌥', '⌘', '⌫', '⌦', '↖', '↘', '⇞', '⇟', '↩', '↩', '↑', '↓', '←', '→', '⭲', '🖯'];

    Keyinfo.forCombo = function(combo) {
      var c, char, j, key, len, mods, ref;
      mods = [];
      char = null;
      ref = combo.split('+');
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (this.isModifier(c)) {
          mods.push(c);
        } else {
          key = c;
          if (c.length === 1) {
            char = c;
          }
        }
      }
      return {
        mod: mods.join('+'),
        key: key,
        combo: combo,
        char: char
      };
    };

    Keyinfo.isModifier = function(keyname) {
      return indexOf.call(this.modifierNames, keyname) >= 0;
    };

    Keyinfo.modifiersForEvent = function(event) {
      var mods;
      mods = [];
      if (event.metaKey) {
        mods.push('command');
      }
      if (event.altKey) {
        mods.push('alt');
      }
      if (event.ctrlKey) {
        mods.push('ctrl');
      }
      if (event.shiftKey) {
        mods.push('shift');
      }
      return mods.join('+');
    };

    Keyinfo.comboForEvent = function(event) {
      var join, key;
      join = function() {
        var args;
        args = [].slice.call(arguments, 0);
        args = args.filter(function(e) {
          return e != null ? e.length : void 0;
        });
        return args.join('+');
      };
      key = Keyinfo.keynameForEvent(event);
      if (indexOf.call(Keyinfo.modifierNames, key) < 0) {
        return join(Keyinfo.modifiersForEvent(event), key);
      }
      return "";
    };

    Keyinfo.keynameForEvent = function(event) {
      var name;
      name = keycode(event);
      if (name == null) {
        switch (event.code) {
          case 'NumpadEqual':
            return 'numpad =';
          case 'Numpad5':
            return 'numpad 5';
        }
      }
      if (name === "left command" || name === "right command" || name === "ctrl" || name === "alt" || name === "shift") {
        return "";
      }
      return name;
    };

    Keyinfo.characterForEvent = function(event) {
      var ansi, ref;
      ansi = ansiKey(event);
      if (ansi == null) {
        return null;
      }
      if (ansi.length !== 1) {
        return null;
      }
      if ((ref = this.modifiersForEvent(event)) !== "" && ref !== "shift") {
        return null;
      }
      if (/f\d{1,2}/.test(this.keynameForEvent(event))) {
        return null;
      }
      return ansi;
    };

    Keyinfo.short = function(combo) {
      var i, j, ref;
      combo = combo.toLowerCase();
      for (i = j = 0, ref = this.iconKeyNames.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        combo = combo.replace(new RegExp(this.iconKeyNames[i], 'gi'), this.iconKeyChars[i]);
      }
      combo = combo.replace(/\+/g, '');
      return combo.toUpperCase();
    };

    return Keyinfo;

  })();

  module.exports = Keyinfo;

}).call(this);
