  /*
  000   000  00000000  000   000  000  000   000  00000000   0000000   
  000  000   000        000 000   000  0000  000  000       000   000  
  0000000    0000000     00000    000  000 0 000  000000    000   000  
  000  000   000          000     000  000  0000  000       000   000  
  000   000  00000000     000     000  000   000  000        0000000   
  */
var Keyinfo, ansiKey, keycode, os,
  indexOf = [].indexOf;

keycode = require('keycode');

ansiKey = require('ansi-keycode');

os = require('os');

Keyinfo = (function() {
  class Keyinfo {
    static forEvent(event) {
      var combo;
      combo = Keyinfo.comboForEvent(event);
      return {
        mod: Keyinfo.modifiersForEvent(event),
        key: Keyinfo.keynameForEvent(event),
        char: Keyinfo.characterForEvent(event),
        combo: combo,
        short: Keyinfo.short(combo)
      };
    }

    static forCombo(combo) {
      var c, char, j, key, len, mods, ref;
      mods = [];
      char = null;
      ref = combo.split('+');
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (this.isModifier(c)) {
          mods.push(c);
        } else {
          key = c;
          if (c.length === 1) { // does this work?
            char = c;
          }
        }
      }
      return {
        mod: mods.join('+'),
        key: key,
        combo: combo,
        char: char
      };
    }

    static isModifier(keyname) {
      return indexOf.call(this.modifierNames, keyname) >= 0;
    }

    static modifiersForEvent(event) {
      var mods;
      mods = [];
      if (event.metaKey) {
        mods.push('command');
      }
      if (event.altKey) {
        mods.push('alt');
      }
      if (event.ctrlKey) {
        mods.push('ctrl');
      }
      if (event.shiftKey) {
        mods.push('shift');
      }
      return mods.join('+');
    }

    static comboForEvent(event) {
      var join, key;
      join = function() {
        var args;
        args = [].slice.call(arguments, 0);
        args = args.filter(function(e) {
          return e != null ? e.length : void 0;
        });
        return args.join('+');
      };
      key = Keyinfo.keynameForEvent(event);
      if (indexOf.call(Keyinfo.modifierNames, key) < 0) {
        return join(Keyinfo.modifiersForEvent(event), key);
      }
      return '';
    }

    static convertCmdCtrl(combo) {
      var index;
      index = combo.indexOf('cmdctrl');
      if (index >= 0) {
        if (os.platform() === 'darwin') {
          combo = combo.replace('cmdctrl', 'command');
          combo = combo.replace('alt+command', 'command+alt');
        } else {
          combo = combo.replace('cmdctrl', 'ctrl');
        }
      }
      return combo;
    }

    static keynameForEvent(event) {
      var name;
      name = keycode(event);
      if (name == null) {
        switch (event.code) {
          case 'NumpadEqual':
            return 'numpad =';
          case 'Numpad5':
            return 'numpad 5';
        }
      }
      if (name === 'left command' || name === 'right command' || name === 'ctrl' || name === 'alt' || name === 'shift') {
        return '';
      }
      return name;
    }

    static characterForEvent(event) {
      var ansi, ref;
      ansi = ansiKey(event);
      if (ansi == null) {
        return null;
      }
      if (ansi.length !== 1) {
        return null;
      }
      if ((ref = this.modifiersForEvent(event)) !== '' && ref !== 'shift') {
        return null;
      }
      if (/f\d{1,2}/.test(this.keynameForEvent(event))) {
        return null;
      }
      return ansi;
    }

    static short(combo) {
      var i, j, ref;
      combo = this.convertCmdCtrl(combo.toLowerCase());
      for (i = j = 0, ref = this.iconKeyNames.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        combo = combo.replace(new RegExp(this.iconKeyNames[i], 'gi'), this.iconKeyChars[i]);
      }
      combo = combo.replace(/\+/g, '');
      return combo.toUpperCase();
    }

  };

  Keyinfo.modifierNames = ['shift', 'ctrl', 'alt', 'command'];

  Keyinfo.modifierChars = ['⌂', '⌃', '⌥', '⌘'];

  Keyinfo.iconKeyNames = ['shift', 'ctrl', 'alt', 'command', 'backspace', 'delete', 'home', 'end', 'page up', 'page down', 'return', 'enter', 'up', 'down', 'left', 'right', 'tab', 'click'];

  Keyinfo.iconKeyChars = ['⌂', '⌃', '⌥', '⌘', '⌫', '⌦', '↖', '↘', '⇞', '⇟', '↩', '↩', '↑', '↓', '←', '→', '⭲', '🖯'];

  return Keyinfo;

}).call(this);

module.exports = Keyinfo;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/keyinfo.coffee