  /*
  000   000  00000000  000   000  000  000   000  00000000   0000000   
  000  000   000        000 000   000  0000  000  000       000   000  
  0000000    0000000     00000    000  000 0 000  000000    000   000  
  000  000   000          000     000  000  0000  000       000   000  
  000   000  00000000     000     000  000   000  000        0000000   
  */
var Keyinfo, ansiKey, keycode, os,
  indexOf = [].indexOf;

keycode = require('keycode');

ansiKey = require('ansi-keycode');

os = require('os');

Keyinfo = (function() {
  class Keyinfo {
    static forEvent(event) {
      var combo;
      combo = Keyinfo.comboForEvent(event);
      return {
        mod: Keyinfo.modifiersForEvent(event),
        key: Keyinfo.keynameForEvent(event),
        char: Keyinfo.characterForEvent(event),
        combo: combo,
        short: Keyinfo.short(combo)
      };
    }

    static forCombo(combo) {
      var c, char, j, key, len, mods, ref;
      mods = [];
      char = null;
      ref = combo.split('+');
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (this.isModifier(c)) {
          mods.push(c);
        } else {
          key = c;
          if (c.length === 1) { // does this work?
            char = c;
          }
        }
      }
      return {
        mod: mods.join('+'),
        key: key,
        combo: combo,
        char: char
      };
    }

    static isModifier(keyname) {
      return indexOf.call(this.modifierNames, keyname) >= 0;
    }

    static modifiersForEvent(event) {
      var mods;
      mods = [];
      if (event.metaKey) {
        mods.push('command');
      }
      if (event.altKey) {
        mods.push('alt');
      }
      if (event.ctrlKey) {
        mods.push('ctrl');
      }
      if (event.shiftKey) {
        mods.push('shift');
      }
      return mods.join('+');
    }

    static comboForEvent(event) {
      var join, key;
      join = function() {
        var args;
        args = [].slice.call(arguments, 0);
        args = args.filter(function(e) {
          return e != null ? e.length : void 0;
        });
        return args.join('+');
      };
      key = Keyinfo.keynameForEvent(event);
      if (indexOf.call(Keyinfo.modifierNames, key) < 0) {
        return join(Keyinfo.modifiersForEvent(event), key);
      }
      return '';
    }

    static convertCmdCtrl(combo) {
      var index;
      index = combo.indexOf('cmdctrl');
      if (index >= 0) {
        if (os.platform() === 'darwin') {
          combo = combo.replace('cmdctrl', 'command');
          combo = combo.replace('alt+command', 'command+alt');
        } else {
          combo = combo.replace('cmdctrl', 'ctrl');
        }
      }
      return combo;
    }

    static keynameForEvent(event) {
      var name;
      name = keycode(event);
      if (name == null) {
        switch (event.code) {
          case 'NumpadEqual':
            return 'numpad =';
          case 'Numpad5':
            return 'numpad 5';
        }
      }
      if (name === 'left command' || name === 'right command' || name === 'ctrl' || name === 'alt' || name === 'shift') {
        return '';
      }
      return name;
    }

    static characterForEvent(event) {
      var ansi, ref;
      ansi = ansiKey(event);
      if (ansi == null) {
        return null;
      }
      if (ansi.length !== 1) {
        return null;
      }
      if ((ref = this.modifiersForEvent(event)) !== '' && ref !== 'shift') {
        return null;
      }
      if (/f\d{1,2}/.test(this.keynameForEvent(event))) {
        return null;
      }
      return ansi;
    }

    static short(combo) {
      var i, j, ref;
      combo = this.convertCmdCtrl(combo.toLowerCase());
      for (i = j = 0, ref = this.iconKeyNames.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        combo = combo.replace(new RegExp(this.iconKeyNames[i], 'gi'), this.iconKeyChars[i]);
      }
      combo = combo.replace(/\+/g, '');
      return combo.toUpperCase();
    }

  };

  Keyinfo.modifierNames = ['shift', 'ctrl', 'alt', 'command'];

  Keyinfo.modifierChars = ['⌂', '⌃', '⌥', '⌘'];

  Keyinfo.iconKeyNames = ['shift', 'ctrl', 'alt', 'command', 'backspace', 'delete', 'home', 'end', 'page up', 'page down', 'return', 'enter', 'up', 'down', 'left', 'right', 'tab', 'click'];

  Keyinfo.iconKeyChars = [
    '⌂',
    '⌃',
    '⌥',
    '⌘',
    '⌫',
    '⌦',
    '↖',
    '↘',
    '⇞',
    '⇟',
    '↩',
    '↩',
    '↑',
    '↓',
    '←',
    '→',
    '⤠',
    '⍝' // '⭲', '🖯']
  ];

  return Keyinfo;

}).call(this);

module.exports = Keyinfo;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5aW5mby5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIuLi9jb2ZmZWUva2V5aW5mby5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFBQSxJQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUE7RUFBQTs7QUFRQSxPQUFBLEdBQVUsT0FBQSxDQUFRLFNBQVI7O0FBQ1YsT0FBQSxHQUFVLE9BQUEsQ0FBUSxjQUFSOztBQUNWLEVBQUEsR0FBVSxPQUFBLENBQVEsSUFBUjs7QUFFSjtFQUFOLE1BQUEsUUFBQTtJQUVlLE9BQVYsUUFBVSxDQUFDLEtBQUQsQ0FBQTtBQUNQLFVBQUE7TUFBQSxLQUFBLEdBQVEsT0FBQyxDQUFBLGFBQUQsQ0FBa0IsS0FBbEI7YUFDUjtRQUFBLEdBQUEsRUFBTyxPQUFDLENBQUEsaUJBQUQsQ0FBbUIsS0FBbkIsQ0FBUDtRQUNBLEdBQUEsRUFBTyxPQUFDLENBQUEsZUFBRCxDQUFtQixLQUFuQixDQURQO1FBRUEsSUFBQSxFQUFPLE9BQUMsQ0FBQSxpQkFBRCxDQUFtQixLQUFuQixDQUZQO1FBR0EsS0FBQSxFQUFPLEtBSFA7UUFJQSxLQUFBLEVBQU8sT0FBQyxDQUFBLEtBQUQsQ0FBTyxLQUFQO01BSlA7SUFGTzs7SUFjQSxPQUFWLFFBQVUsQ0FBQyxLQUFELENBQUE7QUFFUCxVQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBO01BQUEsSUFBQSxHQUFPO01BQ1AsSUFBQSxHQUFPO0FBQ1A7TUFBQSxLQUFBLHFDQUFBOztRQUNJLElBQUcsSUFBQyxDQUFBLFVBQUQsQ0FBWSxDQUFaLENBQUg7VUFDSSxJQUFJLENBQUMsSUFBTCxDQUFVLENBQVYsRUFESjtTQUFBLE1BQUE7VUFHSSxHQUFBLEdBQU07VUFDTixJQUFZLENBQUMsQ0FBQyxNQUFGLEtBQVksQ0FBeEI7WUFBQSxJQUFBLEdBQU8sRUFBUDtXQUpK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SCxFQUEySCxNQUEzSCxFQUFtSSxNQUFuSSxFQUEySSxPQUEzSSxFQUFvSixLQUFwSixFQUEySixPQUEzSjs7RUFDakIsT0FBQyxDQUFBLFlBQUQsR0FBaUI7SUFBQyxHQUFEO0lBQU0sR0FBTjtJQUFXLEdBQVg7SUFBZ0IsR0FBaEI7SUFBcUIsR0FBckI7SUFBMEIsR0FBMUI7SUFBK0IsR0FBL0I7SUFBb0MsR0FBcEM7SUFBeUMsR0FBekM7SUFBOEMsR0FBOUM7SUFBbUQsR0FBbkQ7SUFBd0QsR0FBeEQ7SUFBNkQsR0FBN0Q7SUFBa0UsR0FBbEU7SUFBdUUsR0FBdkU7SUFBNEUsR0FBNUU7SUFBaUYsR0FBakY7SUFBc0YsR0FBdEY7Ozs7Ozs7QUE4RXJCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICBcbjAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgICAwMDAwMDAwICAgICAwMDAwMCAgICAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwICAgIDAwMCAgIDAwMCAgXG4wMDAgIDAwMCAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwMDAwMCAgIFxuIyMjXG5cbmtleWNvZGUgPSByZXF1aXJlICdrZXljb2RlJ1xuYW5zaUtleSA9IHJlcXVpcmUgJ2Fuc2kta2V5Y29kZSdcbm9zICAgICAgPSByZXF1aXJlICdvcydcblxuY2xhc3MgS2V5aW5mb1xuICAgIFxuICAgIEBmb3JFdmVudDogKGV2ZW50KSA9PlxuICAgICAgICBjb21ibyA9IEBjb21ib0ZvckV2ZW50ICAgIGV2ZW50XG4gICAgICAgIG1vZDogICBAbW9kaWZpZXJzRm9yRXZlbnQgZXZlbnRcbiAgICAgICAga2V5OiAgIEBrZXluYW1lRm9yRXZlbnQgICBldmVudFxuICAgICAgICBjaGFyOiAgQGNoYXJhY3RlckZvckV2ZW50IGV2ZW50XG4gICAgICAgIGNvbWJvOiBjb21ib1xuICAgICAgICBzaG9ydDogQHNob3J0IGNvbWJvXG4gICAgXG4gICAgQG1vZGlmaWVyTmFtZXMgPSBbJ3NoaWZ0JywgJ2N0cmwnLCAnYWx0JywgJ2NvbW1hbmQnXSBcbiAgICBAbW9kaWZpZXJDaGFycyA9IFsn4oyCJywgJ+KMgycsICfijKUnLCAn4oyYJ11cbiAgICBcbiAgICBAaWNvbktleU5hbWVzICA9IFsnc2hpZnQnLCAnY3RybCcsICdhbHQnLCAnY29tbWFuZCcsICdiYWNrc3BhY2UnLCAnZGVsZXRlJywgJ2hvbWUnLCAnZW5kJywgJ3BhZ2UgdXAnLCAncGFnZSBkb3duJywgJ3JldHVybicsICdlbnRlcicsICd1cCcsICdkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndGFiJywgJ2NsaWNrJ11cbiAgICBAaWNvbktleUNoYXJzICA9IFsn4oyCJywgJ+KMgycsICfijKUnLCAn4oyYJywgJ+KMqycsICfijKYnLCAn4oaWJywgJ+KGmCcsICfih54nLCAn4oefJywgJ+KGqScsICfihqknLCAn4oaRJywgJ+KGkycsICfihpAnLCAn4oaSJywgJ+KkoCcsICfijZ0nXSAjICfirbInLCAn8J+WryddXG5cbiAgICBAZm9yQ29tYm86IChjb21ibykgLT5cbiAgICAgICAgXG4gICAgICAgIG1vZHMgPSBbXVxuICAgICAgICBjaGFyID0gbnVsbFxuICAgICAgICBmb3IgYyBpbiBjb21iby5zcGxpdCAnKydcbiAgICAgICAgICAgIGlmIEBpc01vZGlmaWVyIGNcbiAgICAgICAgICAgICAgICBtb2RzLnB1c2ggYyBcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBrZXkgPSBjXG4gICAgICAgICAgICAgICAgY2hhciA9IGMgaWYgYy5sZW5ndGggPT0gMSAjIGRvZXMgdGhpcyB3b3JrP1xuICAgICAgICBtb2Q6ICAgbW9kcy5qb2luICcrJ1xuICAgICAgICBrZXk6ICAga2V5XG4gICAgICAgIGNvbWJvOiBjb21ibyBcbiAgICAgICAgY2hhcjogIGNoYXJcbiAgICBcbiAgICBAaXNNb2RpZmllcjogKGtleW5hbWUpIC0+IGtleW5hbWUgaW4gQG1vZGlmaWVyTmFtZXNcblxuICAgIEBtb2RpZmllcnNGb3JFdmVudDogKGV2ZW50KSAtPiBcbiAgICAgICAgXG4gICAgICAgIG1vZHMgPSBbXVxuICAgICAgICBtb2RzLnB1c2ggJ2NvbW1hbmQnIGlmIGV2ZW50Lm1ldGFLZXlcbiAgICAgICAgbW9kcy5wdXNoICdhbHQnICAgICBpZiBldmVudC5hbHRLZXlcbiAgICAgICAgbW9kcy5wdXNoICdjdHJsJyAgICBpZiBldmVudC5jdHJsS2V5IFxuICAgICAgICBtb2RzLnB1c2ggJ3NoaWZ0JyAgIGlmIGV2ZW50LnNoaWZ0S2V5XG4gICAgICAgIHJldHVybiBtb2RzLmpvaW4gJysnXG4gICAgICAgICAgICAgICAgICAgIFxuICAgIEBjb21ib0ZvckV2ZW50OiAoZXZlbnQpID0+XG4gICAgICAgIFxuICAgICAgICBqb2luID0gLT4gXG4gICAgICAgICAgICBhcmdzID0gW10uc2xpY2UuY2FsbCBhcmd1bWVudHMsIDBcbiAgICAgICAgICAgIGFyZ3MgPSBhcmdzLmZpbHRlciAoZSkgLT4gZT8ubGVuZ3RoXG4gICAgICAgICAgICBhcmdzLmpvaW4gJysnXG4gICAgXG4gICAgICAgIGtleSA9IEBrZXluYW1lRm9yRXZlbnQgZXZlbnRcbiAgICAgICAgaWYga2V5IG5vdCBpbiBAbW9kaWZpZXJOYW1lc1xuICAgICAgICAgICAgcmV0dXJuIGpvaW4gQG1vZGlmaWVyc0ZvckV2ZW50KGV2ZW50KSwga2V5XG4gICAgICAgIHJldHVybiAnJ1xuXG4gICAgQGNvbnZlcnRDbWRDdHJsOiAoY29tYm8pIC0+XG4gICAgICAgIFxuICAgICAgICBpbmRleCA9IGNvbWJvLmluZGV4T2YgJ2NtZGN0cmwnXG4gICAgICAgIGlmIGluZGV4ID49IDBcbiAgICAgICAgICAgIGlmIG9zLnBsYXRmb3JtKCkgPT0gJ2RhcndpbidcbiAgICAgICAgICAgICAgICBjb21ibyA9IGNvbWJvLnJlcGxhY2UgJ2NtZGN0cmwnLCAnY29tbWFuZCdcbiAgICAgICAgICAgICAgICBjb21ibyA9IGNvbWJvLnJlcGxhY2UgJ2FsdCtjb21tYW5kJywgJ2NvbW1hbmQrYWx0J1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbWJvID0gY29tYm8ucmVwbGFjZSAnY21kY3RybCcsICdjdHJsJyAgICAgICAgICAgIFxuICAgICAgICBjb21ib1xuICAgICAgICAgICAgICAgIFxuICAgIEBrZXluYW1lRm9yRXZlbnQ6IChldmVudCkgLT5cbiAgICAgICAgXG4gICAgICAgIG5hbWUgPSBrZXljb2RlIGV2ZW50XG4gICAgICAgIGlmIG5vdCBuYW1lP1xuICAgICAgICAgICAgc3dpdGNoIGV2ZW50LmNvZGVcbiAgICAgICAgICAgICAgICB3aGVuICdOdW1wYWRFcXVhbCcgdGhlbiByZXR1cm4gJ251bXBhZCA9J1xuICAgICAgICAgICAgICAgIHdoZW4gJ051bXBhZDUnICAgICB0aGVuIHJldHVybiAnbnVtcGFkIDUnXG4gICAgICAgIHJldHVybiAnJyBpZiBuYW1lIGluIFsnbGVmdCBjb21tYW5kJywgJ3JpZ2h0IGNvbW1hbmQnLCAnY3RybCcsICdhbHQnLCAnc2hpZnQnXVxuICAgICAgICBuYW1lXG5cbiAgICBAY2hhcmFjdGVyRm9yRXZlbnQ6IChldmVudCkgLT5cbiAgICAgICAgXG4gICAgICAgIGFuc2kgPSBhbnNpS2V5IGV2ZW50IFxuICAgICAgICByZXR1cm4gbnVsbCBpZiBub3QgYW5zaT8gXG4gICAgICAgIHJldHVybiBudWxsIGlmIGFuc2kubGVuZ3RoICE9IDEgXG4gICAgICAgIHJldHVybiBudWxsIGlmIEBtb2RpZmllcnNGb3JFdmVudChldmVudCkgbm90IGluIFsnJywgJ3NoaWZ0J11cbiAgICAgICAgcmV0dXJuIG51bGwgaWYgL2ZcXGR7MSwyfS8udGVzdCBAa2V5bmFtZUZvckV2ZW50IGV2ZW50XG4gICAgICAgIGFuc2lcbiAgICAgICAgXG4gICAgQHNob3J0OiAoY29tYm8pIC0+XG4gICAgICAgIFxuICAgICAgICBjb21ibyA9IEBjb252ZXJ0Q21kQ3RybCBjb21iby50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGZvciBpIGluIFswLi4uQGljb25LZXlOYW1lcy5sZW5ndGhdXG4gICAgICAgICAgICBjb21ibyA9IGNvbWJvLnJlcGxhY2UgbmV3IFJlZ0V4cChAaWNvbktleU5hbWVzW2ldLCAnZ2knKSwgQGljb25LZXlDaGFyc1tpXVxuICAgICAgICBjb21ibyA9IGNvbWJvLnJlcGxhY2UgL1xcKy9nLCAnJ1xuICAgICAgICBjb21iby50b1VwcGVyQ2FzZSgpXG5cbm1vZHVsZS5leHBvcnRzID0gS2V5aW5mb1xuIl19
//# sourceURL=../coffee/keyinfo.coffee