(function() {
  /*
   0000000  000000000   0000000   00000000   00000000  
  000          000     000   000  000   000  000       
  0000000      000     000   000  0000000    0000000   
       000     000     000   000  000   000  000       
  0000000      000      0000000   000   000  00000000  
  */
  var Emitter, Store, _, atomic, error, first, fs, log, noon, post, sds, slash,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ({noon, post, atomic, first, sds, slash, fs, log, error, _} = require('./kxk'));

  Emitter = require('events');

  Store = (function() {
    // simple key value store with delayed saving to userData folder
    // does sync changes between processes
    class Store extends Emitter {
      static addStore(store) {
        if (_.isEmpty(this.stores)) {
          post.onGet('store', (name, action) => {
            var ref;
            switch (action) {
              case 'data':
                return (ref = this.stores[name]) != null ? ref.data : void 0;
            }
          });
        }
        return this.stores[store.name] = store;
      }

      constructor(name, opt = {}) {
        var app, electron, ref;
        super();
        
        //  0000000   0000000   000   000  00000000
        // 000       000   000  000   000  000     
        // 0000000   000000000   000 000   0000000 
        //      000  000   000     000     000     
        // 0000000   000   000      0      00000000
        this.save = this.save.bind(this);
        this.name = name;
        if (opt.separator == null) {
          opt.separator = ':';
        }
        if (opt.timeout == null) {
          opt.timeout = 4000;
        }
        if (!this.name) {
          return error('no name for store?');
        }
        electron = require('electron');
        this.app = electron.app;
        this.sep = opt.separator;
        if (this.app) {
          Store.addStore(this);
          this.timer = null;
          this.file = (ref = opt.file) != null ? ref : (this.app != null) && slash.join(this.app.getPath('userData'), `${this.name}.noon`);
          this.timeout = opt.timeout;
          post.on('store', (name, action, ...args) => {
            if (this.name !== name) {
              return;
            }
            switch (action) {
              case 'set':
                this.set.apply(this, args);
                break;
              case 'get':
                this.get.apply(this, args);
                break;
              case 'del':
                this.del.apply(this, args);
                break;
              case 'clear':
                this.clear();
                break;
              case 'save':
                this.save();
            }
            return this;
          });
        } else {
          app = electron.remote.app;
          this.file = slash.join(app.getPath('userData'), `${this.name}.noon`);
          post.on('store', (name, action, ...args) => {
            if (this.name !== name) {
              return;
            }
            switch (action) {
              case 'data':
                return this.data = args[0];
              case 'set':
                return sds.set(this.data, this.keypath(args[0]), args[1]);
              case 'get':
                return sds.get(this.data, this.keypath(args[0]), args[1]);
              case 'del':
                return sds.set(this.data, this.keypath(args[0]));
            }
          });
        }
        this.data = this.load();
        if (opt.defaults != null) {
          this.data = _.defaults(this.data, opt.defaults);
        }
      }

      keypath(key) {
        return key.split(this.sep);
      }

      
      //  0000000   00000000  000000000
      // 000        000          000   
      // 000  0000  0000000      000   
      // 000   000  000          000   
      //  0000000   00000000     000   
      get(key, value) {
        if ((key != null ? key.split : void 0) == null) {
          return value;
        }
        return _.clone(sds.get(this.data, this.keypath(key), value));
      }

      
      //  0000000  00000000  000000000  
      // 000       000          000     
      // 0000000   0000000      000     
      //      000  000          000     
      // 0000000   00000000     000     
      set(key, value) {
        if ((key != null ? key.split : void 0) == null) {
          return;
        }
        if (_.isEqual(this.get(key), value)) {
          return;
        }
        sds.set(this.data, this.keypath(key), value);
        if (this.app) {
          clearTimeout(this.timer);
          this.timer = setTimeout(this.save, this.timeout);
          return post.toWins('store', this.name, 'set', key, value);
        } else {
          return post.toMain('store', this.name, 'set', key, value);
        }
      }

      del(key) {
        return this.set(key);
      }

      clear() {
        this.data = {};
        if (this.app) {
          if (this.timer) {
            clearTimeout(this.timer);
          }
          return post.toWins('store', this.name, 'data', {});
        } else {
          return post.toMain('store', this.name, 'clear');
        }
      }

      
      // 000       0000000    0000000   0000000    
      // 000      000   000  000   000  000   000  
      // 000      000   000  000000000  000   000  
      // 000      000   000  000   000  000   000  
      // 0000000   0000000   000   000  0000000    
      reload() {
        if (this.app) {
          this.data = this.load();
          return post.toWins('store', this.name, 'data', this.data);
        }
      }

      load() {
        var err;
        if (this.app) {
          try {
            return noon.load(this.file);
          } catch (error1) {
            err = error1;
            return {};
          }
        } else {
          return post.get('store', this.name, 'data');
        }
      }

      save() {
        var err;
        boundMethodCheck(this, Store);
        if (this.app) {
          if (!this.file) {
            return;
          }
          if (_.isEmpty(this.data)) {
            return;
          }
          this.emit('willSave');
          clearTimeout(this.timer);
          this.timer = null;
          try {
            atomic.sync(this.file, noon.stringify(this.data, {
              indent: 2,
              maxalign: 8
            }) + '\n');
          } catch (error1) {
            err = error1;
            error(`store.save -- can't save to '${this.file}:`, err);
          }
          return this.emit('didSave');
        } else {
          return post.toMain('store', this.name, 'save');
        }
      }

    };

    Store.stores = {};

    return Store;

  }).call(this);

  module.exports = Store;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZS9zdG9yZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQTs7Ozs7OztBQUFBLE1BQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxLQUFBO0lBQUE7O0VBUUEsQ0FBQSxDQUFFLElBQUYsRUFBUSxJQUFSLEVBQWMsTUFBZCxFQUFzQixLQUF0QixFQUE2QixHQUE3QixFQUFrQyxLQUFsQyxFQUF5QyxFQUF6QyxFQUE2QyxHQUE3QyxFQUFrRCxLQUFsRCxFQUF5RCxDQUF6RCxDQUFBLEdBQStELE9BQUEsQ0FBUSxPQUFSLENBQS9EOztFQUVBLE9BQUEsR0FBVSxPQUFBLENBQVEsUUFBUjs7RUFLSjs7O0lBQU4sTUFBQSxNQUFBLFFBQW9CLFFBQXBCO01BR2UsT0FBVixRQUFVLENBQUMsS0FBRCxDQUFBO1FBRVAsSUFBRyxDQUFDLENBQUMsT0FBRixDQUFVLElBQUMsQ0FBQSxNQUFYLENBQUg7VUFDSSxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQVgsRUFBb0IsQ0FBQyxJQUFELEVBQU8sTUFBUCxDQUFBLEdBQUE7QUFDaEIsZ0JBQUE7QUFBQSxvQkFBTyxNQUFQO0FBQUEsbUJBQ1MsTUFEVDtBQUVRLDhEQUFvQixDQUFFO0FBRjlCO1VBRGdCLENBQXBCLEVBREo7O2VBTUEsSUFBQyxDQUFBLE1BQU8sQ0FBQSxLQUFLLENBQUMsSUFBTixDQUFSLEdBQXNCO01BUmY7O01BVVgsV0FBYSxDQUFDLElBQUQsRUFBTyxNQUFJLENBQUEsQ0FBWCxDQUFBO0FBRVQsWUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBOzs7Ozs7OztZQW1ISixDQUFBLFdBQUEsQ0FBQTtRQWpISSxJQUFDLENBQUEsSUFBRCxHQUFROztVQUNSLEdB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QUcsSUFBQyxDQUFBLEdBQUo7VUFDSSxJQUFVLENBQUksSUFBQyxDQUFBLElBQWY7QUFBQSxtQkFBQTs7VUFDQSxJQUFVLENBQUMsQ0FBQyxPQUFGLENBQVUsSUFBQyxDQUFBLElBQVgsQ0FBVjtBQUFBLG1CQUFBOztVQUVBLElBQUMsQ0FBQSxJQUFELENBQU0sVUFBTjtVQUVBLFlBQUEsQ0FBYSxJQUFDLENBQUEsS0FBZDtVQUNBLElBQUMsQ0FBQSxLQUFELEdBQVM7QUFFVDtZQUNJLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLElBQWIsRUFBbUIsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFDLENBQUEsSUFBaEIsRUFBc0I7Y0FBQyxNQUFBLEVBQVEsQ0FBVDtjQUFZLFFBQUEsRUFBVTtZQUF0QixDQUF0QixDQUFBLEdBQWdELElBQW5FLEVBREo7V0FBQSxjQUFBO1lBRU07WUFDRixLQUFBLENBQU0sQ0FBQSw2QkFBQSxDQUFBLENBQWdDLElBQUMsQ0FBQSxJQUFqQyxDQUFzQyxDQUF0QyxDQUFOLEVBQWdELEdBQWhELEVBSEo7O2lCQUtBLElBQUMsQ0FBQSxJQUFELENBQU0sU0FBTixFQWRKO1NBQUEsTUFBQTtpQkFnQkksSUFBSSxDQUFDLE1BQUwsQ0FBWSxPQUFaLEVBQXFCLElBQUMsQ0FBQSxJQUF0QixFQUE0QixNQUE1QixFQWhCSjs7TUFERTs7SUFsSVY7O0lBRUksS0FBQyxDQUFBLE1BQUQsR0FBVSxDQUFBOzs7Ozs7RUFtSmQsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUFwS2pCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4gMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgIFxuMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbjAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG4gICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuMDAwMDAwMCAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICBcbiMjI1xuXG57IG5vb24sIHBvc3QsIGF0b21pYywgZmlyc3QsIHNkcywgc2xhc2gsIGZzLCBsb2csIGVycm9yLCBfIH0gPSByZXF1aXJlICcuL2t4aydcblxuRW1pdHRlciA9IHJlcXVpcmUgJ2V2ZW50cydcblxuIyBzaW1wbGUga2V5IHZhbHVlIHN0b3JlIHdpdGggZGVsYXllZCBzYXZpbmcgdG8gdXNlckRhdGEgZm9sZGVyXG4jIGRvZXMgc3luYyBjaGFuZ2VzIGJldHdlZW4gcHJvY2Vzc2VzXG5cbmNsYXNzIFN0b3JlIGV4dGVuZHMgRW1pdHRlclxuXG4gICAgQHN0b3JlcyA9IHt9XG4gICAgQGFkZFN0b3JlOiAoc3RvcmUpIC0+XG5cbiAgICAgICAgaWYgXy5pc0VtcHR5IEBzdG9yZXNcbiAgICAgICAgICAgIHBvc3Qub25HZXQgJ3N0b3JlJywgKG5hbWUsIGFjdGlvbikgPT5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHdoZW4gJ2RhdGEnXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQHN0b3Jlc1tuYW1lXT8uZGF0YVxuICAgIFxuICAgICAgICBAc3RvcmVzW3N0b3JlLm5hbWVdID0gc3RvcmVcblxuICAgIGNvbnN0cnVjdG9yOiAobmFtZSwgb3B0PXt9KSAtPlxuXG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIEBuYW1lID0gbmFtZVxuICAgICAgICBvcHQuc2VwYXJhdG9yID89ICc6J1xuICAgICAgICBvcHQudGltZW91dCAgID89IDQwMDBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBlcnJvciAnbm8gbmFtZSBmb3Igc3RvcmU/JyBpZiBub3QgQG5hbWVcblxuICAgICAgICBlbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuICAgICAgICBAYXBwID0gZWxlY3Ryb24uYXBwXG4gICAgICAgIEBzZXAgPSBvcHQuc2VwYXJhdG9yXG4gICAgICAgIFxuICAgICAgICBpZiBAYXBwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFN0b3JlLmFkZFN0b3JlIEBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQHRpbWVyICAgPSBudWxsXG4gICAgICAgICAgICBAZmlsZSAgICA9IG9wdC5maWxlID8gKEBhcHA/IGFuZCBzbGFzaC5qb2luKEBhcHAuZ2V0UGF0aCgndXNlckRhdGEnKSwgXCIje0BuYW1lfS5ub29uXCIpKVxuICAgICAgICAgICAgQHRpbWVvdXQgPSBvcHQudGltZW91dFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcG9zdC5vbiAnc3RvcmUnLCAobmFtZSwgYWN0aW9uLCBhcmdzLi4uKSA9PlxuICAgICAgICAgICAgICAgIHJldHVybiBpZiBAbmFtZSAhPSBuYW1lXG4gICAgICAgICAgICAgICAgc3dpdGNoIGFjdGlvblxuICAgICAgICAgICAgICAgICAgICB3aGVuICdzZXQnICAgdGhlbiBAc2V0LmFwcGx5IEAsIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgd2hlbiAnZ2V0JyAgIHRoZW4gQGdldC5hcHBseSBALCBhcmdzXG4gICAgICAgICAgICAgICAgICAgIHdoZW4gJ2RlbCcgICB0aGVuIEBkZWwuYXBwbHkgQCwgYXJnc1xuICAgICAgICAgICAgICAgICAgICB3aGVuICdjbGVhcicgdGhlbiBAY2xlYXIoKVxuICAgICAgICAgICAgICAgICAgICB3aGVuICdzYXZlJyAgdGhlbiBAc2F2ZSgpXG4gICAgICAgICAgICAgICAgQFxuICAgICAgICAgICAgICAgIFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFwcCA9IGVsZWN0cm9uLnJlbW90ZS5hcHBcbiAgICAgICAgICAgIEBmaWxlID0gc2xhc2guam9pbiBhcHAuZ2V0UGF0aCgndXNlckRhdGEnKSwgXCIje0BuYW1lfS5ub29uXCJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcG9zdC5vbiAnc3RvcmUnLCAobmFtZSwgYWN0aW9uLCBhcmdzLi4uKSA9PlxuICAgICAgICAgICAgICAgIHJldHVybiBpZiBAbmFtZSAhPSBuYW1lXG4gICAgICAgICAgICAgICAgc3dpdGNoIGFjdGlvblxuICAgICAgICAgICAgICAgICAgICB3aGVuICdkYXRhJyB0aGVuIEBkYXRhID0gYXJnc1swXVxuICAgICAgICAgICAgICAgICAgICB3aGVuICdzZXQnICB0aGVuIHNkcy5zZXQgQGRhdGEsIEBrZXlwYXRoKGFyZ3NbMF0pLCBhcmdzWzFdXG4gICAgICAgICAgICAgICAgICAgIHdoZW4gJ2dldCcgIHRoZW4gc2RzLmdldCBAZGF0YSwgQGtleXBhdGgoYXJnc1swXSksIGFyZ3NbMV1cbiAgICAgICAgICAgICAgICAgICAgd2hlbiAnZGVsJyAgdGhlbiBzZHMuc2V0IEBkYXRhLCBAa2V5cGF0aChhcmdzWzBdKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAZGF0YSA9IEBsb2FkKClcbiAgICAgICAgQGRhdGEgPSBfLmRlZmF1bHRzIEBkYXRhLCBvcHQuZGVmYXVsdHMgaWYgb3B0LmRlZmF1bHRzP1xuXG4gICAga2V5cGF0aDogKGtleSkgLT4ga2V5LnNwbGl0IEBzZXBcbiAgICBcbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAgIDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgICAgIFxuICAgIGdldDogKGtleSwgdmFsdWUpIC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmFsdWUgaWYgbm90IGtleT8uc3BsaXQ/XG4gICAgICAgIF8uY2xvbmUgc2RzLmdldCBAZGF0YSwgQGtleXBhdGgoa2V5KSwgdmFsdWVcbiAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIHNldDogKGtleSwgdmFsdWUpIC0+XG5cbiAgICAgICAgcmV0dXJuIGlmIG5vdCBrZXk/LnNwbGl0P1xuICAgICAgICByZXR1cm4gaWYgXy5pc0VxdWFsIEBnZXQoa2V5KSwgdmFsdWVcbiAgICAgICAgc2RzLnNldCBAZGF0YSwgQGtleXBhdGgoa2V5KSwgdmFsdWVcbiAgICAgICAgaWYgQGFwcFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICAgICAgQHRpbWVyID0gc2V0VGltZW91dCBAc2F2ZSwgQHRpbWVvdXRcbiAgICAgICAgICAgIHBvc3QudG9XaW5zICdzdG9yZScsIEBuYW1lLCAnc2V0Jywga2V5LCB2YWx1ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwb3N0LnRvTWFpbiAnc3RvcmUnLCBAbmFtZSwgJ3NldCcsIGtleSwgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgZGVsOiAoa2V5KSAtPiBAc2V0IGtleVxuICAgIFxuICAgIGNsZWFyOiAtPlxuICAgICAgICBcbiAgICAgICAgQGRhdGEgPSB7fVxuICAgICAgICBcbiAgICAgICAgaWYgQGFwcFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lciBpZiBAdGltZXJcbiAgICAgICAgICAgIHBvc3QudG9XaW5zICdzdG9yZScsIEBuYW1lLCAnZGF0YScsIHt9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBvc3QudG9NYWluICdzdG9yZScsIEBuYW1lLCAnY2xlYXInXG4gICAgICAgIFxuICAgICMgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4gICAgIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICBcbiAgICByZWxvYWQ6IC0+XG4gICAgICAgIGlmIEBhcHBcbiAgICAgICAgICAgIEBkYXRhID0gQGxvYWQoKVxuICAgICAgICAgICAgcG9zdC50b1dpbnMgJ3N0b3JlJywgQG5hbWUsICdkYXRhJywgQGRhdGFcbiAgICBcbiAgICBsb2FkOiAtPlxuICAgICAgICBpZiBAYXBwXG4gICAgICAgICAgICB0cnlcbiAgICAgICAgICAgICAgICBub29uLmxvYWQgQGZpbGVcbiAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgIHt9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBvc3QuZ2V0ICdzdG9yZScsIEBuYW1lLCAnZGF0YSdcbiAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwICAgMDAwICAgICAgMCAgICAgIDAwMDAwMDAwXG5cbiAgICBzYXZlOiA9PlxuICAgICAgICBpZiBAYXBwXG4gICAgICAgICAgICByZXR1cm4gaWYgbm90IEBmaWxlXG4gICAgICAgICAgICByZXR1cm4gaWYgXy5pc0VtcHR5IEBkYXRhXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBlbWl0ICd3aWxsU2F2ZSdcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICAgICAgQHRpbWVyID0gbnVsbFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnlcbiAgICAgICAgICAgICAgICBhdG9taWMuc3luYyBAZmlsZSwgbm9vbi5zdHJpbmdpZnkoQGRhdGEsIHtpbmRlbnQ6IDIsIG1heGFsaWduOiA4fSkrJ1xcbidcbiAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgIGVycm9yIFwic3RvcmUuc2F2ZSAtLSBjYW4ndCBzYXZlIHRvICcje0BmaWxlfTpcIiwgZXJyXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBAZW1pdCAnZGlkU2F2ZSdcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHBvc3QudG9NYWluICdzdG9yZScsIEBuYW1lLCAnc2F2ZScgXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTdG9yZVxuIl19
//# sourceURL=C:/Users/kodi/s/kxk/coffee/store.coffee