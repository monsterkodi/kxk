(function() {
  /*
   0000000  000000000   0000000   00000000   00000000  
  000          000     000   000  000   000  000       
  0000000      000     000   000  0000000    0000000   
       000     000     000   000  000   000  000       
  0000000      000      0000000   000   000  00000000  
  */
  var Emitter, Store, _, atomic, error, first, fs, log, noon, post, sds, slash,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ({noon, post, atomic, first, sds, slash, fs, log, error, _} = require('./kxk'));

  Emitter = require('events');

  Store = (function() {
    // simple key value store with delayed saving to userData folder
    // does sync changes between processes
    class Store extends Emitter {
      static addStore(store) {
        if (_.isEmpty(this.stores)) {
          post.onGet('store', (name, action) => {
            var ref;
            switch (action) {
              case 'data':
                return (ref = this.stores[name]) != null ? ref.data : void 0;
            }
          });
        }
        return this.stores[store.name] = store;
      }

      constructor(name, opt = {}) {
        var app, electron, ref;
        super();
        
        //  0000000   0000000   000   000  00000000
        // 000       000   000  000   000  000     
        // 0000000   000000000   000 000   0000000 
        //      000  000   000     000     000     
        // 0000000   000   000      0      00000000
        this.save = this.save.bind(this);
        this.name = name;
        if (opt.separator == null) {
          opt.separator = ':';
        }
        if (opt.timeout == null) {
          opt.timeout = 4000;
        }
        if (!this.name) {
          return error('no name for store?');
        }
        electron = require('electron');
        this.app = electron.app;
        this.sep = opt.separator;
        if (this.app) {
          Store.addStore(this);
          this.timer = null;
          this.file = (ref = opt.file) != null ? ref : (this.app != null) && slash.join(this.app.getPath('userData'), `${this.name}.noon`);
          this.timeout = opt.timeout;
          post.on('store', (name, action, ...args) => {
            if (this.name !== name) {
              return;
            }
            switch (action) {
              case 'set':
                this.set.apply(this, args);
                break;
              case 'get':
                this.get.apply(this, args);
                break;
              case 'del':
                this.del.apply(this, args);
                break;
              case 'clear':
                this.clear();
                break;
              case 'save':
                this.save();
            }
            return this;
          });
        } else {
          app = electron.remote.app;
          this.file = slash.join(app.getPath('userData'), `${this.name}.noon`);
          post.on('store', (name, action, ...args) => {
            if (this.name !== name) {
              return;
            }
            switch (action) {
              case 'data':
                return this.data = args[0];
              case 'set':
                return sds.set(this.data, this.keypath(args[0]), args[1]);
              case 'get':
                return sds.get(this.data, this.keypath(args[0]), args[1]);
              case 'del':
                return sds.set(this.data, this.keypath(args[0]));
            }
          });
        }
        this.data = this.load();
        if (opt.defaults != null) {
          this.data = _.defaults(this.data, opt.defaults);
        }
      }

      keypath(key) {
        return key.split(this.sep);
      }

      
      //  0000000   00000000  000000000
      // 000        000          000   
      // 000  0000  0000000      000   
      // 000   000  000          000   
      //  0000000   00000000     000   
      get(key, value) {
        if ((key != null ? key.split : void 0) == null) {
          return value;
        }
        return _.clone(sds.get(this.data, this.keypath(key), value));
      }

      
      //  0000000  00000000  000000000  
      // 000       000          000     
      // 0000000   0000000      000     
      //      000  000          000     
      // 0000000   00000000     000     
      set(key, value) {
        if ((key != null ? key.split : void 0) == null) {
          return;
        }
        // return if _.isEqual @get(key), value
        if (this.get(key) === value) {
          return;
        }
        sds.set(this.data, this.keypath(key), value);
        if (this.app) {
          clearTimeout(this.timer);
          this.timer = setTimeout(this.save, this.timeout);
          return post.toWins('store', this.name, 'set', key, value);
        } else {
          return post.toMain('store', this.name, 'set', key, value);
        }
      }

      del(key) {
        return this.set(key);
      }

      clear() {
        this.data = {};
        if (this.app) {
          if (this.timer) {
            clearTimeout(this.timer);
          }
          return post.toWins('store', this.name, 'data', {});
        } else {
          return post.toMain('store', this.name, 'clear');
        }
      }

      
      // 000       0000000    0000000   0000000    
      // 000      000   000  000   000  000   000  
      // 000      000   000  000000000  000   000  
      // 000      000   000  000   000  000   000  
      // 0000000   0000000   000   000  0000000    
      reload() {
        if (this.app) {
          this.data = this.load();
          return post.toWins('store', this.name, 'data', this.data);
        }
      }

      load() {
        var err;
        if (this.app) {
          try {
            return noon.load(this.file);
          } catch (error1) {
            err = error1;
            return {};
          }
        } else {
          return post.get('store', this.name, 'data');
        }
      }

      save() {
        var err;
        boundMethodCheck(this, Store);
        if (this.app) {
          if (!this.file) {
            return;
          }
          if (_.isEmpty(this.data)) {
            return;
          }
          this.emit('willSave');
          clearTimeout(this.timer);
          this.timer = null;
          try {
            atomic.sync(this.file, noon.stringify(this.data, {
              indent: 2,
              maxalign: 8
            }) + '\n');
          } catch (error1) {
            err = error1;
            error(`store.save -- can't save to '${this.file}:`, err);
          }
          return this.emit('didSave');
        } else {
          return post.toMain('store', this.name, 'save');
        }
      }

    };

    Store.stores = {};

    return Store;

  }).call(this);

  module.exports = Store;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/store.coffee