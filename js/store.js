// Generated by CoffeeScript 1.12.7

/*
 0000000  000000000   0000000   00000000   00000000  
000          000     000   000  000   000  000       
0000000      000     000   000  0000000    0000000   
     000     000     000   000  000   000  000       
0000000      000      0000000   000   000  00000000
 */

(function() {
  var Emitter, Store, _, atomic, error, first, fs, log, noon, post, ref, sds, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ref = require('./kxk'), noon = ref.noon, post = ref.post, atomic = ref.atomic, first = ref.first, sds = ref.sds, slash = ref.slash, fs = ref.fs, log = ref.log, error = ref.error, _ = ref._;

  Emitter = require('events');

  Store = (function(superClass) {
    extend(Store, superClass);

    Store.stores = {};

    Store.addStore = function(store) {
      if (_.isEmpty(this.stores)) {
        post.onGet('store', (function(_this) {
          return function(name, action) {
            var ref1;
            switch (action) {
              case 'data':
                return (ref1 = _this.stores[name]) != null ? ref1.data : void 0;
            }
          };
        })(this));
      }
      return this.stores[store.name] = store;
    };

    function Store(name, opt) {
      var app, electron, ref1;
      if (opt == null) {
        opt = {};
      }
      this.save = bind(this.save, this);
      Store.__super__.constructor.call(this);
      this.name = name;
      if (opt.separator == null) {
        opt.separator = ':';
      }
      if (opt.timeout == null) {
        opt.timeout = 4000;
      }
      if (!this.name) {
        return error('no name for store?');
      }
      electron = require('electron');
      this.app = electron.app;
      this.sep = opt.separator;
      if (this.app) {
        Store.addStore(this);
        this.timer = null;
        this.file = (ref1 = opt.file) != null ? ref1 : (this.app != null) && slash.join(this.app.getPath('userData'), this.name + ".noon");
        this.timeout = opt.timeout;
        post.on('store', (function(_this) {
          return function() {
            var action, args, name;
            name = arguments[0], action = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
            if (_this.name !== name) {
              return;
            }
            switch (action) {
              case 'set':
                _this.set.apply(_this, args);
                break;
              case 'get':
                _this.get.apply(_this, args);
                break;
              case 'del':
                _this.del.apply(_this, args);
                break;
              case 'clear':
                _this.clear();
                break;
              case 'save':
                _this.save();
            }
            return _this;
          };
        })(this));
      } else {
        app = electron.remote.app;
        this.file = slash.join(app.getPath('userData'), this.name + ".noon");
        post.on('store', (function(_this) {
          return function() {
            var action, args, name;
            name = arguments[0], action = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
            if (_this.name !== name) {
              return;
            }
            switch (action) {
              case 'data':
                return _this.data = args[0];
              case 'set':
                return sds.set(_this.data, _this.keypath(args[0]), args[1]);
              case 'get':
                return sds.get(_this.data, _this.keypath(args[0]), args[1]);
              case 'del':
                return sds.set(_this.data, _this.keypath(args[0]));
            }
          };
        })(this));
      }
      this.data = this.load();
      if (opt.defaults != null) {
        this.data = _.defaults(this.data, opt.defaults);
      }
    }

    Store.prototype.keypath = function(key) {
      return key.split(this.sep);
    };

    Store.prototype.get = function(key, value) {
      if ((key != null ? key.split : void 0) == null) {
        return value;
      }
      return _.clone(sds.get(this.data, this.keypath(key), value));
    };

    Store.prototype.set = function(key, value) {
      if ((key != null ? key.split : void 0) == null) {
        return;
      }
      if (_.isEqual(this.get(key), value)) {
        return;
      }
      sds.set(this.data, this.keypath(key), value);
      if (this.app) {
        clearTimeout(this.timer);
        this.timer = setTimeout(this.save, this.timeout);
        return post.toWins('store', this.name, 'set', key, value);
      } else {
        return post.toMain('store', this.name, 'set', key, value);
      }
    };

    Store.prototype.del = function(key) {
      return this.set(key);
    };

    Store.prototype.clear = function() {
      this.data = {};
      if (this.app) {
        if (this.timer) {
          clearTimeout(this.timer);
        }
        return post.toWins('store', this.name, 'data', {});
      } else {
        return post.toMain('store', this.name, 'clear');
      }
    };

    Store.prototype.reload = function() {
      if (this.app) {
        this.data = this.load();
        return post.toWins('store', this.name, 'data', this.data);
      }
    };

    Store.prototype.load = function() {
      var err;
      if (this.app) {
        try {
          return noon.load(this.file);
        } catch (error1) {
          err = error1;
          return {};
        }
      } else {
        return post.get('store', this.name, 'data');
      }
    };

    Store.prototype.save = function() {
      var err;
      if (this.app) {
        if (!this.file) {
          return;
        }
        if (_.isEmpty(this.data)) {
          return;
        }
        this.emit('willSave');
        clearTimeout(this.timer);
        this.timer = null;
        try {
          atomic.sync(this.file, noon.stringify(this.data, {
            indent: 2,
            maxalign: 8
          }) + '\n');
        } catch (error1) {
          err = error1;
          error("store.save -- can't save to '" + this.file + ":", err);
        }
        return this.emit('didSave');
      } else {
        return post.toMain('store', this.name, 'save');
      }
    };

    return Store;

  })(Emitter);

  module.exports = Store;

}).call(this);
