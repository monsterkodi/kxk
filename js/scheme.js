// Generated by CoffeeScript 1.12.7

/*
 0000000   0000000  000   000  00000000  00     00  00000000
000       000       000   000  000       000   000  000
0000000   000       000000000  0000000   000000000  0000000
     000  000       000   000  000       000 0 000  000
0000000    0000000  000   000  00000000  000   000  00000000
 */

(function() {
  var $, Scheme, _, elem, post, prefs, ref, slash;

  ref = require('./kxk'), prefs = ref.prefs, elem = ref.elem, post = ref.post, slash = ref.slash, $ = ref.$, _ = ref._;

  Scheme = (function() {
    function Scheme() {}

    Scheme.toggle = function(schemes) {
      var currentScheme, link, nextScheme, nextSchemeIndex;
      if (schemes == null) {
        schemes = ['dark', 'bright'];
      }
      if (link = $('style-link')) {
        currentScheme = slash.basename(_.last(link.href.split('/')), '.css');
        nextSchemeIndex = (schemes.indexOf(currentScheme) + 1) % schemes.length;
        nextScheme = schemes[nextSchemeIndex];
        return Scheme.set(nextScheme);
      }
    };

    Scheme.set = function(scheme) {
      var href, link, newlink;
      scheme = slash.basename(scheme, '.css');
      prefs.set('scheme', scheme);
      link = $("#style-link");
      newlink = elem('link', {
        href: "css/" + scheme + ".css",
        rel: 'stylesheet',
        type: 'text/css',
        id: 'style-link'
      });
      link.parentNode.replaceChild(newlink, link);
      if (link = $("#style-title")) {
        href = slash.join(slash.dir(link.href), scheme + ".css");
        newlink = elem('link', {
          href: href,
          rel: 'stylesheet',
          type: 'text/css',
          id: 'style-title'
        });
        link.parentNode.replaceChild(newlink, link);
      }
      return post.emit('schemeChanged', scheme);
    };

    return Scheme;

  })();

  module.exports = Scheme;

}).call(this);
