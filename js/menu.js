// Generated by CoffeeScript 1.12.7

/*
00     00  00000000  000   000  000   000  
000   000  000       0000  000  000   000  
000000000  0000000   000 0 000  000   000  
000 0 000  000       000  0000  000   000  
000   000  00000000  000   000   0000000
 */

(function() {
  var Menu, elem, keyinfo, log, popup, post, ref, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('./kxk'), stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, popup = ref.popup, post = ref.post, elem = ref.elem, log = ref.log;

  Menu = (function() {
    function Menu(opt) {
      this.onClick = bind(this.onClick, this);
      this.onKeyDown = bind(this.onKeyDown, this);
      this.close = bind(this.close, this);
      this.onFocusOut = bind(this.onFocusOut, this);
      this.onHover = bind(this.onHover, this);
      this.blur = bind(this.blur, this);
      this.focus = bind(this.focus, this);
      var combo, div, i, item, len, ref1;
      this.elem = elem({
        "class": 'menu',
        tabindex: 3
      });
      ref1 = opt.items;
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        if (item.hide) {
          continue;
        }
        div = elem({
          "class": 'menuItem',
          text: item.text
        });
        div.item = item;
        div.addEventListener('click', this.onClick);
        if (item.combo != null) {
          combo = elem('span', {
            "class": 'popupCombo',
            text: keyinfo.short(item.combo)
          });
          div.appendChild(combo);
        }
        this.elem.appendChild(div);
      }
      this.select(this.elem.firstChild);
      this.elem.addEventListener('keydown', this.onKeyDown);
      this.elem.addEventListener('focusout', this.onFocusOut);
      this.elem.addEventListener('mouseover', this.onHover);
    }

    Menu.prototype.focus = function() {
      this.focusElem = document.activeElement;
      return this.elem.focus();
    };

    Menu.prototype.blur = function() {
      var ref1;
      this.close();
      return (ref1 = this.focusElem) != null ? typeof ref1.focus === "function" ? ref1.focus() : void 0 : void 0;
    };

    Menu.prototype.onHover = function(event) {
      return this.select(event.target, {
        selectFirstItem: false
      });
    };

    Menu.prototype.onFocusOut = function(event) {
      var ref1;
      if (this.popup && !((ref1 = event.relatedTarget) != null ? ref1.classList.contains('popup') : void 0)) {
        this.popup.close({
          focus: false
        });
        return delete this.popup;
      }
    };

    Menu.prototype.open = function() {
      return this.select(this.elem.firstChild, {
        activate: true
      });
    };

    Menu.prototype.close = function(opt) {
      var ref1;
      if (opt == null) {
        opt = {};
      }
      if (this.popup != null) {
        this.popup.close({
          focus: false
        });
        delete this.popup;
        if (opt.focus !== false) {
          return this.elem.focus();
        }
      } else {
        if (opt.focus !== false) {
          return (ref1 = this.focusElem) != null ? typeof ref1.focus === "function" ? ref1.focus() : void 0 : void 0;
        }
      }
    };

    Menu.prototype.childClosed = function(child, opt) {
      if (child === this.popup) {
        delete this.popup;
        if (opt.focus !== false) {
          return this.elem.focus();
        }
      }
    };

    Menu.prototype.select = function(item, opt) {
      var hadPopup, ref1;
      if (opt == null) {
        opt = {};
      }
      if (item == null) {
        return;
      }
      if (this.popup != null) {
        hadPopup = true;
        this.popup.close({
          focus: false
        });
      }
      if ((ref1 = this.selected) != null) {
        ref1.classList.remove('selected');
      }
      this.selected = item;
      this.selected.classList.add('selected');
      if (hadPopup || opt.activate) {
        delete this.popup;
        return this.activate(item, opt);
      }
    };

    Menu.prototype.activate = function(item, opt) {
      var br, items, pr;
      if (opt == null) {
        opt = {};
      }
      items = item.item.menu;
      if (items) {
        if (this.popup) {
          this.popup.close({
            focus: false
          });
          delete this.popup;
        }
        br = item.getBoundingClientRect();
        pr = item.parentNode.getBoundingClientRect();
        opt.items = items;
        opt.parent = this;
        opt.x = br.left;
        opt.y = pr.top + pr.height;
        this.popup = popup.menu(opt);
        if (opt.selectFirstItem === false) {
          return this.elem.focus();
        }
      }
    };

    Menu.prototype.toggle = function(item) {
      if (this.popup) {
        this.popup.close({
          focus: false
        });
        return delete this.popup;
      } else {
        return this.activate(item, {
          selectFirstItem: false
        });
      }
    };

    Menu.prototype.itemSelected = function(item, elem) {};

    Menu.prototype.deactivate = function(item) {
      return log(item.item);
    };

    Menu.prototype.navigateLeft = function() {
      var ref1;
      return this.select((ref1 = this.selected) != null ? ref1.previousSibling : void 0, {
        activate: true,
        selectFirstItem: false
      });
    };

    Menu.prototype.navigateRight = function() {
      var ref1;
      return this.select((ref1 = this.selected) != null ? ref1.nextSibling : void 0, {
        activate: true,
        selectFirstItem: false
      });
    };

    Menu.prototype.onKeyDown = function(event) {
      var combo, key, mod, ref1;
      ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo;
      switch (combo) {
        case 'end':
        case 'page down':
          return stopEvent(event, this.select(this.elem.lastChild, {
            activate: true,
            selectFirstItem: false
          }));
        case 'home':
        case 'page up':
          return stopEvent(event, this.select(this.elem.firstChild, {
            activate: true,
            selectFirstItem: false
          }));
        case 'enter':
        case 'down':
        case 'space':
          return stopEvent(event, this.activate(this.selected));
        case 'esc':
          return stopEvent(event, this.close());
        case 'right':
          return stopEvent(event, this.navigateRight());
        case 'left':
          return stopEvent(event, this.navigateLeft());
      }
    };

    Menu.prototype.onClick = function(e) {
      return this.toggle(e.target);
    };

    return Menu;

  })();

  module.exports = Menu;

}).call(this);
