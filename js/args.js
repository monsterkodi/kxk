// Generated by CoffeeScript 1.12.7

/*
 0000000   00000000    0000000    0000000
000   000  000   000  000        000     
000000000  0000000    000  0000  0000000 
000   000  000   000  000   000       000
000   000  000   000   0000000   0000000
 */

(function() {
  var _, args, empty, error, fs, karg, log, noon, post, ref, slash, valid;

  ref = require('./kxk'), karg = ref.karg, post = ref.post, slash = ref.slash, noon = ref.noon, empty = ref.empty, valid = ref.valid, fs = ref.fs, error = ref.error, log = ref.log, _ = ref._;

  if (process.type === 'renderer') {
    module.exports = post.get('args');
  } else {
    args = {};
    args.init = function(cfg, kargOpt) {
      var k, kargConfig, kk, o, pkg, pkgDir, pkgJson, ref1, ref2, ref3, s, v, vv;
      pkg = kargOpt != null ? kargOpt.pkg : void 0;
      if (pkg == null) {
        pkgDir = slash.pkg(__dirname);
        while (valid(pkgDir) && slash.file(slash.dir(pkgDir)) === 'node_modules') {
          pkgDir = slash.pkg(slash.dir(pkgDir));
        }
        if (valid(pkgDir)) {
          pkgJson = slash.join(pkgDir, 'package.json');
          pkg = require(pkgJson);
          if (empty(pkg)) {
            return error("args -- no pkg in '" + pkgJson + "'!");
          }
        } else {
          return error('args -- no pkg dir!');
        }
      }
      kargConfig = {};
      kargConfig[pkg.name] = {};
      kargConfig.version = pkg.version;
      ref1 = noon.parse(cfg);
      for (kk in ref1) {
        vv = ref1[kk];
        o = {};
        s = vv.split(/\s\s+/);
        if (s.length > 0) {
          if (!empty(s[0])) {
            o['?'] = s[0];
          }
        }
        if (s.length > 1) {
          if ((ref2 = s[1]) === '*' || ref2 === '**') {
            o[s[1]] = null;
          } else {
            o['='] = noon.parse(s[1])[0];
          }
        }
        kargConfig[pkg.name][kk] = o;
      }
      delete args.init;
      ref3 = karg(kargConfig, kargOpt);
      for (k in ref3) {
        v = ref3[k];
        args[k] = v;
      }
      return args;
    };
    post.onGet('args', (function(_this) {
      return function() {
        return args;
      };
    })(this));
    module.exports = args;
  }

}).call(this);
