(function() {
  /*
   0000000   00000000    0000000    0000000
  000   000  000   000  000        000     
  000000000  0000000    000  0000  0000000 
  000   000  000   000  000   000       000
  000   000  000   000   0000000   0000000 
  */
  var _, args, empty, error, fs, karg, log, noon, post, slash, valid;

  ({karg, post, slash, noon, empty, valid, fs, error, log, _} = require('./kxk'));

  if (process.type === 'renderer') {
    module.exports = post.get('args');
  } else {
    args = {};
    args.init = function(cfg, kargOpt) {
      var k, kargConfig, kk, o, pkg, pkgDir, pkgJson, ref, ref1, ref2, s, v, vv;
      if (kargOpt == null) {
        kargOpt = {};
      }
      pkg = kargOpt.pkg;
      if (pkg == null) {
        pkgDir = slash.pkg(__dirname);
        while (valid(pkgDir) && slash.file(slash.dir(pkgDir)) === 'node_modules') {
          pkgDir = slash.pkg(slash.dir(pkgDir));
        }
        if (valid(pkgDir)) {
          pkgJson = slash.join(pkgDir, 'package.json');
          pkg = require(pkgJson);
          if (empty(pkg)) {
            return error(`args -- no pkg in '${pkgJson}'!`);
          }
        } else {
          return error('args -- no pkg dir!');
        }
      }
      kargConfig = {};
      kargConfig[pkg.name] = {};
      kargConfig.version = pkg.version;
      ref = noon.parse(cfg);
      for (kk in ref) {
        vv = ref[kk];
        o = {};
        s = vv.split(/\s\s+/);
        if (s.length > 0) {
          if (!empty(s[0])) {
            o['?'] = s[0];
          }
        }
        if (s.length > 1) {
          if ((ref1 = s[1]) === '*' || ref1 === '**') {
            o[s[1]] = null;
          } else {
            o['='] = noon.parse(s[1])[0];
          }
        }
        if (s.length > 2) {
          if (s[2].startsWith('-')) {
            o['-'] = s[2].substr(1);
          }
        }
        kargConfig[pkg.name][kk] = o;
      }
      delete args.init;
      if (empty(kargOpt.ignoreArgs)) {
        if (slash.win() && slash.file(process.argv[0]) === `${pkg.name}.exe`) {
          kargOpt.ignoreArgs = 1;
        } else {
          kargOpt.ignoreArgs = 2;
        }
      }
      ref2 = karg(kargConfig, kargOpt);
      for (k in ref2) {
        v = ref2[k];
        args[k] = v;
      }
      return args;
    };
    post.onGet('args', () => {
      return args;
    });
    module.exports = args;
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIuLi9jb2ZmZWUvYXJncy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQTs7Ozs7OztBQUFBLE1BQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBOztFQVFBLENBQUEsQ0FBRSxJQUFGLEVBQVEsSUFBUixFQUFjLEtBQWQsRUFBcUIsSUFBckIsRUFBMkIsS0FBM0IsRUFBa0MsS0FBbEMsRUFBeUMsRUFBekMsRUFBNkMsS0FBN0MsRUFBb0QsR0FBcEQsRUFBeUQsQ0FBekQsQ0FBQSxHQUErRCxPQUFBLENBQVEsT0FBUixDQUEvRDs7RUFFQSxJQUFHLE9BQU8sQ0FBQyxJQUFSLEtBQWdCLFVBQW5CO0lBRUksTUFBTSxDQUFDLE9BQVAsR0FBaUIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxNQUFULEVBRnJCO0dBQUEsTUFBQTtJQU1JLElBQUEsR0FBTyxDQUFBO0lBRVAsSUFBSSxDQUFDLElBQUwsR0FBWSxRQUFBLENBQUMsR0FBRCxFQUFNLE9BQU4sQ0FBQTtBQUVSLFVBQUEsQ0FBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7O1FBQUEsVUFBVyxDQUFBOztNQUNYLEdBQUEsR0FBTSxPQUFPLENBQUM7TUFFZCxJQUFPLFdBQVA7UUFDSSxNQUFBLEdBQVMsS0FBSyxDQUFDLEdBQU4sQ0FBVSxTQUFWO0FBQ1QsZUFBTSxLQUFBLENBQU0sTUFBTixDQUFBLElBQWtCLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBSyxDQUFDLEdBQU4sQ0FBVSxNQUFWLENBQVgsQ0FBQSxLQUFnQyxjQUF4RDtVQUNJLE1BQUEsR0FBUyxLQUFLLENBQUMsR0FBTixDQUFVLEtBQUssQ0FBQyxHQUFOLENBQVUsTUFBVixDQUFWO1FBRGI7UUFFQSxJQUFHLEtBQUEsQ0FBTSxNQUFOLENBQUg7VUFDSSxPQUFBLEdBQVUsS0FBSyxDQUFDLElBQU4sQ0FBVyxNQUFYLEVBQW1CLGNBQW5CO1VBQ1YsR0FBQSxHQUFNLE9BQUEsQ0FBUSxPQUFSO1VBQ04sSUFBa0QsS0FBQSxDQUFNLEdBQU4sQ0FBbEQ7QUFBQSxtQkFBTyxLQUFBLENBQU0sQ0FBQSxtQkFBQSxDQUFBLENBQXNCLE9BQXRCLENBQThCLEVBQTlCLENBQU4sRUFBUDtXQUhKO1NBQUEsTUFBQTtBQUtJLGlCQUFPLEtBQUEsQ0FBTSxxQkFBTixFQUxYO1NBSko7O01BV0EsVUFBQSxHQUFhLENBQUE7TUFDYixVQUFXLENBQUEsR0FBRyxDQUFDLElBQUosQ0FBWCxHQUF1QixDQUFBO01BQ3ZCLFVBQVUsQ0FBQyxPQUFYLEdBQXFCLEdBQUcsQ0FBQztBQUV6QjtNQUFBLEtBQUEsU0FBQTs7UUFDSSxDQUFBLEdBQUksQ0FBQTtRQUNKLENBQUEsR0FBSSxFQUFFLENBQUMsS0FBSCxDQUFTLE9BQVQ7UUFFSixJQUFHLENBQUMsQ0FBQyxNQUFGLEdBQVcsQ0FBZDtVQUNJLElBQWlCLENBQUksS0FBQSxDQUFNLENBQUUsQ0FBQSxDQUFBLENBQVIsQ0FBckI7WUFBQSxDQUFFLENBQUEsR0FBQSxDQUFGLEdBQVMsQ0FBRSxDQUFBLENBQUEsRUFBWDtXQURKOztRQUVBLElBQUcsQ0FBQyxDQUFDLE1BQUYsR0FBVyxDQUFkO1VBQ0ksWUFBRyxDQUFFLENBQUEsQ0FBQSxFQUFGLEtBQVMsR0FBVCxJQUFBLElBQUEsS0FBYyxJQUFqQjtZQUNJLENBQUUsQ0FBQSxDQUFFLENBQUEsQ0FBQSxDQUFGLENBQUYsR0FBVSxLQURkO1dBQUEsTUFBQTtZQUdJLENBQUUsQ0FBQSxHQUFBLENBQUYsR0FBUyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUUsQ0FBQSxDQUFBLENBQWIsQ0FBaUIsQ0FBQSxDQUFBLEVBSDlCO1dBREo7O1FBS0EsSUFBRyxDQUFDLENBQUMsTUFBRixHQUFXLENBQWQ7VUFDSSxJQUFHLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxVQUFMLENBQWdCLEdBQWhCLENBQUg7WUFDSSxDQUFFLENBQUEsR0FBQSxDQUFGLEdBQVMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BQUwsQ0FBWSxDQUFaLEVBRGI7V0FESjs7UUFJQSxVQUFXLENBQUEsR0FBRyxDQUFDLElBQUosQ0FBVSxDQUFBLEVBQUEsQ0FBckIsR0FBMkI7TUFmL0I7TUFpQkEsT0FBTyxJQUFJLENBQUM7TUFFWixJQUFHLEtBQUEsQ0FBTSxPQUFPLENBQUMsVUFBZCxDQUFIO1FBQ0ksSUFBRyxLQUFLLENBQUMsR0FBTixDQUFBLENBQUEsSUFBZ0IsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFPLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBeEIsQ0FBQSxLQUErQixDQUFBLENBQUEsQ0FBRyxHQUFHLENBQUMsSUFBUCxDQUFZLElBQVosQ0FBbEQ7VUFDSSxPQUFPLENBQUMsVUFBUixHQUFtQixFQUR2QjtTQUFBLE1BQUE7VUFHSSxPQUFPLENBQUMsVUFBUixHQUFtQixFQUh2QjtTQURKOztBQU1BO01BQUEsS0FBQSxTQUFBOztRQUNJLElBQUssQ0FBQSxDQUFBLENBQUwsR0FBVTtNQURkO2FBR0E7SUFoRFE7SUFrRFosSUFBSSxDQUFDLEtBQUwsQ0FBVyxNQUFYLEVBQW1CLENBQUEsQ0FBQSxHQUFBO2FBQUc7SUFBSCxDQUFuQjtJQUVBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEtBNURyQjs7QUFWQSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgICAwMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgXG4wMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwICAwMDAwMDAwIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgXG4jIyNcblxueyBrYXJnLCBwb3N0LCBzbGFzaCwgbm9vbiwgZW1wdHksIHZhbGlkLCBmcywgZXJyb3IsIGxvZywgXyB9ID0gcmVxdWlyZSAnLi9reGsnXG5cbmlmIHByb2Nlc3MudHlwZSA9PSAncmVuZGVyZXInXG4gICAgXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwb3N0LmdldCAnYXJncydcbiAgICBcbmVsc2VcbiAgICAgICAgXG4gICAgYXJncyA9IHt9IFxuICAgICAgICBcbiAgICBhcmdzLmluaXQgPSAoY2ZnLCBrYXJnT3B0KSAtPlxuICAgICAgICBcbiAgICAgICAga2FyZ09wdCA/PSB7fVxuICAgICAgICBwa2cgPSBrYXJnT3B0LnBrZ1xuICAgICAgICBcbiAgICAgICAgaWYgbm90IHBrZz9cbiAgICAgICAgICAgIHBrZ0RpciA9IHNsYXNoLnBrZyBfX2Rpcm5hbWVcbiAgICAgICAgICAgIHdoaWxlIHZhbGlkKHBrZ0RpcikgYW5kIHNsYXNoLmZpbGUoc2xhc2guZGlyIHBrZ0RpcikgPT0gJ25vZGVfbW9kdWxlcydcbiAgICAgICAgICAgICAgICBwa2dEaXIgPSBzbGFzaC5wa2cgc2xhc2guZGlyIHBrZ0RpclxuICAgICAgICAgICAgaWYgdmFsaWQgcGtnRGlyXG4gICAgICAgICAgICAgICAgcGtnSnNvbiA9IHNsYXNoLmpvaW4gcGtnRGlyLCAncGFja2FnZS5qc29uJ1xuICAgICAgICAgICAgICAgIHBrZyA9IHJlcXVpcmUgcGtnSnNvblxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvciBcImFyZ3MgLS0gbm8gcGtnIGluICcje3BrZ0pzb259JyFcIiBpZiBlbXB0eSBwa2dcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IgJ2FyZ3MgLS0gbm8gcGtnIGRpciEnXG4gICAgICAgICAgICBcbiAgICAgICAga2FyZ0NvbmZpZyA9IHt9XG4gICAgICAgIGthcmdDb25maWdbcGtnLm5hbWVdID0ge31cbiAgICAgICAga2FyZ0NvbmZpZy52ZXJzaW9uID0gcGtnLnZlcnNpb25cbiAgICAgICAgXG4gICAgICAgIGZvciBrayx2diBvZiBub29uLnBhcnNlIGNmZ1xuICAgICAgICAgICAgbyA9IHt9XG4gICAgICAgICAgICBzID0gdnYuc3BsaXQoL1xcc1xccysvKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBzLmxlbmd0aCA+IDAgXG4gICAgICAgICAgICAgICAgb1snPyddID0gc1swXSBpZiBub3QgZW1wdHkgc1swXVxuICAgICAgICAgICAgaWYgcy5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgaWYgc1sxXSBpbiBbJyonLCAnKionXVxuICAgICAgICAgICAgICAgICAgICBvW3NbMV1dID0gbnVsbFxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb1snPSddID0gbm9vbi5wYXJzZShzWzFdKVswXSBcbiAgICAgICAgICAgIGlmIHMubGVuZ3RoID4gMlxuICAgICAgICAgICAgICAgIGlmIHNbMl0uc3RhcnRzV2l0aCAnLSdcbiAgICAgICAgICAgICAgICAgICAgb1snLSddID0gc1syXS5zdWJzdHIgMVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBrYXJnQ29uZmlnW3BrZy5uYW1lXVtra10gPSBvXG4gICAgICAgICAgICBcbiAgICAgICAgZGVsZXRlIGFyZ3MuaW5pdFxuICAgICAgICBcbiAgICAgICAgaWYgZW1wdHkga2FyZ09wdC5pZ25vcmVBcmdzXG4gICAgICAgICAgICBpZiBzbGFzaC53aW4oKSBhbmQgc2xhc2guZmlsZShwcm9jZXNzLmFyZ3ZbMF0pID09IFwiI3twa2cubmFtZX0uZXhlXCJcbiAgICAgICAgICAgICAgICBrYXJnT3B0Lmlnbm9yZUFyZ3M9MVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGthcmdPcHQuaWdub3JlQXJncz0yXG4gICAgICAgIFxuICAgICAgICBmb3Igayx2IG9mIGthcmcga2FyZ0NvbmZpZywga2FyZ09wdFxuICAgICAgICAgICAgYXJnc1trXSA9IHZcbiAgICAgICAgICAgIFxuICAgICAgICBhcmdzXG4gICAgXG4gICAgcG9zdC5vbkdldCAnYXJncycsID0+IGFyZ3NcbiAgICBcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGFyZ3NcbiJdfQ==
//# sourceURL=../coffee/args.coffee