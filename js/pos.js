(function() {
  /*
  0000000    0000000    0000000
  00   000  000   000  000     
  0000000   000   000  0000000 
  00        000   000       000
  00         0000000   0000000 
  */
  var Pos, clamp;

  ({clamp} = require('./kxk'));

  Pos = class Pos {
    constructor(x1, y1) {
      var event, ref;
      this.x = x1;
      this.y = y1;
      if (((ref = this.x) != null ? ref.clientX : void 0) != null) {
        event = this.x;
        if (isNaN(window.scrollX)) {
          this.x = event.clientX + document.documentElement.scrollLeft + document.body.scrollLeft;
          this.y = event.clientY + document.documentElement.scrollTop + document.body.scrollTop;
        } else {
          this.x = event.clientX + window.scrollX + 1;
          this.y = event.clientY + window.scrollY + 1;
        }
      } else if ((this.y == null) && Pos.isPos(this.x)) {
        this.y = this.x.y;
        this.x = this.x.x;
      }
    }

    copy() {
      return new Pos(this.x, this.y);
    }

    plus(val) {
      var newPos;
      newPos = this.copy();
      if (val != null) {
        if (!isNaN(val.x)) {
          newPos.x += val.x;
        }
        if (!isNaN(val.y)) {
          newPos.y += val.y;
        }
      }
      return newPos;
    }

    minus(val) {
      var newPos;
      newPos = this.copy();
      if (val != null) {
        if (!isNaN(val.x)) {
          newPos.x -= val.x;
        }
        if (!isNaN(val.y)) {
          newPos.y -= val.y;
        }
      }
      return newPos;
    }

    times(val) {
      return this.copy().scale(val);
    }

    clamped(lower, upper) {
      return this.copy().clamp(lower, upper);
    }

    rounded(v = 1.0) {
      return new Pos(Math.round(this.x / v) * v, Math.round(this.y / v) * v);
    }

    to(other) {
      return other.minus(this);
    }

    mid(other) {
      return this.plus(other).scale(0.5);
    }

    interpolate(other, f) {
      return this.plus(this.to(other).scale(f));
    }

    min(val) {
      var newPos;
      newPos = this.copy();
      if (val == null) {
        return newPos;
      }
      if (!isNaN(val.x) && this.x > val.x) {
        newPos.x = val.x;
      }
      if (!isNaN(val.y) && this.y > val.y) {
        newPos.y = val.y;
      }
      return newPos;
    }

    max(val) {
      var newPos;
      newPos = this.copy();
      if (val == null) {
        return newPos;
      }
      if (!isNaN(val.x) && this.x < val.x) {
        newPos.x = val.x;
      }
      if (!isNaN(val.y) && this.y < val.y) {
        newPos.y = val.y;
      }
      return newPos;
    }

    normal() {
      return this.copy().normalize();
    }

    neg() {
      return this.copy().negate();
    }

    length() {
      return Math.sqrt(this.square());
    }

    dot(o) {
      return this.x * o.x + this.y * o.y;
    }

    cross(o) {
      return this.x * o.y - this.y * o.x;
    }

    square() {
      return (this.x * this.x) + (this.y * this.y);
    }

    distSquare(o) {
      return this.minus(o).square();
    }

    dist(o) {
      return Math.sqrt(this.distSquare(o));
    }

    equals(o) {
      return this.x === (o != null ? o.x : void 0) && this.y === (o != null ? o.y : void 0);
    }

    deg2rad(d) {
      return Math.PI * d / 180.0;
    }

    rad2deg(r) {
      return r * 180.0 / Math.PI;
    }

    isClose(o, dist = 0.1) {
      return Math.abs(this.x - o.x) + Math.abs(this.y - o.y) < dist;
    }

    isZero(e = 0.000001) {
      return Math.abs(this.x) < e && Math.abs(this.y) < e;
    }

    angle(o = new Pos(0, 1)) {
      return this.rad2deg(Math.acos(this.normal().dot(o.normal())));
    }

    perp() {
      return new Pos(-this.y, this.x);
    }

    rotation(o) {
      var d, s;
      d = o.dot(this.perp());
      if (Math.abs(d) < 0.0001) {
        if (this.dot(o) > 0) {
          return 0;
        }
        return 180;
      }
      s = d > 0 && -1 || 1;
      return s * this.angle(o);
    }

    check() {
      var newPos;
      newPos = this.copy();
      if (isNaN(newPos.x)) {
        newPos.x = 0;
      }
      if (isNaN(newPos.y)) {
        newPos.y = 0;
      }
      return newPos;
    }

    _str() {
      var s;
      s = (this.x != null ? `<x:${this.x} ` : void 0) || "<NaN ";
      return s += (this.y != null ? `y:${this.y}>` : void 0) || "NaN>";
    }

    static isPos(o) {
      return (o.x != null) && (o.y != null) && Number.isFinite(o.x) && Number.isFinite(o.y);
    }

    
    //_________________________________________________________ destructive
    fade(o, val) {
      this.x = this.x * (1 - val) + o.x * val;
      this.y = this.y * (1 - val) + o.y * val;
      return this;
    }

    scale(val) {
      this.x *= val;
      this.y *= val;
      return this;
    }

    mul(other) {
      this.x *= other.x;
      this.y *= other.y;
      return this;
    }

    div(other) {
      this.x /= other.x;
      this.y /= other.y;
      return this;
    }

    add(other) {
      this.x += other.x;
      this.y += other.y;
      return this;
    }

    sub(other) {
      this.x -= other.x;
      this.y -= other.y;
      return this;
    }

    clamp(lower, upper) {
      if ((lower != null) && (upper != null)) {
        this.x = clamp(lower.x, upper.x, this.x);
        this.y = clamp(lower.y, upper.y, this.y);
      }
      return this;
    }

    normalize() {
      var l;
      l = this.length();
      if (l) {
        l = 1.0 / l;
        this.x *= l;
        this.y *= l;
      }
      return this;
    }

    negate() {
      this.x *= -1;
      this.y *= -1;
      return this;
    }

    rotate(angle) {
      var cos, rad, sin, x;
      while (angle > 360) {
        angle -= 360;
      }
      while (angle < -360) {
        angle += 360;
      }
      if (angle === 0) {
        return this;
      }
      rad = this.deg2rad(angle);
      cos = Math.cos(rad);
      sin = Math.sin(rad);
      x = this.x;
      this.x = cos * this.x - sin * this.y;
      this.y = sin * x + cos * this.y;
      return this;
    }

  };

  module.exports = function(x, y) {
    return new Pos(x, y);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:/Users/t.kohnhorst/s/kxk/coffee/pos.coffee