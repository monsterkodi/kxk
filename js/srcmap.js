// koffee 1.11.0

/*
 0000000  00000000    0000000  00     00   0000000   00000000   
000       000   000  000       000   000  000   000  000   000  
0000000   0000000    000       000000000  000000000  00000000   
     000  000   000  000       000 0 000  000   000  000        
0000000   000   000   0000000  000   000  000   000  000
 */
var _, coffeePos, decode, empty, errorStack, errorTrace, filePos, jsPosition, klog, logErr, readMap, ref, regex1, regex2, sh, slash, toCoffee, toJs, valid;

ref = require('./kxk'), _ = ref._, empty = ref.empty, klog = ref.klog, sh = ref.sh, slash = ref.slash, valid = ref.valid;

regex1 = /^\s+at\s+(\S+)\s+\((.*):(\d+):(\d+)\)/;

regex2 = /^\s+at\s+(.*):(\d+):(\d+)/;

logErr = function(err, sep) {
    var j, len, line, ref1, results, trace;
    if (sep == null) {
        sep = '💥';
    }
    console.log(err);
    trace = errorTrace(err);
    if (valid(trace.lines)) {
        klog.flog({
            str: trace.text,
            source: trace.lines[0].file,
            line: trace.lines[0].line,
            sep: sep
        });
        ref1 = trace.lines;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            line = ref1[j];
            sep = slash.isAbsolute(line.file) || line.file[0] === '~' ? '🐞' : '🔼';
            if (sep === '🐞' || line.file[0] === '.') {
                results.push(klog.flog({
                    str: '       ' + line.func,
                    source: line.file,
                    line: line.line,
                    sep: sep
                }));
            } else {
                results.push(void 0);
            }
        }
        return results;
    } else {
        return klog.flog({
            str: trace.text,
            source: '',
            line: 0,
            sep: sep
        });
    }
};

filePos = function(line) {
    var a, absFile, b, coffeeCol, coffeeFile, coffeeLine, jsFile, mappedLine, match, ref1, ref2, result;
    if (match = regex1.exec(line)) {
        result = {
            func: match[1].replace('.<anonymous>', ''),
            file: match[2],
            line: match[3],
            col: match[4]
        };
        if (slash.ext(result.file) === 'js') {
            mappedLine = toCoffee(result.file, result.line, result.col);
            if (mappedLine != null) {
                result.file = mappedLine[0];
                result.line = mappedLine[1];
                result.col = mappedLine[2];
            }
        } else if (slash.ext(result.file) === 'coffee' && !slash.isAbsolute(result.file)) {
            absFile = slash.resolve(slash.join(process.cwd(), 'coffee', result.file));
            if (slash.fileExists(absFile)) {
                ref1 = toJs(absFile, 1, 0), jsFile = ref1[0], a = ref1[1], b = ref1[2];
                if (slash.fileExists(jsFile)) {
                    ref2 = toCoffee(jsFile, result.line, result.col), coffeeFile = ref2[0], coffeeLine = ref2[1], coffeeCol = ref2[2];
                    if (slash.fileExists(coffeeFile)) {
                        result.file = coffeeFile;
                        result.line = coffeeLine;
                        result.col = coffeeCol;
                    }
                }
            }
        }
    } else if (match = regex2.exec(line)) {
        result = {
            func: slash.file(match[1]),
            file: match[1],
            line: match[2],
            col: match[3]
        };
        if (slash.ext(result.file) === 'js') {
            mappedLine = toCoffee(result.file, result.line, result.col);
            if (mappedLine != null) {
                result.file = mappedLine[0];
                result.line = mappedLine[1];
                result.col = mappedLine[2];
            }
        }
    }
    return result;
};

errorStack = function(err) {
    var fp, j, len, lines, ref1, stackLine;
    lines = [];
    ref1 = err.stack.split('\n');
    for (j = 0, len = ref1.length; j < len; j++) {
        stackLine = ref1[j];
        if (fp = filePos(stackLine)) {
            lines.push("       " + (_.padEnd(fp.func, 30)) + " " + fp.file + ":" + fp.line);
        } else {
            lines.push(stackLine);
        }
    }
    return lines.join('\n');
};

errorTrace = function(err) {
    var fp, j, len, lines, ref1, stackLine, text;
    lines = [];
    text = [];
    ref1 = err.stack.split('\n');
    for (j = 0, len = ref1.length; j < len; j++) {
        stackLine = ref1[j];
        if (fp = filePos(stackLine)) {
            lines.push(fp);
        } else {
            text.push(stackLine);
        }
    }
    return {
        lines: lines,
        text: text.join('\n')
    };
};

decode = function(segment) {
    var cc, i, j, rc, ref1, rs, vl, vs;
    rs = [];
    sh = rc = 0;
    for (i = j = 0, ref1 = segment.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        cc = segment.charCodeAt(i) - 65;
        if (cc >= 32) {
            cc -= 6;
        }
        if (cc === -22) {
            cc = 62;
        }
        if (cc === -18) {
            cc = 63;
        }
        if (cc < 0) {
            cc += 69;
        }
        if (cc & 32) {
            sh += 5;
            rc = cc & 0x1f;
        } else {
            vl = rc + (cc << sh);
            vs = vl >> 1;
            if (vl & 1) {
                vs = -vs;
            }
            rs.push(vs);
            sh = rc = 0;
        }
    }
    return rs;
};

readMap = function(jsFile) {
    var j, l, len, map, mapVar, ref1, source, url, urlVar;
    source = slash.readText(jsFile);
    urlVar = '//# sourceURL=';
    mapVar = '//# sourceMappingURL=';
    ref1 = source.split(/\r?\n/);
    for (j = 0, len = ref1.length; j < len; j++) {
        l = ref1[j];
        if (!url && l.startsWith(urlVar)) {
            url = l.split(urlVar)[1];
        }
        if (!map && l.startsWith(mapVar)) {
            map = l.split(mapVar)[1];
        }
        if (map && url) {
            break;
        }
    }
    if (map) {
        map = map.slice('data:application/json;base64,'.length);
        map = Buffer.from(map, 'base64').toString();
        map = JSON.parse(map);
        if (url && empty(map.sources[0])) {
            klog('no url', url);
            map.sources[0] = url;
        }
    }
    return map;
};

coffeePos = function(mapData, sjsLine, sjsCol) {
    var coCol, coLine, j, jsCol, jsLine, k, len, len1, line, lines, ref1, seg, segment;
    lines = mapData.mappings.split(';');
    jsLine = 1;
    coLine = 1;
    coCol = 0;
    for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        jsCol = 0;
        if (line.length) {
            ref1 = line.split(',');
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                segment = ref1[k];
                seg = decode(segment);
                jsCol += seg[0];
                coLine += seg[2];
                coCol += seg[3];
                if (jsLine === sjsLine && jsCol >= sjsCol) {
                    return {
                        line: coLine,
                        col: coCol
                    };
                }
            }
        }
        if (jsLine === sjsLine) {
            return {
                line: coLine,
                col: 0
            };
        }
        jsLine++;
    }
    return {
        line: 0,
        col: 0
    };
};

toCoffee = function(jsFile, jsLine, jsCol) {
    var coPos, coffeeCol, coffeeFile, coffeeLine, mapData;
    if (jsCol == null) {
        jsCol = 0;
    }
    jsLine = parseInt(jsLine);
    jsCol = parseInt(jsCol);
    coffeeFile = jsFile.replace(/\/js\//, '/coffee/');
    coffeeFile = coffeeFile.replace(/\.js$/, '.coffee');
    coffeeLine = jsLine;
    coffeeCol = jsCol;
    if (slash.fileExists(jsFile)) {
        if (valid(mapData = readMap(jsFile))) {
            coPos = coffeePos(mapData, jsLine, jsCol);
            coffeeFile = slash.tilde(slash.join(mapData.sourceRoot, mapData.sources[0]));
            coffeeLine = coPos.line;
            coffeeCol = coPos.col;
        } else {
            klog("no mapData in " + jsFile);
        }
    } else {
        klog("no jsFile " + jsFile);
    }
    return [coffeeFile, coffeeLine, coffeeCol];
};

jsPosition = function(mapData, coffeeLine, coffeeCol) {
    var coCol, coLine, dfCol, dfLine, dfMin, j, jsCol, jsLine, k, len, len1, line, lines, ref1, result, seg, segment;
    lines = mapData.mappings.split(';');
    jsLine = 1;
    coLine = 1;
    coCol = 0;
    dfMin = {
        line: lines.length,
        col: 9999
    };
    result = {
        line: 0,
        col: 0
    };
    for (j = 0, len = lines.length; j < len; j++) {
        line = lines[j];
        jsCol = 0;
        if (line.length) {
            ref1 = line.split(',');
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                segment = ref1[k];
                seg = decode(segment);
                jsCol += seg[0];
                coLine += seg[2];
                coCol += seg[3];
                dfLine = Math.abs(coffeeLine - coLine);
                dfCol = Math.abs(coffeeCol - coCol);
                if (dfLine < dfMin.line || dfLine === dfMin.line && dfCol < dfMin.col) {
                    dfMin = {
                        line: dfLine,
                        col: dfCol
                    };
                    result = {
                        line: jsLine,
                        col: jsCol
                    };
                }
            }
        }
        jsLine++;
    }
    return result;
};

toJs = function(coffeeFile, coffeeLine, coffeeCol) {
    var jsFile, jsPos, mapData;
    if (coffeeCol == null) {
        coffeeCol = 0;
    }
    jsFile = coffeeFile.replace(/\/coffee\//, '/js/');
    jsFile = jsFile.replace(/\.coffee$/, '.js');
    if (!slash.fileExists(jsFile)) {
        klog("no jsFile " + jsFile);
        return [null, null, null];
    }
    if (coffeeLine == null) {
        klog("no coffeeLine?");
        return [jsFile, null, null];
    }
    if (valid(mapData = readMap(jsFile))) {
        jsPos = jsPosition(mapData, coffeeLine, coffeeCol);
        return [jsFile, jsPos.line, jsPos.col];
    } else {
        klog("no map " + coffeeFile);
        return [jsFile, null, null];
    }
};

module.exports = {
    toJs: toJs,
    toCoffee: toCoffee,
    errorStack: errorStack,
    errorTrace: errorTrace,
    logErr: logErr
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee