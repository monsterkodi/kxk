/*
 0000000  00000000    0000000  00     00   0000000   00000000   
000       000   000  000       000   000  000   000  000   000  
0000000   0000000    000       000000000  000000000  00000000   
     000  000   000  000       000 0 000  000   000  000        
0000000   000   000   0000000  000   000  000   000  000        
*/
var _, empty, errorStack, errorTrace, filePos, fs, log, logErr, mapConvert, regex1, regex2, slash, sourceMap, str, toCoffee, toJs, valid;

({fs, valid, empty, slash, str, log, _} = require('./kxk'));

sourceMap = require('source-map');

mapConvert = require('convert-source-map');

regex1 = /^\s+at\s+(\S+)\s+\((.*):(\d+):(\d+)\)/;

regex2 = /^\s+at\s+(.*):(\d+):(\d+)/;

// 000       0000000    0000000   00000000  00000000   00000000   
// 000      000   000  000        000       000   000  000   000  
// 000      000   000  000  0000  0000000   0000000    0000000    
// 000      000   000  000   000  000       000   000  000   000  
// 0000000   0000000    0000000   00000000  000   000  000   000  
logErr = function(err, sep = '💥') {
  var i, len, line, ref, results, trace;
  
  // console.log errorStack err
  console.log(err);
  trace = errorTrace(err);
  //console.log 'trace:', str(trace)
  if (valid(trace.lines)) {
    log.flog({
      str: trace.text,
      source: trace.lines[0].file,
      line: trace.lines[0].line,
      sep: sep
    });
    ref = trace.lines;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      sep = slash.isAbsolute(line.file) || line.file[0] === '~' ? '🐞' : '🔼';
      if (sep === '🐞' || line.file[0] === '.') {
        results.push(log.flog({
          str: '       ' + line.func,
          source: line.file,
          line: line.line,
          sep: sep
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  } else {
    return log.flog({
      str: trace.text,
      source: '',
      line: 0,
      sep: sep
    });
  }
};

// 00000000  000  000      00000000  00000000    0000000    0000000  
// 000       000  000      000       000   000  000   000  000       
// 000000    000  000      0000000   00000000   000   000  0000000   
// 000       000  000      000       000        000   000       000  
// 000       000  0000000  00000000  000         0000000   0000000   
filePos = function(line) {
  var a, absFile, b, coffeeCol, coffeeFile, coffeeLine, jsFile, mappedLine, match, result;
  if (match = regex1.exec(line)) {
    result = {
      func: match[1].replace('.<anonymous>', ''),
      file: match[2],
      line: match[3],
      col: match[4]
    };
    if (slash.ext(result.file) === 'js') {
      mappedLine = toCoffee(result.file, result.line, result.col);
      if (mappedLine != null) {
        result.file = mappedLine[0];
        result.line = mappedLine[1];
        result.col = mappedLine[2];
      }
    } else if (slash.ext(result.file) === 'coffee' && !slash.isAbsolute(result.file)) {
      
      // seems like chrome is resolving to relative paths already without mapping the line numbers correctly :(

      // console.log "filePos1 line:'#{line}' result:", str result
      // console.log 'process.cwd', process.cwd()
      // try
      // console.log 'app.getPath("exe")', require('electron').remote.app.getPath 'exe'
      // catch err
      // console.log err.stack
      absFile = slash.resolve(slash.join(process.cwd(), 'coffee', result.file));
      if (slash.fileExists(absFile)) {
        [jsFile, a, b] = toJs(absFile, 1, 0);
        if (slash.fileExists(jsFile)) {
          [coffeeFile, coffeeLine, coffeeCol] = toCoffee(jsFile, result.line, result.col);
          if (slash.fileExists(coffeeFile)) {
            result.file = coffeeFile; // this 'fix' relies on process.cwd to be unchanged
            result.line = coffeeLine; // and only works for app started from source
            result.col = coffeeCol; // via node_modules/electron... :(
          }
        }
      }
    }
  // using app.getPath("exe") and filter out node_modules would probably be better
  } else if (match = regex2.exec(line)) {
    result = {
      func: slash.file(match[1]),
      file: match[1],
      line: match[2],
      col: match[3]
    };
    if (slash.ext(result.file) === 'js') {
      mappedLine = toCoffee(result.file, result.line, result.col);
      if (mappedLine != null) {
        result.file = mappedLine[0];
        result.line = mappedLine[1];
        result.col = mappedLine[2];
      }
    }
  }
  
  // else if slash.ext(result.file) == 'coffee' and not slash.isAbsolute result.file                

  // console.log "filePos2 FIXME!", line, result
  return result;
};

//  0000000  000000000   0000000    0000000  000   000  
// 000          000     000   000  000       000  000   
// 0000000      000     000000000  000       0000000    
//      000     000     000   000  000       000  000   
// 0000000      000     000   000   0000000  000   000  
errorStack = function(err) {
  var fp, i, len, lines, ref, stackLine;
  lines = [];
  ref = err.stack.split('\n');
  for (i = 0, len = ref.length; i < len; i++) {
    stackLine = ref[i];
    if (fp = filePos(stackLine)) {
      lines.push(`       ${_.padEnd(fp.func, 30)} ${fp.file}:${fp.line}`);
    } else {
      lines.push(stackLine);
    }
  }
  return lines.join('\n');
};

// 000000000  00000000    0000000    0000000  00000000  
//    000     000   000  000   000  000       000       
//    000     0000000    000000000  000       0000000   
//    000     000   000  000   000  000       000       
//    000     000   000  000   000   0000000  00000000  
errorTrace = function(err) {
  var fp, i, len, lines, ref, stackLine, text;
  lines = [];
  text = [];
  ref = err.stack.split('\n');
  for (i = 0, len = ref.length; i < len; i++) {
    stackLine = ref[i];
    if (fp = filePos(stackLine)) {
      lines.push(fp);
    } else {
      text.push(stackLine);
    }
  }
  return {
    lines: lines,
    text: text.join('\n')
  };
};


// 000000000   0000000          0000000   0000000   00000000  00000000  00000000  00000000  
//    000     000   000        000       000   000  000       000       000       000       
//    000     000   000        000       000   000  000000    000000    0000000   0000000   
//    000     000   000        000       000   000  000       000       000       000       
//    000      0000000          0000000   0000000   000       000       00000000  00000000  
toCoffee = function(jsFile, jsLine, jsCol = 0) {
  var coffeeCol, coffeeFile, coffeeLine, consumer, mapData, pos, ref;
  jsLine = parseInt(jsLine);
  jsCol = parseInt(jsCol);
  coffeeFile = slash.tilde(jsFile);
  coffeeLine = jsLine;
  coffeeCol = jsCol;
  if (slash.fileExists(jsFile)) {
    mapData = (ref = mapConvert.fromSource(fs.readFileSync(jsFile, 'utf8'))) != null ? ref.toObject() : void 0;
    if (valid(mapData)) {
      if (mapData != null ? mapData.sources[0] : void 0) {
        mapData.sources[0] = slash.resolve(slash.join(slash.dir(jsFile), mapData != null ? mapData.sources[0] : void 0));
      }
      consumer = new sourceMap.SourceMapConsumer(mapData);
      if (consumer.originalPositionFor) {
        pos = consumer.originalPositionFor({
          line: jsLine,
          column: jsCol,
          bias: sourceMap.SourceMapConsumer.LEAST_UPPER_BOUND
        });
        if (valid(pos.line) && valid(pos.column)) {
          coffeeFile = slash.tilde(mapData.sources[0]);
          coffeeLine = pos.line;
          coffeeCol = pos.column;
        } else {
          log('no pos.line', pos);
        }
      } else {
        log('no consumer originalPositionFor', mapData != null, consumer != null);
      }
    }
  }
  return [coffeeFile, coffeeLine, coffeeCol];
};

// 000000000   0000000               000   0000000  
//    000     000   000              000  000       
//    000     000   000              000  0000000   
//    000     000   000        000   000       000  
//    000      0000000          0000000   0000000   
toJs = function(coffeeFile, coffeeLine, coffeeCol = 0) {
  var consumer, jsFile, mapData, poss, ref, ref1, ref2;
  jsFile = coffeeFile.replace(/\/coffee\//, '/js/');
  jsFile = jsFile.replace(/\.coffee$/, '.js');
  if (!slash.fileExists(jsFile)) {
    return [null, null, null];
  }
  if (coffeeLine == null) {
    return jsFile;
  }
  mapData = (ref = mapConvert.fromSource(fs.readFileSync(jsFile, 'utf8'))) != null ? ref.toObject() : void 0;
  if (valid(mapData)) {
    if (mapData != null ? mapData.sources[0] : void 0) {
      mapData.sources[0] = slash.resolve(slash.join(slash.dir(jsFile), mapData != null ? mapData.sources[0] : void 0));
    }
    consumer = new sourceMap.SourceMapConsumer(mapData);
    if ((consumer != null ? consumer.allGeneratedPositionsFor : void 0) != null) {
      poss = consumer.allGeneratedPositionsFor({
        source: mapData.sources[0],
        line: coffeeLine //, column:coffeeCol
      });
      if (valid(poss)) {
        return [jsFile, (ref1 = poss[0]) != null ? ref1.line : void 0, (ref2 = poss[0]) != null ? ref2.column : void 0];
      } else {
        log('empty poss');
      }
    } else {
      log('no allGeneratedPositionsFor in', consumer);
    }
  }
  return [jsFile, null, null];
};

module.exports = {
  toJs: toJs,
  toCoffee: toCoffee,
  errorStack: errorStack,
  errorTrace: errorTrace,
  logErr: logErr
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee