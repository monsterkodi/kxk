// koffee 1.11.0

/*
 0000000  00000000    0000000  00     00   0000000   00000000   
000       000   000  000       000   000  000   000  000   000  
0000000   0000000    000       000000000  000000000  00000000   
     000  000   000  000       000 0 000  000   000  000        
0000000   000   000   0000000  000   000  000   000  000
 */
var _, decode, empty, errorStack, errorTrace, filePos, jsPosition, klog, logErr, readMap, ref, regex1, regex2, sh, slash, sourceMap, toCoffee, toJs, valid;

ref = require('./kxk'), _ = ref._, empty = ref.empty, klog = ref.klog, sh = ref.sh, slash = ref.slash, valid = ref.valid;

sourceMap = require('source-map');

regex1 = /^\s+at\s+(\S+)\s+\((.*):(\d+):(\d+)\)/;

regex2 = /^\s+at\s+(.*):(\d+):(\d+)/;

logErr = function(err, sep) {
    var j, len, line, ref1, results, trace;
    if (sep == null) {
        sep = '💥';
    }
    console.log(err);
    trace = errorTrace(err);
    if (valid(trace.lines)) {
        klog.flog({
            str: trace.text,
            source: trace.lines[0].file,
            line: trace.lines[0].line,
            sep: sep
        });
        ref1 = trace.lines;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            line = ref1[j];
            sep = slash.isAbsolute(line.file) || line.file[0] === '~' ? '🐞' : '🔼';
            if (sep === '🐞' || line.file[0] === '.') {
                results.push(klog.flog({
                    str: '       ' + line.func,
                    source: line.file,
                    line: line.line,
                    sep: sep
                }));
            } else {
                results.push(void 0);
            }
        }
        return results;
    } else {
        return klog.flog({
            str: trace.text,
            source: '',
            line: 0,
            sep: sep
        });
    }
};

filePos = function(line) {
    var a, absFile, b, coffeeCol, coffeeFile, coffeeLine, jsFile, mappedLine, match, ref1, ref2, result;
    if (match = regex1.exec(line)) {
        result = {
            func: match[1].replace('.<anonymous>', ''),
            file: match[2],
            line: match[3],
            col: match[4]
        };
        if (slash.ext(result.file) === 'js') {
            mappedLine = toCoffee(result.file, result.line, result.col);
            if (mappedLine != null) {
                result.file = mappedLine[0];
                result.line = mappedLine[1];
                result.col = mappedLine[2];
            }
        } else if (slash.ext(result.file) === 'coffee' && !slash.isAbsolute(result.file)) {
            absFile = slash.resolve(slash.join(process.cwd(), 'coffee', result.file));
            if (slash.fileExists(absFile)) {
                ref1 = toJs(absFile, 1, 0), jsFile = ref1[0], a = ref1[1], b = ref1[2];
                if (slash.fileExists(jsFile)) {
                    ref2 = toCoffee(jsFile, result.line, result.col), coffeeFile = ref2[0], coffeeLine = ref2[1], coffeeCol = ref2[2];
                    if (slash.fileExists(coffeeFile)) {
                        result.file = coffeeFile;
                        result.line = coffeeLine;
                        result.col = coffeeCol;
                    }
                }
            }
        }
    } else if (match = regex2.exec(line)) {
        result = {
            func: slash.file(match[1]),
            file: match[1],
            line: match[2],
            col: match[3]
        };
        if (slash.ext(result.file) === 'js') {
            mappedLine = toCoffee(result.file, result.line, result.col);
            if (mappedLine != null) {
                result.file = mappedLine[0];
                result.line = mappedLine[1];
                result.col = mappedLine[2];
            }
        }
    }
    return result;
};

errorStack = function(err) {
    var fp, j, len, lines, ref1, stackLine;
    lines = [];
    ref1 = err.stack.split('\n');
    for (j = 0, len = ref1.length; j < len; j++) {
        stackLine = ref1[j];
        if (fp = filePos(stackLine)) {
            lines.push("       " + (_.padEnd(fp.func, 30)) + " " + fp.file + ":" + fp.line);
        } else {
            lines.push(stackLine);
        }
    }
    return lines.join('\n');
};

errorTrace = function(err) {
    var fp, j, len, lines, ref1, stackLine, text;
    lines = [];
    text = [];
    ref1 = err.stack.split('\n');
    for (j = 0, len = ref1.length; j < len; j++) {
        stackLine = ref1[j];
        if (fp = filePos(stackLine)) {
            lines.push(fp);
        } else {
            text.push(stackLine);
        }
    }
    return {
        lines: lines,
        text: text.join('\n')
    };
};

readMap = function(jsFile) {
    var j, l, len, map, mapVar, ref1, source, url, urlVar;
    source = slash.readText(jsFile);
    urlVar = '//# sourceURL=';
    mapVar = '//# sourceMappingURL=';
    ref1 = source.split(/\r?\n/);
    for (j = 0, len = ref1.length; j < len; j++) {
        l = ref1[j];
        if (!url && l.startsWith(urlVar)) {
            url = l.split(urlVar)[1];
        }
        if (!map && l.startsWith(mapVar)) {
            map = l.split(mapVar)[1];
        }
        if (map && url) {
            break;
        }
    }
    if (map) {
        map = map.slice('data:application/json;base64,'.length);
        map = Buffer.from(map, 'base64').toString();
        map = JSON.parse(map);
        if (url && empty(map.sources[0])) {
            klog('no url', url);
            map.sources[0] = url;
        }
    }
    return map;
};

toCoffee = function(jsFile, jsLine, jsCol) {
    var coffeeCol, coffeeFile, coffeeLine, consumer, mapData, pos;
    if (jsCol == null) {
        jsCol = 0;
    }
    jsLine = parseInt(jsLine);
    jsCol = parseInt(jsCol);
    coffeeFile = jsFile.replace(/\/js\//, '/coffee/');
    coffeeFile = coffeeFile.replace(/\.js$/, '.coffee');
    coffeeLine = jsLine;
    coffeeCol = jsCol;
    if (slash.fileExists(jsFile)) {
        if (valid(mapData = readMap(jsFile))) {
            klog('toCoffee', mapData);
            consumer = new sourceMap.SourceMapConsumer(mapData);
            if (consumer.originalPositionFor) {
                pos = consumer.originalPositionFor({
                    line: jsLine,
                    column: jsCol,
                    bias: sourceMap.SourceMapConsumer.LEAST_UPPER_BOUND
                });
                if (valid(pos.line) && valid(pos.column)) {
                    coffeeFile = slash.tilde(mapData.sources[0]);
                    coffeeLine = pos.line;
                    coffeeCol = pos.column;
                } else {
                    klog('invalid line.column');
                }
            } else {
                klog('no consumer originalPositionFor', mapData != null, consumer != null);
            }
        } else {
            klog("no mapData in " + jsFile);
        }
    } else {
        klog("no jsFile " + jsFile);
    }
    return [coffeeFile, coffeeLine, coffeeCol];
};

decode = function(segment) {
    var cc, i, j, rc, ref1, rs;
    rs = [];
    sh = rc = 0;
    for (i = j = 0, ref1 = segment.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        cc = segment.charCodeAt(i) - 65;
        if (cc >= 32) {
            cc -= 6;
        }
        if (cc === -22) {
            cc = 62;
        }
        if (cc === -18) {
            cc = 63;
        }
        if (cc < 0) {
            cc += 69;
        }
        if (cc & 32) {
            sh += 5;
            rc = cc & 0x1f;
        } else {
            rs.push(rc + (cc << sh));
            sh = rc = 0;
        }
    }
    return rs;
};

jsPosition = function(mapData, coffeeLine, coffeeCol) {
    var column, j, jsLine, jsLineIndex, jsLines, k, len, len1, line, ref1, segment;
    klog('jsPosition', coffeeLine, coffeeCol, mapData.file, mapData.sourceRoot, mapData.sources[0], mapData.mappings);
    line = 0;
    column = 0;
    jsLines = mapData.mappings.split(';');
    jsLineIndex = 0;
    for (j = 0, len = jsLines.length; j < len; j++) {
        jsLine = jsLines[j];
        jsLineIndex++;
        if (jsLine.length) {
            ref1 = jsLine.split(',');
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                segment = ref1[k];
                klog(jsLineIndex, segment, decode(segment).join(' '));
            }
        }
    }
    return {
        line: line,
        column: column
    };
};

toJs = function(coffeeFile, coffeeLine, coffeeCol) {
    var consumer, jsFile, mapData, poss, ref1, ref2;
    if (coffeeCol == null) {
        coffeeCol = 0;
    }
    jsFile = coffeeFile.replace(/\/coffee\//, '/js/');
    jsFile = jsFile.replace(/\.coffee$/, '.js');
    if (!slash.fileExists(jsFile)) {
        return [null, null, null];
    }
    if (coffeeLine == null) {
        return [jsFile, null, null];
    }
    if (valid(mapData = readMap(jsFile))) {
        klog('toJS', jsPosition(mapData, coffeeLine, coffeeCol));
        consumer = new sourceMap.SourceMapConsumer(mapData);
        if ((consumer != null ? consumer.allGeneratedPositionsFor : void 0) != null) {
            poss = consumer.allGeneratedPositionsFor({
                source: mapData.sources[0],
                line: coffeeLine,
                column: coffeeCol
            });
            if (valid(poss)) {
                return [jsFile, (ref1 = poss[0]) != null ? ref1.line : void 0, (ref2 = poss[0]) != null ? ref2.column : void 0];
            } else {
                console.log('srcmap.toJs -- empty poss!', mapData.sources[0]);
            }
        } else {
            console.log('srcmap.toJs -- no allGeneratedPositionsFor in', consumer);
        }
    }
    console.log("no map " + coffeeFile);
    return [jsFile, null, null];
};

module.exports = {
    toJs: toJs,
    toCoffee: toCoffee,
    errorStack: errorStack,
    errorTrace: errorTrace,
    logErr: logErr
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee