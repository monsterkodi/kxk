(function() {
  /*
   0000000  00000000    0000000  00     00   0000000   00000000   
  000       000   000  000       000   000  000   000  000   000  
  0000000   0000000    000       000000000  000000000  00000000   
       000  000   000  000       000 0 000  000   000  000        
  0000000   000   000   0000000  000   000  000   000  000        
  */
  var _, empty, errorStack, errorTrace, filePos, fs, log, logErr, mapConvert, regex1, regex2, slash, sourceMap, toCoffee, toJs, valid;

  ({fs, valid, empty, slash, log, _} = require('./kxk'));

  sourceMap = require('source-map');

  mapConvert = require('convert-source-map');

  regex1 = /^\s+at\s+(\S+)\s+\((.*):(\d+):(\d+)\)/;

  regex2 = /^\s+at\s+(.*):(\d+):(\d+)/;

  // 000       0000000    0000000   00000000  00000000   00000000   
  // 000      000   000  000        000       000   000  000   000  
  // 000      000   000  000  0000  0000000   0000000    0000000    
  // 000      000   000  000   000  000       000   000  000   000  
  // 0000000   0000000    0000000   00000000  000   000  000   000  
  logErr = function(err) {
    var i, len, line, ref, results, sep, trace;
    console.log(errorStack(err));
    trace = errorTrace(err);
    log.ulog({
      str: trace.text,
      source: trace.lines[0].file,
      line: trace.lines[0].line,
      sep: '💥'
    });
    ref = trace.lines;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      sep = slash.isAbsolute(line.file) ? '🐞' : '🔼';
      if (sep === '🐞') {
        results.push(log.ulog({
          str: '       ' + line.func,
          source: line.file,
          line: line.line,
          sep: sep
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  // 00000000  000  000      00000000  00000000    0000000    0000000  
  // 000       000  000      000       000   000  000   000  000       
  // 000000    000  000      0000000   00000000   000   000  0000000   
  // 000       000  000      000       000        000   000       000  
  // 000       000  0000000  00000000  000         0000000   0000000   
  filePos = function(line) {
    var mappedLine, match, result;
    if (match = regex1.exec(line)) {
      result = {
        func: match[1].replace('.<anonymous>', ''),
        file: match[2],
        line: match[3],
        col: match[4]
      };
      if (slash.ext(result.file) === 'js') {
        mappedLine = toCoffee(result.file, result.line, result.col);
        if (mappedLine != null) {
          result.file = mappedLine[0];
          result.line = mappedLine[1];
          result.col = mappedLine[2];
        }
      }
    } else if (match = regex2.exec(line)) {
      result = {
        func: slash.file(match[1]),
        file: match[1],
        line: match[2],
        col: match[3]
      };
      if (slash.ext(result.file) === 'js') {
        mappedLine = toCoffee(result.file, result.line, result.col);
        if (mappedLine != null) {
          result.file = mappedLine[0];
          result.line = mappedLine[1];
          result.col = mappedLine[2];
        }
      }
    }
    return result;
  };

  //  0000000  000000000   0000000    0000000  000   000  
  // 000          000     000   000  000       000  000   
  // 0000000      000     000000000  000       0000000    
  //      000     000     000   000  000       000  000   
  // 0000000      000     000   000   0000000  000   000  
  errorStack = function(err) {
    var fp, i, len, lines, ref, stackLine;
    lines = [];
    ref = err.stack.split('\n');
    for (i = 0, len = ref.length; i < len; i++) {
      stackLine = ref[i];
      if (fp = filePos(stackLine)) {
        lines.push(`       ${_.padEnd(fp.func, 30)} ${fp.file}:${fp.line}`);
      } else {
        lines.push(stackLine);
      }
    }
    return lines.join('\n');
  };

  // 000000000  00000000    0000000    0000000  00000000  
  //    000     000   000  000   000  000       000       
  //    000     0000000    000000000  000       0000000   
  //    000     000   000  000   000  000       000       
  //    000     000   000  000   000   0000000  00000000  
  errorTrace = function(err) {
    var fp, i, len, lines, ref, stackLine, text;
    lines = [];
    text = [];
    ref = err.stack.split('\n');
    for (i = 0, len = ref.length; i < len; i++) {
      stackLine = ref[i];
      if (fp = filePos(stackLine)) {
        lines.push(fp);
      } else {
        text.push(stackLine);
      }
    }
    return {
      lines: lines,
      text: text.join('\n')
    };
  };

  
  // 000000000   0000000          0000000   0000000   00000000  00000000  00000000  00000000  
  //    000     000   000        000       000   000  000       000       000       000       
  //    000     000   000        000       000   000  000000    000000    0000000   0000000   
  //    000     000   000        000       000   000  000       000       000       000       
  //    000      0000000          0000000   0000000   000       000       00000000  00000000  
  toCoffee = function(jsFile, jsLine, jsCol = 0) {
    var coffeeCol, coffeeFile, coffeeLine, consumer, mapData, pos, ref;
    jsLine = parseInt(jsLine);
    jsCol = parseInt(jsCol);
    coffeeFile = slash.path(jsFile);
    coffeeLine = jsLine;
    coffeeCol = jsCol;
    if (slash.fileExists(jsFile)) {
      mapData = (ref = mapConvert.fromSource(fs.readFileSync(jsFile, 'utf8'))) != null ? ref.toObject() : void 0;
      if (valid(mapData)) {
        if (mapData != null ? mapData.sources[0] : void 0) {
          mapData.sources[0] = slash.resolve(slash.join(slash.dir(jsFile), mapData != null ? mapData.sources[0] : void 0));
        }
        consumer = new sourceMap.SourceMapConsumer(mapData);
        if (consumer.originalPositionFor) {
          pos = consumer.originalPositionFor({
            line: jsLine,
            column: jsCol,
            bias: sourceMap.SourceMapConsumer.LEAST_UPPER_BOUND
          });
          if (pos.line && pos.column) {
            coffeeFile = mapData.sources[0];
            coffeeLine = pos.line;
            coffeeCol = pos.column;
          }
        }
      }
    }
    return [coffeeFile, coffeeLine, coffeeCol];
  };

  // 000000000   0000000               000   0000000  
  //    000     000   000              000  000       
  //    000     000   000              000  0000000   
  //    000     000   000        000   000       000  
  //    000      0000000          0000000   0000000   
  toJs = function(coffeeFile, coffeeLine, coffeeCol = 0) {
    var consumer, jsCol, jsFile, jsLine, mapData, mapFile, poss, srcFile;
    jsFile = coffeeFile.replace(/\/coffee\//, '/js/');
    jsFile = jsFile.replace(/\.coffee$/, '.js');
    if (!slash.fileExists(jsFile)) {
      if (typeof jsLine === "undefined" || jsLine === null) {
        return null;
      }
      return [null, null, null];
    }
    if (coffeeLine == null) {
      return jsFile;
    }
    mapFile = jsFile;
    if (slash.fileExists(mapFile)) {
      mapData = mapConvert.fromSource(fs.readFileSync(mapFile, 'utf8')).toObject();
      consumer = new sourceMap.SourceMapConsumer(mapData);
      if ((consumer != null ? consumer.allGeneratedPositionsFor : void 0) != null) {
        srcFile = 'js/' + jsFile.split('/js/')[1];
        poss = consumer.allGeneratedPositionsFor({
          source: srcFile,
          line: coffeeLine,
          column: coffeeCol
        });
        if (!poss.length && coffeeCol) {
          poss = consumer.allGeneratedPositionsFor({
            source: srcFile,
            line: coffeeLine,
            column: 0
          });
        }
      } else {
        log(consumer != null, (consumer != null ? consumer.allGeneratedPositionsFor : void 0) != null);
        log('no allGeneratedPositionsFor in', consumer);
      }
      if (empty(poss)) {
        return [jsFile, null, null];
      }
      jsLine = poss[0].line;
      jsCol = poss[0].column;
    } else {
      jsLine = null;
      jsCol = null;
    }
    return [jsFile, jsLine, jsCol];
  };

  module.exports = {
    toJs: toJs,
    toCoffee: toCoffee,
    errorStack: errorStack,
    errorTrace: errorTrace,
    logErr: logErr
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/srcmap.coffee