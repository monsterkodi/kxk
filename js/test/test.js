// koffee 1.20.0
var _, chai, clamp, empty, filelist, filter, kolor, kpos, noon, ref, slash, valid;

ref = require('../'), filelist = ref.filelist, slash = ref.slash, empty = ref.empty, valid = ref.valid, clamp = ref.clamp, kpos = ref.kpos, noon = ref.noon, kolor = ref.kolor, filter = ref.filter, chai = ref.chai, _ = ref._;

kolor.globalize();

chai();

describe('kxk', function() {
    describe('filelist', function() {
        it('exists', function() {
            return _.isFunction(filelist);
        });
        it('chdir', function() {
            process.chdir(__dirname);
            return process.cwd().should.eql(__dirname);
        });
        it('returns an array', function() {
            return _.isArray(filelist('.'));
        });
        it('returns empty array', function() {
            return _.isEmpty(filelist('foobar', {
                logError: false
            }));
        });
        it('finds this file relative', function() {
            return (filelist('.')).should.include('test.coffee');
        });
        it('finds this file absolute', function() {
            return (filelist(__dirname)).should.include(slash.path(__filename));
        });
        it("lists relative path with dot", function() {
            return (filelist('./dir').length).should.gt(0);
        });
        it("lists relative path without dot", function() {
            return (filelist('dir').length).should.gt(0);
        });
        it("ignores hidden files by default", function() {
            return (filelist('dir')).should.not.include(slash.normalize('dir/.konrad.noon'));
        });
        it("includes hidden files", function() {
            return (filelist('dir', {
                'ignoreHidden': false
            })).should.include(slash.normalize('dir/.konrad.noon'));
        });
        it("doesn't recurse by default", function() {
            return (filelist('dir')).should.eql([slash.normalize('dir/noext'), slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt')]);
        });
        it("recurses if depth set", function() {
            return (filelist('dir', {
                depth: 2
            })).should.eql([slash.normalize('dir/noext'), slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt'), slash.normalize('dir/level1/test.coffee'), slash.normalize('dir/level1/test.js'), slash.normalize('dir/level1/test.txt'), slash.normalize('dir/level1/level2/level2.coffee'), slash.normalize('dir/level1b/level1b.coffee')]);
        });
        return it("matches extension", function() {
            return (filelist('dir', {
                depth: 3,
                matchExt: 'coffee'
            })).should.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/level1/test.coffee'), slash.normalize('dir/level1/level2/level2.coffee'), slash.normalize('dir/level1/level2/level3/level3.coffee'), slash.normalize('dir/level1b/level1b.coffee')]);
        });
    });
    describe('kpos', function() {
        it("angle", function() {
            (kpos(1, 0).angle(kpos(0, 1))).should.eql(90);
            (kpos(1, 0).angle(kpos(0, -1))).should.eql(90);
            (kpos(0, 10).angle(kpos(1, 0))).should.eql(90);
            return (kpos(0, -10).angle(kpos(1, 0))).should.eql(90);
        });
        it("rotation", function() {
            (Math.round(kpos(0, 1).rotation(kpos(1, 0)))).should.eql(90);
            (Math.round(kpos(0, -1).rotation(kpos(1, 0)))).should.eql(-90);
            (Math.round(kpos(1, 1).rotation(kpos(1, 0)))).should.eql(45);
            (Math.round(kpos(1, -1).rotation(kpos(1, 0)))).should.eql(-45);
            (Math.round(kpos(1, 0).rotation(kpos(0, 1)))).should.eql(-90);
            return (Math.round(kpos(1, 0).rotation(kpos(0, -1)))).should.eql(90);
        });
        return it("rotate", function() {
            (kpos(1, 0).rotate(90).rounded()).should.eql(kpos(0, 1));
            (kpos(1, 0).rotate(-90).rounded()).should.eql(kpos(0, -1));
            return (kpos(1, 0).rotate(45).rounded(0.001)).should.eql(kpos(1, 1).normal().rounded(0.001));
        });
    });
    describe('clamp', function() {
        it('clamps', function() {
            (clamp(0, 1, 1.1)).should.eql(1);
            (clamp(1, 0, 1.1)).should.eql(1);
            (clamp(2.2, 3, 1.1)).should.eql(2.2);
            return (clamp(3, 2.2, 1.1)).should.eql(2.2);
        });
        return it('nulls', function() {
            (clamp(0, 1)).should.eql(0);
            (clamp(2, 3, void 0)).should.eql(2);
            (clamp(4, 5, null)).should.eql(4);
            (clamp(6, 7, {})).should.eql(6);
            (clamp(8, 9, [])).should.eql(8);
            (clamp(10, 11, clamp)).should.eql(10);
            return (clamp(-3, -2, 0)).should.eql(-2);
        });
    });
    describe('empty', function() {
        var m, s;
        it("''", function() {
            return (empty('')).should.eql(true);
        });
        it('[]', function() {
            return (empty([])).should.eql(true);
        });
        it('{}', function() {
            return (empty({})).should.eql(true);
        });
        it('null', function() {
            return (empty(null)).should.eql(true);
        });
        it('undefined', function() {
            return (empty(void 0)).should.eql(true);
        });
        it('map', function() {
            return (empty(new Map)).should.eql(true);
        });
        it('set', function() {
            return (empty(new Set)).should.eql(true);
        });
        m = new Map;
        s = new Set;
        s.add('s');
        m.set('m', 1);
        it('1', function() {
            return (empty(1)).should.eql(false);
        });
        it('0', function() {
            return (empty(0)).should.eql(false);
        });
        it('[[]]', function() {
            return (empty([[]])).should.eql(false);
        });
        it('a:null', function() {
            return (empty({
                a: null
            })).should.eql(false);
        });
        it("' '", function() {
            return (empty(' ')).should.eql(false);
        });
        it('Infinity', function() {
            return (empty(2e308)).should.eql(false);
        });
        it('Map', function() {
            return (empty(m)).should.eql(false);
        });
        return it('Set', function() {
            return (empty(s)).should.eql(false);
        });
    });
    describe('valid', function() {
        it('false', function() {
            (valid('')).should.eql(false);
            (valid([])).should.eql(false);
            (valid({})).should.eql(false);
            (valid(null)).should.eql(false);
            (valid(void 0)).should.eql(false);
            (valid(new Map)).should.eql(false);
            return (valid(new Set)).should.eql(false);
        });
        return it('true', function() {
            var m, s;
            m = new Map;
            s = new Set;
            s.add('s');
            m.set('m', 1);
            (valid(1)).should.eql(true);
            (valid(0)).should.eql(true);
            (valid([[]])).should.eql(true);
            (valid({
                a: null
            })).should.eql(true);
            (valid(' ')).should.eql(true);
            (valid(2e308)).should.eql(true);
            (valid(m)).should.eql(true);
            return (valid(s)).should.eql(true);
        });
    });
    return describe('filter', function() {
        it('array', function() {
            (filter([1, 2, 3, 4], function(v, i) {
                return i % 2;
            })).should.eql([2, 4]);
            return (filter([1, 2, 3, 4], function(v, i) {
                return v % 2;
            })).should.eql([1, 3]);
        });
        it('object', function() {
            (filter({
                a: 1,
                b: 2,
                c: 3,
                d: 4
            }, function(v, k) {
                return v % 2;
            })).should.eql({
                a: 1,
                c: 3
            });
            return (filter({
                a: 1,
                b: 2,
                c: 3,
                d: 4
            }, function(v, k) {
                return k === 'b' || k === 'c';
            })).should.eql({
                b: 2,
                c: 3
            });
        });
        return it('value', function() {
            (filter(1, function() {})).should.eql(1);
            return (filter("hello", function() {})).should.eql("hello");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../test/test.coffee