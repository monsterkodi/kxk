(function() {
  // 000000000  00000000   0000000  000000000
  //    000     000       000          000
  //    000     0000000   0000000      000
  //    000     000            000     000
  //    000     00000000  0000000      000
  var _, assert, chai, clamp, empty, expect, fileList, filter, log, pos, slash, splitFileLine, valid;

  ({fileList, splitFileLine, slash, pos, empty, valid, clamp, filter, log, _} = require('../')); // '../coffee/kxk'

  assert = require('assert');

  chai = require('chai');

  expect = chai.expect;

  chai.should();

  describe('kxk', function() {
    after(function() {
      return log.stop();
    });
    describe('slash', function() {
      it('dir', function() {
        expect(slash.dir('/some/path/file.txt')).to.eql('/some/path');
        expect(slash.dir('/some/dir/')).to.eql('/some');
        expect(slash.dir('C:\\Back\\')).to.eql('C:/');
        expect(slash.dir('../..')).to.eql('..');
        expect(slash.dir('/')).to.eql('');
        expect(slash.dir('.')).to.eql('');
        expect(slash.dir('..')).to.eql('');
        expect(slash.dir('~')).to.eql('');
        expect(slash.dir('./')).to.eql('');
        expect(slash.dir('../')).to.eql('');
        expect(slash.dir('~/')).to.eql('');
        return expect(slash.dir('C:/')).to.eql('');
      });
      it('pathlist', function() {
        expect(slash.pathlist('/some/path.txt')).to.eql(['/', '/some', '/some/path.txt']);
        expect(slash.pathlist('/')).to.eql(['/']);
        expect(slash.pathlist('')).to.eql([]);
        expect(slash.pathlist('C:\\Back\\Slash\\')).to.eql(['C:/', 'C:/Back', 'C:/Back/Slash/']);
        return expect(slash.pathlist('~')).to.eql(['~']);
      });
      it('base', function() {
        return expect(slash.base('/some/path.txt')).to.eql('path');
      });
      it('path', function() {
        if (!slash.win()) {
          return;
        }
        expect(slash.path("C:\\Back\\Slash\\Crap")).to.eql("C:/Back/Slash/Crap");
        return expect(slash.path("C:\\Back\\Slash\\Crap\\..\\..\\To\\The\\..\\Future")).to.eql("C:/Back/To/Future");
      });
      it('join', function() {
        expect(slash.join('a', 'b', 'c')).to.eql('a/b/c');
        if (!slash.win()) {
          return;
        }
        return expect(slash.join('C:\\FOO', '.\\BAR', 'that\\sucks')).to.eql('C:/FOO/BAR/that/sucks');
      });
      it('home', function() {
        var home;
        if (slash.win()) {
          home = slash.path(process.env['HOMEDRIVE'] + process.env['HOMEPATH']);
        } else {
          home = process.env['HOME'];
        }
        expect(slash.home()).to.eql(home);
        expect(slash.tilde(home)).to.eql('~');
        expect(slash.tilde(home + '/sub')).to.eql('~/sub');
        return expect(slash.untilde('~/sub')).to.eql(home + '/sub');
      });
      it('unenv', function() {
        expect(slash.unenv('C:/$Recycle.bin')).to.eql('C:/$Recycle.bin');
        if (!slash.win()) {
          return;
        }
        return expect(slash.unenv('$HOME/test')).to.eql(slash.path(process.env['HOME']) + '/test');
      });
      it('unslash', function() {
        if (!slash.win()) {
          return;
        }
        return expect(slash.unslash('/c/test')).to.eql('C:\\test');
      });
      it('resolve', function() {
        return expect(slash.resolve('~')).to.eql(slash.home());
      });
      it('relative', function() {
        expect(slash.relative('C:\\test\\some\\path.txt', 'C:\\test\\some\\other\\path')).to.eql('../../path.txt');
        expect(slash.relative('C:\\some\\path', 'C:/some/path')).to.eql('.');
        return expect(slash.relative('C:/Users/kodi/s/konrad/app/js/coffee.js', 'C:/Users/kodi/s/konrad')).to.eql('app/js/coffee.js');
      });
      it('parse', function() {
        expect(slash.parse('c:').root).to.eql('c:/');
        return expect(slash.parse('c:').dir).to.eql('c:/');
      });
      it('split', function() {
        expect(slash.split('/c/users/home/')).to.eql(['c', 'users', 'home']);
        expect(slash.split('d/users/home')).to.eql(['d', 'users', 'home']);
        expect(slash.split('c:/some/path')).to.eql(['c:', 'some', 'path']);
        return expect(slash.split('d:\\some\\path\\')).to.eql(['d:', 'some', 'path']);
      });
      it('splitDrive', function() {
        expect(slash.splitDrive('/some/path')).to.eql(['/some/path', '']);
        if (!slash.win()) {
          return;
        }
        expect(slash.splitDrive('c:/some/path')).to.eql(['/some/path', 'c']);
        expect(slash.splitDrive('c:\\some\\path')).to.eql(['/some/path', 'c']);
        expect(slash.splitDrive('c:\\')).to.eql(['/', 'c']);
        return expect(slash.splitDrive('c:')).to.eql(['/', 'c']);
      });
      it('removeDrive', function() {
        expect(slash.removeDrive('/some/path')).to.eql('/some/path');
        if (!slash.win()) {
          return;
        }
        expect(slash.removeDrive('c:/some/path')).to.eql('/some/path');
        expect(slash.removeDrive('c:\\some\\path')).to.eql('/some/path');
        expect(slash.removeDrive('c:/')).to.eql('/');
        expect(slash.removeDrive('c:\\')).to.eql('/');
        return expect(slash.removeDrive('c:')).to.eql('/');
      });
      it('splitFileLine', function() {
        expect(slash.splitFileLine('/some/path')).to.eql(['/some/path', 1, 0]);
        expect(slash.splitFileLine('/some/path:123')).to.eql(['/some/path', 123, 0]);
        expect(slash.splitFileLine('/some/path:123:15')).to.eql(['/some/path', 123, 15]);
        if (!slash.win()) {
          return;
        }
        expect(slash.splitFileLine('c:/some/path:123')).to.eql(['c:/some/path', 123, 0]);
        return expect(slash.splitFileLine('c:/some/path:123:15')).to.eql(['c:/some/path', 123, 15]);
      });
      it('splitFilePos', function() {
        expect(slash.splitFilePos('/some/path')).to.eql(['/some/path', [0, 0]]);
        expect(slash.splitFilePos('/some/path:123')).to.eql(['/some/path', [0, 122]]);
        expect(slash.splitFilePos('/some/path:123:15')).to.eql(['/some/path', [15, 122]]);
        if (!slash.win()) {
          return;
        }
        expect(slash.splitFilePos('c:/some/path:123')).to.eql(['c:/some/path', [0, 122]]);
        return expect(slash.splitFilePos('c:/some/path:123:15')).to.eql(['c:/some/path', [15, 122]]);
      });
      it('exists', function() {
        expect(slash.exists(__dirname)).to.exist;
        expect(slash.exists(__filename)).to.exist;
        return expect(slash.exists(__filename + 'foo')).to.eql(false);
      });
      it('exists async', function(done) {
        return slash.exists(__filename, function(stat) {
          expect(stat).to.exist;
          return done();
        });
      });
      it('exist async not', function(done) {
        return slash.exists(__filename + 'foo', function(stat) {
          expect(stat).to.not.exist;
          return done();
        });
      });
      it('fileExists', function() {
        expect(slash.fileExists(__filename)).to.exist;
        return expect(slash.fileExists(__dirname)).to.not.exist;
      });
      it('dirExists', function() {
        expect(slash.dirExists(__dirname)).to.exist;
        return expect(slash.dirExists(__filename)).to.not.exist;
      });
      it('pkg', function() {
        expect(slash.pkg(__dirname)).to.exist;
        expect(slash.pkg(__filename)).to.exist;
        expect(slash.pkg('C:\\')).to.not.exist;
        return expect(slash.pkg('C:')).to.not.exist;
      });
      it('isRelative', function() {
        expect(slash.isRelative(__dirname)).to.eql(false);
        expect(slash.isRelative('.')).to.eql(true);
        expect(slash.isRelative('..')).to.eql(true);
        expect(slash.isRelative('.././bla../../fark')).to.eql(true);
        expect(slash.isRelative('C:\\blafark')).to.eql(false);
        return expect(slash.isRelative('..\\blafark')).to.eql(true);
      });
      return it('sanitize', function() {
        expect(slash.sanitize('a.b\n')).to.eql('a.b');
        return expect(slash.sanitize('\n\n c . d  \n\n\n')).to.eql(' c . d  ');
      });
    });
    describe('fileList', function() {
      it("exists", function() {
        return _.isFunction(fileList);
      });
      it("chdir", function() {
        process.chdir(`${__dirname}`);
        return expect(process.cwd()).to.eql(__dirname);
      });
      it("returns an array", function() {
        return _.isArray(fileList('.'));
      });
      it("returns empty array", function() {
        return _.isEmpty(fileList('foobar', {
          logError: false
        }));
      });
      it("finds this file relative", function() {
        return expect(fileList('.')).to.include('test.coffee');
      });
      it("finds this file absolute", function() {
        return expect(fileList(__dirname)).to.include(slash.path(__filename));
      });
      it("lists relative path with dot", function() {
        return expect(fileList('./dir').length).to.gt(0);
      });
      it("lists relative path without dot", function() {
        return expect(fileList('dir').length).to.gt(0);
      });
      it("ignores hidden files by default", function() {
        return expect(fileList('dir')).to.not.include(slash.normalize('dir/.konrad.noon'));
      });
      it("includes hidden files", function() {
        return expect(fileList('dir', {
          'ignoreHidden': false
        })).to.include(slash.normalize('dir/.konrad.noon'));
      });
      it("doesn't recurse by default", function() {
        return expect(fileList('dir')).to.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt')]);
      });
      it("recurses if depth set", function() {
        return expect(fileList('dir', {
          depth: 2
        })).to.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt'), slash.normalize('dir/level1/test.coffee'), slash.normalize('dir/level1/test.js'), slash.normalize('dir/level1/test.txt'), slash.normalize('dir/level1/level2/level2.coffee'), slash.normalize('dir/level1b/level1b.coffee')]);
      });
      return it("matches extension", function() {
        return expect(fileList('dir', {
          depth: 3,
          matchExt: slash.ext(__filename)
        })).to.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/level1/test.coffee'), slash.normalize('dir/level1/level2/level2.coffee'), slash.normalize('dir/level1/level2/level3/level3.coffee'), slash.normalize('dir/level1b/level1b.coffee')]);
      });
    });
    describe('pos', function() {
      it("angle", function() {
        expect(pos(1, 0).angle(pos(0, 1))).to.eql(90);
        expect(pos(1, 0).angle(pos(0, -1))).to.eql(90);
        expect(pos(0, 10).angle(pos(1, 0))).to.eql(90);
        return expect(pos(0, -10).angle(pos(1, 0))).to.eql(90);
      });
      it("rotation", function() {
        expect(Math.round(pos(0, 1).rotation(pos(1, 0)))).to.eql(90);
        expect(Math.round(pos(0, -1).rotation(pos(1, 0)))).to.eql(-90);
        expect(Math.round(pos(1, 1).rotation(pos(1, 0)))).to.eql(45);
        expect(Math.round(pos(1, -1).rotation(pos(1, 0)))).to.eql(-45);
        expect(Math.round(pos(1, 0).rotation(pos(0, 1)))).to.eql(-90);
        return expect(Math.round(pos(1, 0).rotation(pos(0, -1)))).to.eql(90);
      });
      return it("rotate", function() {
        expect(pos(1, 0).rotate(90).rounded()).to.eql(pos(0, 1));
        expect(pos(1, 0).rotate(-90).rounded()).to.eql(pos(0, -1));
        return expect(pos(1, 0).rotate(45).rounded(0.001)).to.eql(pos(1, 1).normal().rounded(0.001));
      });
    });
    describe('clamp', function() {
      it('clamps', function() {
        expect(clamp(0, 1, 1.1)).to.eql(1);
        expect(clamp(1, 0, 1.1)).to.eql(1);
        expect(clamp(2.2, 3, 1.1)).to.eql(2.2);
        return expect(clamp(3, 2.2, 1.1)).to.eql(2.2);
      });
      return it('nulls', function() {
        expect(clamp(0, 1)).to.eql(0);
        expect(clamp(2, 3, void 0)).to.eql(2);
        expect(clamp(4, 5, null)).to.eql(4);
        expect(clamp(6, 7, {})).to.eql(6);
        expect(clamp(8, 9, [])).to.eql(8);
        expect(clamp(10, 11, clamp)).to.eql(10);
        return expect(clamp(-3, -2, 0)).to.eql(-2);
      });
    });
    describe('empty', function() {
      it('true', function() {
        expect(empty('')).to.eql(true);
        expect(empty([])).to.eql(true);
        expect(empty({})).to.eql(true);
        expect(empty(null)).to.eql(true);
        return expect(empty(void 0)).to.eql(true);
      });
      return it('false', function() {
        expect(empty(1)).to.eql(false);
        expect(empty(0)).to.eql(false);
        expect(empty([[]])).to.eql(false);
        expect(empty({
          a: null
        })).to.eql(false);
        expect(empty(' ')).to.eql(false);
        return expect(empty(2e308)).to.eql(false);
      });
    });
    describe('valid', function() {
      it('false', function() {
        expect(valid('')).to.eql(false);
        expect(valid([])).to.eql(false);
        expect(valid({})).to.eql(false);
        expect(valid(null)).to.eql(false);
        return expect(valid(void 0)).to.eql(false);
      });
      return it('true', function() {
        expect(valid(1)).to.eql(true);
        expect(valid(0)).to.eql(true);
        expect(valid([[]])).to.eql(true);
        expect(valid({
          a: null
        })).to.eql(true);
        expect(valid(' ')).to.eql(true);
        return expect(valid(2e308)).to.eql(true);
      });
    });
    return describe('filter', function() {
      it('array', function() {
        expect(filter([1, 2, 3, 4], function(v, i) {
          return i % 2;
        })).to.eql([2, 4]);
        return expect(filter([1, 2, 3, 4], function(v, i) {
          return v % 2;
        })).to.eql([1, 3]);
      });
      it('object', function() {
        expect(filter({
          a: 1,
          b: 2,
          c: 3,
          d: 4
        }, function(v, k) {
          return v % 2;
        })).to.eql({
          a: 1,
          c: 3
        });
        return expect(filter({
          a: 1,
          b: 2,
          c: 3,
          d: 4
        }, function(v, k) {
          return k === 'b' || k === 'c';
        })).to.eql({
          b: 2,
          c: 3
        });
      });
      return it('value', function() {
        expect(filter(1, function() {})).to.eql(1);
        return expect(filter("hello", function() {})).to.eql("hello");
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L3Rlc3QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUE7Ozs7O0FBQUEsTUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQTs7RUFNQSxDQUFBLENBQUUsUUFBRixFQUFZLGFBQVosRUFBMkIsS0FBM0IsRUFBa0MsR0FBbEMsRUFBdUMsS0FBdkMsRUFBOEMsS0FBOUMsRUFBcUQsS0FBckQsRUFBNEQsTUFBNUQsRUFBb0UsR0FBcEUsRUFBeUUsQ0FBekUsQ0FBQSxHQUErRSxPQUFBLENBQVEsS0FBUixDQUEvRSxFQU5BOztFQVFBLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjs7RUFDVCxJQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVI7O0VBQ1QsTUFBQSxHQUFTLElBQUksQ0FBQzs7RUFDZCxJQUFJLENBQUMsTUFBTCxDQUFBOztFQUVBLFFBQUEsQ0FBUyxLQUFULEVBQWdCLFFBQUEsQ0FBQSxDQUFBO0lBRVosS0FBQSxDQUFNLFFBQUEsQ0FBQSxDQUFBO2FBQUcsR0FBRyxDQUFDLElBQUosQ0FBQTtJQUFILENBQU47SUFFQSxRQUFBLENBQVMsT0FBVCxFQUFrQixRQUFBLENBQUEsQ0FBQTtNQUVkLEVBQUEsQ0FBRyxLQUFILEVBQVUsUUFBQSxDQUFBLENBQUE7UUFFTixNQUFBLENBQU8sS0FBSyxDQUFDLEdBQU4sQ0FBVSxxQkFBVixDQUFQLENBQ0EsQ0FBQyxFQUFFLENBQUMsR0FESixDQUNRLFlBRFI7UUFHQSxNQUFBLENBQU8sS0FBSyxDQUFDLEdBQU4sQ0FBVSxZQUFWLENBQVAsQ0FDQSxDQUFDLEVBQUUsQ0FBQyxHQURKLENBQ1EsT0FEUjtRQUdBLE1BQUEsQ0FBTyxLQUFLLENB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QUFLLENBQUEsRUFBRTtRQUFQLENBRFI7TUFMUyxDQUFiO2FBUUEsRUFBQSxDQUFHLE9BQUgsRUFBWSxRQUFBLENBQUEsQ0FBQTtRQUVSLE1BQUEsQ0FBTyxNQUFBLENBQU8sQ0FBUCxFQUFVLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBVixDQUFQLENBQ0EsQ0FBQyxFQUFFLENBQUMsR0FESixDQUNRLENBRFI7ZUFHQSxNQUFBLENBQU8sTUFBQSxDQUFPLE9BQVAsRUFBZ0IsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFoQixDQUFQLENBQ0EsQ0FBQyxFQUFFLENBQUMsR0FESixDQUNRLE9BRFI7TUFMUSxDQUFaO0lBbEJlLENBQW5CO0VBdGhCWSxDQUFoQjtBQWJBIiwic291cmNlc0NvbnRlbnQiOlsiIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwXG4jICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDBcbiMgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMFxuIyAgICAwMDAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgMDAwXG4jICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMDAwMDAgICAgICAwMDBcblxueyBmaWxlTGlzdCwgc3BsaXRGaWxlTGluZSwgc2xhc2gsIHBvcywgZW1wdHksIHZhbGlkLCBjbGFtcCwgZmlsdGVyLCBsb2csIF8gfSA9IHJlcXVpcmUgJy4uLycgIyAnLi4vY29mZmVlL2t4aydcblxuYXNzZXJ0ID0gcmVxdWlyZSAnYXNzZXJ0J1xuY2hhaSAgID0gcmVxdWlyZSAnY2hhaSdcbmV4cGVjdCA9IGNoYWkuZXhwZWN0XG5jaGFpLnNob3VsZCgpXG5cbmRlc2NyaWJlICdreGsnLCAtPlxuICAgIFxuICAgIGFmdGVyIC0+IGxvZy5zdG9wKClcbiAgICBcbiAgICBkZXNjcmliZSAnc2xhc2gnLCAtPlxuXG4gICAgICAgIGl0ICdkaXInLCAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZGlyICcvc29tZS9wYXRoL2ZpbGUudHh0J1xuICAgICAgICAgICAgLnRvLmVxbCAnL3NvbWUvcGF0aCdcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmRpciAnL3NvbWUvZGlyLydcbiAgICAgICAgICAgIC50by5lcWwgJy9zb21lJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZGlyICdDOlxcXFxCYWNrXFxcXCdcbiAgICAgICAgICAgIC50by5lcWwgJ0M6LydcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmRpciAnLi4vLi4nXG4gICAgICAgICAgICAudG8uZXFsICcuLidcblxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmRpciAnLydcbiAgICAgICAgICAgIC50by5lcWwgJydcblxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmRpciAnLidcbiAgICAgICAgICAgIC50by5lcWwgJydcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmRpciAnLi4nXG4gICAgICAgICAgICAudG8uZXFsICcnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5kaXIgJ34nXG4gICAgICAgICAgICAudG8uZXFsICcnXG5cbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5kaXIgJy4vJ1xuICAgICAgICAgICAgLnRvLmVxbCAnJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZGlyICcuLi8nXG4gICAgICAgICAgICAudG8uZXFsICcnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5kaXIgJ34vJ1xuICAgICAgICAgICAgLnRvLmVxbCAnJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZGlyICdDOi8nXG4gICAgICAgICAgICAudG8uZXFsICcnXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgJ3BhdGhsaXN0JywgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnBhdGhsaXN0ICcvc29tZS9wYXRoLnR4dCdcbiAgICAgICAgICAgIC50by5lcWwgWycvJywgJy9zb21lJywgJy9zb21lL3BhdGgudHh0J11cblxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnBhdGhsaXN0ICcvJ1xuICAgICAgICAgICAgLnRvLmVxbCBbJy8nXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucGF0aGxpc3QgJydcbiAgICAgICAgICAgIC50by5lcWwgW11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnBhdGhsaXN0ICdDOlxcXFxCYWNrXFxcXFNsYXNoXFxcXCdcbiAgICAgICAgICAgIC50by5lcWwgWydDOi8nLCAnQzovQmFjaycsICdDOi9CYWNrL1NsYXNoLyddXG5cbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5wYXRobGlzdCAnfidcbiAgICAgICAgICAgIC50by5lcWwgWyd+J11cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBpdCAnYmFzZScsIC0+IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guYmFzZSAnL3NvbWUvcGF0aC50eHQnXG4gICAgICAgICAgICAudG8uZXFsICdwYXRoJ1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBpdCAncGF0aCcsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpZiBub3Qgc2xhc2gud2luKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnBhdGggXCJDOlxcXFxCYWNrXFxcXFNsYXNoXFxcXENyYXBcIlxuICAgICAgICAgICAgLnRvLmVxbCBcIkM6L0JhY2svU2xhc2gvQ3JhcFwiXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5wYXRoIFwiQzpcXFxcQmFja1xcXFxTbGFzaFxcXFxDcmFwXFxcXC4uXFxcXC4uXFxcXFRvXFxcXFRoZVxcXFwuLlxcXFxGdXR1cmVcIlxuICAgICAgICAgICAgLnRvLmVxbCBcIkM6L0JhY2svVG8vRnV0dXJlXCJcbiAgICAgICAgICAgIFxuICAgICAgICBpdCAnam9pbicsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5qb2luICdhJywgJ2InLCAnYydcbiAgICAgICAgICAgIC50by5lcWwgJ2EvYi9jJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gaWYgbm90IHNsYXNoLndpbigpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5qb2luICdDOlxcXFxGT08nLCAnLlxcXFxCQVInLCAndGhhdFxcXFxzdWNrcydcbiAgICAgICAgICAgIC50by5lcWwgJ0M6L0ZPTy9CQVIvdGhhdC9zdWNrcydcbiAgICBcbiAgICAgICAgaXQgJ2hvbWUnLCAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBzbGFzaC53aW4oKVxuICAgICAgICAgICAgICAgIGhvbWUgPSBzbGFzaC5wYXRoIHByb2Nlc3MuZW52WydIT01FRFJJVkUnXSArIHByb2Nlc3MuZW52WydIT01FUEFUSCddXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgaG9tZSA9IHByb2Nlc3MuZW52WydIT01FJ11cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5ob21lKClcbiAgICAgICAgICAgIC50by5lcWwgaG9tZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gudGlsZGUgaG9tZVxuICAgICAgICAgICAgLnRvLmVxbCAnfidcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC50aWxkZSBob21lICsgJy9zdWInXG4gICAgICAgICAgICAudG8uZXFsICd+L3N1YidcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnVudGlsZGUgJ34vc3ViJ1xuICAgICAgICAgICAgLnRvLmVxbCBob21lICsgJy9zdWInXG4gICAgXG4gICAgICAgIGl0ICd1bmVudicsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC51bmVudiAnQzovJFJlY3ljbGUuYmluJ1xuICAgICAgICAgICAgLnRvLmVxbCAnQzovJFJlY3ljbGUuYmluJ1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGlmIG5vdCBzbGFzaC53aW4oKVxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnVuZW52ICckSE9NRS90ZXN0J1xuICAgICAgICAgICAgLnRvLmVxbCBzbGFzaC5wYXRoKHByb2Nlc3MuZW52WydIT01FJ10pICsgJy90ZXN0J1xuICAgIFxuICAgICAgICBpdCAndW5zbGFzaCcsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpZiBub3Qgc2xhc2gud2luKClcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC51bnNsYXNoICcvYy90ZXN0J1xuICAgICAgICAgICAgLnRvLmVxbCAnQzpcXFxcdGVzdCdcbiAgICAgICAgICAgIFxuICAgICAgICBpdCAncmVzb2x2ZScsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5yZXNvbHZlICd+J1xuICAgICAgICAgICAgLnRvLmVxbCBzbGFzaC5ob21lKClcbiAgICBcbiAgICAgICAgaXQgJ3JlbGF0aXZlJywgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnJlbGF0aXZlICdDOlxcXFx0ZXN0XFxcXHNvbWVcXFxccGF0aC50eHQnLCAnQzpcXFxcdGVzdFxcXFxzb21lXFxcXG90aGVyXFxcXHBhdGgnXG4gICAgICAgICAgICAudG8uZXFsICcuLi8uLi9wYXRoLnR4dCdcbiAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucmVsYXRpdmUgJ0M6XFxcXHNvbWVcXFxccGF0aCcsICdDOi9zb21lL3BhdGgnXG4gICAgICAgICAgICAudG8uZXFsICcuJ1xuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnJlbGF0aXZlICdDOi9Vc2Vycy9rb2RpL3Mva29ucmFkL2FwcC9qcy9jb2ZmZWUuanMnLCAnQzovVXNlcnMva29kaS9zL2tvbnJhZCdcbiAgICAgICAgICAgIC50by5lcWwgJ2FwcC9qcy9jb2ZmZWUuanMnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGl0ICdwYXJzZScsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5wYXJzZSgnYzonKS5yb290XG4gICAgICAgICAgICAudG8uZXFsICdjOi8nXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucGFyc2UoJ2M6JykuZGlyXG4gICAgICAgICAgICAudG8uZXFsICdjOi8nXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgJ3NwbGl0JywgLT5cbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5zcGxpdCAnL2MvdXNlcnMvaG9tZS8nXG4gICAgICAgICAgICAudG8uZXFsIFsnYycsICd1c2VycycsICdob21lJ11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0ICdkL3VzZXJzL2hvbWUnXG4gICAgICAgICAgICAudG8uZXFsIFsnZCcsICd1c2VycycsICdob21lJ11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0ICdjOi9zb21lL3BhdGgnXG4gICAgICAgICAgICAudG8uZXFsIFsnYzonLCAnc29tZScsICdwYXRoJ11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0ICdkOlxcXFxzb21lXFxcXHBhdGhcXFxcJ1xuICAgICAgICAgICAgLnRvLmVxbCBbJ2Q6JywgJ3NvbWUnLCAncGF0aCddXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGl0ICdzcGxpdERyaXZlJywgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RHJpdmUgJy9zb21lL3BhdGgnXG4gICAgICAgICAgICAudG8uZXFsIFsnL3NvbWUvcGF0aCcsICcnXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gaWYgbm90IHNsYXNoLndpbigpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5zcGxpdERyaXZlICdjOi9zb21lL3BhdGgnXG4gICAgICAgICAgICAudG8uZXFsIFsnL3NvbWUvcGF0aCcsICdjJ11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RHJpdmUgJ2M6XFxcXHNvbWVcXFxccGF0aCdcbiAgICAgICAgICAgIC50by5lcWwgWycvc29tZS9wYXRoJywgJ2MnXVxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RHJpdmUgJ2M6XFxcXCdcbiAgICAgICAgICAgIC50by5lcWwgWycvJywgJ2MnXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guc3BsaXREcml2ZSAnYzonXG4gICAgICAgICAgICAudG8uZXFsIFsnLycsICdjJ11cbiAgICAgICAgICAgIFxuICAgICAgICBpdCAncmVtb3ZlRHJpdmUnLCAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucmVtb3ZlRHJpdmUgJy9zb21lL3BhdGgnXG4gICAgICAgICAgICAudG8uZXFsICcvc29tZS9wYXRoJ1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGlmIG5vdCBzbGFzaC53aW4oKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucmVtb3ZlRHJpdmUgJ2M6L3NvbWUvcGF0aCdcbiAgICAgICAgICAgIC50by5lcWwgJy9zb21lL3BhdGgnXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucmVtb3ZlRHJpdmUgJ2M6XFxcXHNvbWVcXFxccGF0aCdcbiAgICAgICAgICAgIC50by5lcWwgJy9zb21lL3BhdGgnXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucmVtb3ZlRHJpdmUgJ2M6LydcbiAgICAgICAgICAgIC50by5lcWwgJy8nXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucmVtb3ZlRHJpdmUgJ2M6XFxcXCdcbiAgICAgICAgICAgIC50by5lcWwgJy8nXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5yZW1vdmVEcml2ZSAnYzonXG4gICAgICAgICAgICAudG8uZXFsICcvJ1xuICAgIFxuICAgICAgICBpdCAnc3BsaXRGaWxlTGluZScsIC0+XG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guc3BsaXRGaWxlTGluZSAnL3NvbWUvcGF0aCdcbiAgICAgICAgICAgIC50by5lcWwgWycvc29tZS9wYXRoJywgMSwgMF1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RmlsZUxpbmUgJy9zb21lL3BhdGg6MTIzJ1xuICAgICAgICAgICAgLnRvLmVxbCBbJy9zb21lL3BhdGgnLCAxMjMsIDBdXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guc3BsaXRGaWxlTGluZSAnL3NvbWUvcGF0aDoxMjM6MTUnXG4gICAgICAgICAgICAudG8uZXFsIFsnL3NvbWUvcGF0aCcsIDEyMywgMTVdXG4gICAgXG4gICAgICAgICAgICByZXR1cm4gaWYgbm90IHNsYXNoLndpbigpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5zcGxpdEZpbGVMaW5lICdjOi9zb21lL3BhdGg6MTIzJ1xuICAgICAgICAgICAgLnRvLmVxbCBbJ2M6L3NvbWUvcGF0aCcsIDEyMywgMF1cbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5zcGxpdEZpbGVMaW5lICdjOi9zb21lL3BhdGg6MTIzOjE1J1xuICAgICAgICAgICAgLnRvLmVxbCBbJ2M6L3NvbWUvcGF0aCcsIDEyMywgMTVdXG4gICAgXG4gICAgICAgIGl0ICdzcGxpdEZpbGVQb3MnLCAtPlxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RmlsZVBvcyAnL3NvbWUvcGF0aCdcbiAgICAgICAgICAgIC50by5lcWwgWycvc29tZS9wYXRoJywgWzAsIDBdXVxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RmlsZVBvcyAnL3NvbWUvcGF0aDoxMjMnXG4gICAgICAgICAgICAudG8uZXFsIFsnL3NvbWUvcGF0aCcsIFswLCAxMjJdXVxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RmlsZVBvcyAnL3NvbWUvcGF0aDoxMjM6MTUnXG4gICAgICAgICAgICAudG8uZXFsIFsnL3NvbWUvcGF0aCcsIFsxNSwgMTIyXV1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBpZiBub3Qgc2xhc2gud2luKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNwbGl0RmlsZVBvcyAnYzovc29tZS9wYXRoOjEyMydcbiAgICAgICAgICAgIC50by5lcWwgWydjOi9zb21lL3BhdGgnLCBbMCwgMTIyXV1cbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5zcGxpdEZpbGVQb3MgJ2M6L3NvbWUvcGF0aDoxMjM6MTUnXG4gICAgICAgICAgICAudG8uZXFsIFsnYzovc29tZS9wYXRoJywgWzE1LCAxMjJdXVxuICAgICAgICAgICAgXG4gICAgICAgIGl0ICdleGlzdHMnLCAtPlxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmV4aXN0cyBfX2Rpcm5hbWVcbiAgICAgICAgICAgIC50by5leGlzdFxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmV4aXN0cyBfX2ZpbGVuYW1lXG4gICAgICAgICAgICAudG8uZXhpc3RcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmV4aXN0cyBfX2ZpbGVuYW1lICsgJ2ZvbydcbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICBpdCAnZXhpc3RzIGFzeW5jJywgKGRvbmUpIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNsYXNoLmV4aXN0cyBfX2ZpbGVuYW1lLCAoc3RhdCkgLT5cbiAgICAgICAgICAgICAgICBleHBlY3Qgc3RhdFxuICAgICAgICAgICAgICAgIC50by5leGlzdFxuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgIFxuICAgICAgICBpdCAnZXhpc3QgYXN5bmMgbm90JywgKGRvbmUpIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNsYXNoLmV4aXN0cyBfX2ZpbGVuYW1lICsgJ2ZvbycsIChzdGF0KSAtPlxuICAgICAgICAgICAgICAgIGV4cGVjdCBzdGF0XG4gICAgICAgICAgICAgICAgLnRvLm5vdC5leGlzdFxuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBpdCAnZmlsZUV4aXN0cycsIC0+XG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZmlsZUV4aXN0cyBfX2ZpbGVuYW1lXG4gICAgICAgICAgICAudG8uZXhpc3RcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5maWxlRXhpc3RzIF9fZGlybmFtZVxuICAgICAgICAgICAgLnRvLm5vdC5leGlzdFxuICAgICAgICAgICAgXG4gICAgICAgIGl0ICdkaXJFeGlzdHMnLCAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZGlyRXhpc3RzIF9fZGlybmFtZVxuICAgICAgICAgICAgLnRvLmV4aXN0XG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guZGlyRXhpc3RzIF9fZmlsZW5hbWVcbiAgICAgICAgICAgIC50by5ub3QuZXhpc3RcbiAgICBcbiAgICAgICAgaXQgJ3BrZycsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5wa2cgX19kaXJuYW1lXG4gICAgICAgICAgICAudG8uZXhpc3RcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5wa2cgX19maWxlbmFtZVxuICAgICAgICAgICAgLnRvLmV4aXN0XG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2gucGtnICdDOlxcXFwnXG4gICAgICAgICAgICAudG8ubm90LmV4aXN0XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5wa2cgJ0M6J1xuICAgICAgICAgICAgLnRvLm5vdC5leGlzdFxuICAgICAgICAgICAgXG4gICAgICAgIGl0ICdpc1JlbGF0aXZlJywgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLmlzUmVsYXRpdmUgX19kaXJuYW1lXG4gICAgICAgICAgICAudG8uZXFsIGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5pc1JlbGF0aXZlICcuJ1xuICAgICAgICAgICAgLnRvLmVxbCB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5pc1JlbGF0aXZlICcuLidcbiAgICAgICAgICAgIC50by5lcWwgdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guaXNSZWxhdGl2ZSAnLi4vLi9ibGEuLi8uLi9mYXJrJ1xuICAgICAgICAgICAgLnRvLmVxbCB0cnVlXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guaXNSZWxhdGl2ZSAnQzpcXFxcYmxhZmFyaydcbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBzbGFzaC5pc1JlbGF0aXZlICcuLlxcXFxibGFmYXJrJ1xuICAgICAgICAgICAgLnRvLmVxbCB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgJ3Nhbml0aXplJywgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHNsYXNoLnNhbml0aXplICdhLmJcXG4nXG4gICAgICAgICAgICAudG8uZXFsICdhLmInXG4gICAgXG4gICAgICAgICAgICBleHBlY3Qgc2xhc2guc2FuaXRpemUgJ1xcblxcbiBjIC4gZCAgXFxuXFxuXFxuJ1xuICAgICAgICAgICAgLnRvLmVxbCAnIGMgLiBkICAnXG4gICAgICAgICAgICBcbiAgICBkZXNjcmliZSAnZmlsZUxpc3QnLCAtPlxuICAgIFxuICAgICAgICBpdCBcImV4aXN0c1wiLCAtPiBfLmlzRnVuY3Rpb24gZmlsZUxpc3RcbiAgICAgICAgXG4gICAgICAgIGl0IFwiY2hkaXJcIiwgLT5cbiAgICAgICAgICAgIHByb2Nlc3MuY2hkaXIgXCIje19fZGlybmFtZX1cIlxuICAgICAgICAgICAgZXhwZWN0IHByb2Nlc3MuY3dkKClcbiAgICAgICAgICAgIC50by5lcWwgX19kaXJuYW1lXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgXCJyZXR1cm5zIGFuIGFycmF5XCIsIC0+IF8uaXNBcnJheSBmaWxlTGlzdCAnLidcbiAgICAgICAgXG4gICAgICAgIGl0IFwicmV0dXJucyBlbXB0eSBhcnJheVwiLCAtPiBfLmlzRW1wdHkgZmlsZUxpc3QgJ2Zvb2JhcicsIGxvZ0Vycm9yOiBmYWxzZVxuICAgICAgICBcbiAgICAgICAgaXQgXCJmaW5kcyB0aGlzIGZpbGUgcmVsYXRpdmVcIiwgLT5cbiAgICAgICAgICAgIGV4cGVjdCBmaWxlTGlzdCAnLidcbiAgICAgICAgICAgIC50by5pbmNsdWRlICd0ZXN0LmNvZmZlZSdcbiAgICAgICAgICAgIFxuICAgICAgICBpdCBcImZpbmRzIHRoaXMgZmlsZSBhYnNvbHV0ZVwiLCAtPlxuICAgICAgICAgICAgZXhwZWN0IGZpbGVMaXN0IF9fZGlybmFtZVxuICAgICAgICAgICAgLnRvLmluY2x1ZGUgc2xhc2gucGF0aCBfX2ZpbGVuYW1lXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgXCJsaXN0cyByZWxhdGl2ZSBwYXRoIHdpdGggZG90XCIsIC0+XG4gICAgICAgICAgICBleHBlY3QgZmlsZUxpc3QoJy4vZGlyJykubGVuZ3RoXG4gICAgICAgICAgICAudG8uZ3QgMFxuICAgICAgICAgICAgXG4gICAgICAgIGl0IFwibGlzdHMgcmVsYXRpdmUgcGF0aCB3aXRob3V0IGRvdFwiLCAtPlxuICAgICAgICAgICAgZXhwZWN0IGZpbGVMaXN0KCdkaXInKS5sZW5ndGhcbiAgICAgICAgICAgIC50by5ndCAwXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgXCJpZ25vcmVzIGhpZGRlbiBmaWxlcyBieSBkZWZhdWx0XCIsIC0+XG4gICAgICAgICAgICBleHBlY3QgZmlsZUxpc3QgJ2RpcidcbiAgICAgICAgICAgIC50by5ub3QuaW5jbHVkZSBzbGFzaC5ub3JtYWxpemUgJ2Rpci8ua29ucmFkLm5vb24nXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgXCJpbmNsdWRlcyBoaWRkZW4gZmlsZXNcIiwgLT5cbiAgICAgICAgICAgIGV4cGVjdCBmaWxlTGlzdCAnZGlyJywgJ2lnbm9yZUhpZGRlbic6IGZhbHNlXG4gICAgICAgICAgICAudG8uaW5jbHVkZSBzbGFzaC5ub3JtYWxpemUgJ2Rpci8ua29ucmFkLm5vb24nXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgXCJkb2Vzbid0IHJlY3Vyc2UgYnkgZGVmYXVsdFwiLCAtPlxuICAgICAgICAgICAgZXhwZWN0IGZpbGVMaXN0ICdkaXInXG4gICAgICAgICAgICAudG8uZXFsIFtzbGFzaC5ub3JtYWxpemUoJ2Rpci90ZXN0LmNvZmZlZScpLCBzbGFzaC5ub3JtYWxpemUoJ2Rpci90ZXN0LmpzJyksIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL3Rlc3QudHh0JyldXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgXCJyZWN1cnNlcyBpZiBkZXB0aCBzZXRcIiwgLT5cbiAgICAgICAgICAgIGV4cGVjdCBmaWxlTGlzdCAnZGlyJywgZGVwdGg6IDJcbiAgICAgICAgICAgIC50by5lcWwgW1xuICAgICAgICAgICAgICAgIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL3Rlc3QuY29mZmVlJyksIFxuICAgICAgICAgICAgICAgIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL3Rlc3QuanMnKSwgXG4gICAgICAgICAgICAgICAgc2xhc2gubm9ybWFsaXplKCdkaXIvdGVzdC50eHQnKSwgXG4gICAgICAgICAgICAgICAgc2xhc2gubm9ybWFsaXplKCdkaXIvbGV2ZWwxL3Rlc3QuY29mZmVlJyksIFxuICAgICAgICAgICAgICAgIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL2xldmVsMS90ZXN0LmpzJyksIFxuICAgICAgICAgICAgICAgIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL2xldmVsMS90ZXN0LnR4dCcpLCBcbiAgICAgICAgICAgICAgICBzbGFzaC5ub3JtYWxpemUoJ2Rpci9sZXZlbDEvbGV2ZWwyL2xldmVsMi5jb2ZmZWUnKSwgXG4gICAgICAgICAgICAgICAgc2xhc2gubm9ybWFsaXplKCdkaXIvbGV2ZWwxYi9sZXZlbDFiLmNvZmZlZScpXVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBpdCBcIm1hdGNoZXMgZXh0ZW5zaW9uXCIsIC0+XG4gICAgICAgICAgICBleHBlY3QgZmlsZUxpc3QgJ2RpcicsIGRlcHRoOiAzLCBtYXRjaEV4dDogc2xhc2guZXh0IF9fZmlsZW5hbWVcbiAgICAgICAgICAgIC50by5lcWwgW1xuICAgICAgICAgICAgICAgIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL3Rlc3QuY29mZmVlJyksIFxuICAgICAgICAgICAgICAgIHNsYXNoLm5vcm1hbGl6ZSgnZGlyL2xldmVsMS90ZXN0LmNvZmZlZScpLCBcbiAgICAgICAgICAgICAgICBzbGFzaC5ub3JtYWxpemUoJ2Rpci9sZXZlbDEvbGV2ZWwyL2xldmVsMi5jb2ZmZWUnKSwgXG4gICAgICAgICAgICAgICAgc2xhc2gubm9ybWFsaXplKCdkaXIvbGV2ZWwxL2xldmVsMi9sZXZlbDMvbGV2ZWwzLmNvZmZlZScpLCBcbiAgICAgICAgICAgICAgICBzbGFzaC5ub3JtYWxpemUoJ2Rpci9sZXZlbDFiL2xldmVsMWIuY29mZmVlJyldXG4gICAgXG4gICAgZGVzY3JpYmUgJ3BvcycsIC0+XG4gICAgXG4gICAgICAgIGl0IFwiYW5nbGVcIiwgLT5cbiAgICAgICAgICAgIGV4cGVjdCBwb3MoMSwwKS5hbmdsZShwb3MgMCwxKVxuICAgICAgICAgICAgLnRvLmVxbCA5MFxuICAgICAgICAgICAgZXhwZWN0IHBvcygxLDApLmFuZ2xlKHBvcyAwLC0xKVxuICAgICAgICAgICAgLnRvLmVxbCA5MFxuICAgICAgICAgICAgZXhwZWN0IHBvcygwLDEwKS5hbmdsZShwb3MgMSwwKVxuICAgICAgICAgICAgLnRvLmVxbCA5MFxuICAgICAgICAgICAgZXhwZWN0IHBvcygwLC0xMCkuYW5nbGUocG9zIDEsMClcbiAgICAgICAgICAgIC50by5lcWwgOTBcbiAgICBcbiAgICAgICAgaXQgXCJyb3RhdGlvblwiLCAtPlxuICAgICAgICAgICAgZXhwZWN0IE1hdGgucm91bmQgcG9zKDAsMSkucm90YXRpb24ocG9zIDEsMClcbiAgICAgICAgICAgIC50by5lcWwgOTBcbiAgICAgICAgICAgIGV4cGVjdCBNYXRoLnJvdW5kIHBvcygwLC0xKS5yb3RhdGlvbihwb3MgMSwwKVxuICAgICAgICAgICAgLnRvLmVxbCAtOTBcbiAgICAgICAgICAgIGV4cGVjdCBNYXRoLnJvdW5kIHBvcygxLDEpLnJvdGF0aW9uKHBvcyAxLDApXG4gICAgICAgICAgICAudG8uZXFsIDQ1XG4gICAgICAgICAgICBleHBlY3QgTWF0aC5yb3VuZCBwb3MoMSwtMSkucm90YXRpb24ocG9zIDEsMClcbiAgICAgICAgICAgIC50by5lcWwgLTQ1XG4gICAgICAgICAgICBleHBlY3QgTWF0aC5yb3VuZCBwb3MoMSwwKS5yb3RhdGlvbihwb3MgMCwxKVxuICAgICAgICAgICAgLnRvLmVxbCAtOTBcbiAgICAgICAgICAgIGV4cGVjdCBNYXRoLnJvdW5kIHBvcygxLDApLnJvdGF0aW9uKHBvcyAwLC0xKVxuICAgICAgICAgICAgLnRvLmVxbCA5MFxuICAgIFxuICAgICAgICBpdCBcInJvdGF0ZVwiLCAtPlxuICAgICAgICAgICAgZXhwZWN0IHBvcygxLDApLnJvdGF0ZSg5MCkucm91bmRlZCgpXG4gICAgICAgICAgICAudG8uZXFsIHBvcygwLDEpXG4gICAgICAgICAgICBleHBlY3QgcG9zKDEsMCkucm90YXRlKC05MCkucm91bmRlZCgpXG4gICAgICAgICAgICAudG8uZXFsIHBvcygwLC0xKVxuICAgICAgICAgICAgZXhwZWN0IHBvcygxLDApLnJvdGF0ZSg0NSkucm91bmRlZCgwLjAwMSlcbiAgICAgICAgICAgIC50by5lcWwgcG9zKDEsMSkubm9ybWFsKCkucm91bmRlZCgwLjAwMSlcbiAgICBcbiAgICBkZXNjcmliZSAnY2xhbXAnLCAtPlxuICAgICAgICBcbiAgICAgICAgaXQgJ2NsYW1wcycsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBjbGFtcCAwLCAxLCAxLjFcbiAgICAgICAgICAgIC50by5lcWwgMVxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IGNsYW1wIDEsIDAsIDEuMVxuICAgICAgICAgICAgLnRvLmVxbCAxXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBjbGFtcCAyLjIsIDMsIDEuMVxuICAgICAgICAgICAgLnRvLmVxbCAyLjJcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBjbGFtcCAzLCAyLjIsIDEuMVxuICAgICAgICAgICAgLnRvLmVxbCAyLjJcbiAgICAgICAgICAgIFxuICAgICAgICBpdCAnbnVsbHMnLCAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgY2xhbXAgMCwgMVxuICAgICAgICAgICAgLnRvLmVxbCAwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBjbGFtcCAyLCAzLCB1bmRlZmluZWRcbiAgICAgICAgICAgIC50by5lcWwgMlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgY2xhbXAgNCwgNSwgbnVsbFxuICAgICAgICAgICAgLnRvLmVxbCA0XG4gICAgXG4gICAgICAgICAgICBleHBlY3QgY2xhbXAgNiwgNywge31cbiAgICAgICAgICAgIC50by5lcWwgNlxuICAgIFxuICAgICAgICAgICAgZXhwZWN0IGNsYW1wIDgsIDksIFtdXG4gICAgICAgICAgICAudG8uZXFsIDhcbiAgICBcbiAgICAgICAgICAgIGV4cGVjdCBjbGFtcCAxMCwgMTEsIGNsYW1wXG4gICAgICAgICAgICAudG8uZXFsIDEwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBjbGFtcCAtMywgLTIsIDBcbiAgICAgICAgICAgIC50by5lcWwgLTJcbiAgICAgICAgICAgIFxuICAgIGRlc2NyaWJlICdlbXB0eScsIC0+XG4gICAgICAgIFxuICAgICAgICBpdCAndHJ1ZScsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBlbXB0eSAnJyAgICBcbiAgICAgICAgICAgIC50by5lcWwgdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgZW1wdHkgW10gICAgXG4gICAgICAgICAgICAudG8uZXFsIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGVtcHR5IHt9ICAgIFxuICAgICAgICAgICAgLnRvLmVxbCB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBlbXB0eSBudWxsXG4gICAgICAgICAgICAudG8uZXFsIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGVtcHR5IHVuZGVmaW5lZFxuICAgICAgICAgICAgLnRvLmVxbCB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgJ2ZhbHNlJywgLT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGVtcHR5IDFcbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGVtcHR5IDBcbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGVtcHR5IFtbXV1cbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGVtcHR5IGE6bnVsbFxuICAgICAgICAgICAgLnRvLmVxbCBmYWxzZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgZW1wdHkgJyAnXG4gICAgICAgICAgICAudG8uZXFsIGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBlbXB0eSBJbmZpbml0eVxuICAgICAgICAgICAgLnRvLmVxbCBmYWxzZVxuICAgICAgICAgICAgXG4gICAgZGVzY3JpYmUgJ3ZhbGlkJywgLT5cbiAgICAgICAgXG4gICAgICAgIGl0ICdmYWxzZScsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCB2YWxpZCAnJyAgICBcbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHZhbGlkIFtdICAgIFxuICAgICAgICAgICAgLnRvLmVxbCBmYWxzZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgdmFsaWQge30gICAgXG4gICAgICAgICAgICAudG8uZXFsIGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCB2YWxpZCBudWxsXG4gICAgICAgICAgICAudG8uZXFsIGZhbHNlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCB2YWxpZCB1bmRlZmluZWRcbiAgICAgICAgICAgIC50by5lcWwgZmFsc2VcbiAgICAgICAgICAgIFxuICAgICAgICBpdCAndHJ1ZScsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCB2YWxpZCAxXG4gICAgICAgICAgICAudG8uZXFsIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHZhbGlkIDBcbiAgICAgICAgICAgIC50by5lcWwgdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgdmFsaWQgW1tdXVxuICAgICAgICAgICAgLnRvLmVxbCB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCB2YWxpZCBhOm51bGxcbiAgICAgICAgICAgIC50by5lcWwgdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgdmFsaWQgJyAnXG4gICAgICAgICAgICAudG8uZXFsIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IHZhbGlkIEluZmluaXR5XG4gICAgICAgICAgICAudG8uZXFsIHRydWVcbiAgICAgICAgXG4gICAgZGVzY3JpYmUgJ2ZpbHRlcicsIC0+XG4gICAgICAgIFxuICAgICAgICBpdCAnYXJyYXknLCAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgZmlsdGVyIFsxLDIsMyw0XSwgKHYsaSkgLT4gaSAlIDJcbiAgICAgICAgICAgIC50by5lcWwgWzIsNF1cblxuICAgICAgICAgICAgZXhwZWN0IGZpbHRlciBbMSwyLDMsNF0sICh2LGkpIC0+IHYgJSAyXG4gICAgICAgICAgICAudG8uZXFsIFsxLDNdXG4gICAgICAgICAgICBcbiAgICAgICAgaXQgJ29iamVjdCcsIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCBmaWx0ZXIge2E6MSxiOjIsYzozLGQ6NH0sICh2LGspIC0+IHYgJSAyXG4gICAgICAgICAgICAudG8uZXFsIHthOjEsYzozfVxuXG4gICAgICAgICAgICBleHBlY3QgZmlsdGVyIHthOjEsYjoyLGM6MyxkOjR9LCAodixrKSAtPiBrIGluIFsnYicsICdjJ11cbiAgICAgICAgICAgIC50by5lcWwge2I6MixjOjN9XG4gICAgICAgICAgICBcbiAgICAgICAgaXQgJ3ZhbHVlJywgLT4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0IGZpbHRlciAxLCAtPiBcbiAgICAgICAgICAgIC50by5lcWwgMVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QgZmlsdGVyIFwiaGVsbG9cIiwgLT4gXG4gICAgICAgICAgICAudG8uZXFsIFwiaGVsbG9cIlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICJdfQ==
//# sourceURL=../../test/test.coffee