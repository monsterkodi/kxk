(function() {
  // 000000000  00000000   0000000  000000000
  //    000     000       000          000
  //    000     0000000   0000000      000
  //    000     000            000     000
  //    000     00000000  0000000      000
  var _, assert, chai, clamp, empty, expect, fileList, log, pos, slash, splitFileLine, valid;

  ({fileList, splitFileLine, slash, pos, empty, valid, clamp, log, _} = require('../')); // '../coffee/kxk'

  assert = require('assert');

  chai = require('chai');

  expect = chai.expect;

  chai.should();

  describe('slash', function() {
    it('base', function() {
      return expect(slash.base('/some/path.txt')).to.eql('path');
    });
    it('path', function() {
      if (!slash.win()) {
        return;
      }
      expect(slash.path("C:\\Back\\Slash\\Crap")).to.eql("C:/Back/Slash/Crap");
      return expect(slash.path("C:\\Back\\Slash\\Crap\\..\\..\\To\\The\\..\\Future")).to.eql("C:/Back/To/Future");
    });
    it('join', function() {
      expect(slash.join('a', 'b', 'c')).to.eql('a/b/c');
      if (!slash.win()) {
        return;
      }
      return expect(slash.join('C:\\FOO', '.\\BAR', 'that\\sucks')).to.eql('C:/FOO/BAR/that/sucks');
    });
    it('home', function() {
      var home;
      if (slash.win()) {
        home = slash.path(process.env['HOMEDRIVE'] + process.env['HOMEPATH']);
      } else {
        home = process.env['HOME'];
      }
      expect(slash.home()).to.eql(home);
      expect(slash.tilde(home)).to.eql('~');
      expect(slash.tilde(home + '/sub')).to.eql('~/sub');
      return expect(slash.untilde('~/sub')).to.eql(home + '/sub');
    });
    it('unenv', function() {
      expect(slash.unenv('C:/$Recycle.bin')).to.eql('C:/$Recycle.bin');
      if (!slash.win()) {
        return;
      }
      return expect(slash.unenv('$HOME/test')).to.eql(slash.path(process.env['HOME']) + '/test');
    });
    it('unslash', function() {
      if (!slash.win()) {
        return;
      }
      return expect(slash.unslash('/c/test')).to.eql('C:\\test');
    });
    it('resolve', function() {
      return expect(slash.resolve('~')).to.eql(slash.home());
    });
    it('relative', function() {
      expect(slash.relative('C:\\test\\some\\path.txt', 'C:\\test\\some\\other\\path')).to.eql('../../path.txt');
      expect(slash.relative('C:\\some\\path', 'C:/some/path')).to.eql('.');
      return expect(slash.relative('C:/Users/kodi/s/konrad/app/js/coffee.js', 'C:/Users/kodi/s/konrad')).to.eql('app/js/coffee.js');
    });
    it('parse', function() {
      expect(slash.parse('c:').root).to.eql('c:/');
      return expect(slash.parse('c:').dir).to.eql('c:/');
    });
    it('split', function() {
      expect(slash.split('/c/users/home/')).to.eql(['c', 'users', 'home']);
      expect(slash.split('d/users/home')).to.eql(['d', 'users', 'home']);
      expect(slash.split('c:/some/path')).to.eql(['c:', 'some', 'path']);
      return expect(slash.split('d:\\some\\path\\')).to.eql(['d:', 'some', 'path']);
    });
    it('splitDrive', function() {
      expect(slash.splitDrive('/some/path')).to.eql(['/some/path', '']);
      if (!slash.win()) {
        return;
      }
      expect(slash.splitDrive('c:/some/path')).to.eql(['/some/path', 'c']);
      expect(slash.splitDrive('c:\\some\\path')).to.eql(['/some/path', 'c']);
      expect(slash.splitDrive('c:\\')).to.eql(['/', 'c']);
      return expect(slash.splitDrive('c:')).to.eql(['/', 'c']);
    });
    it('removeDrive', function() {
      expect(slash.removeDrive('/some/path')).to.eql('/some/path');
      if (!slash.win()) {
        return;
      }
      expect(slash.removeDrive('c:/some/path')).to.eql('/some/path');
      expect(slash.removeDrive('c:\\some\\path')).to.eql('/some/path');
      expect(slash.removeDrive('c:/')).to.eql('/');
      expect(slash.removeDrive('c:\\')).to.eql('/');
      return expect(slash.removeDrive('c:')).to.eql('/');
    });
    it('splitFileLine', function() {
      expect(slash.splitFileLine('/some/path')).to.eql(['/some/path', 1, 0]);
      expect(slash.splitFileLine('/some/path:123')).to.eql(['/some/path', 123, 0]);
      expect(slash.splitFileLine('/some/path:123:15')).to.eql(['/some/path', 123, 15]);
      if (!slash.win()) {
        return;
      }
      expect(slash.splitFileLine('c:/some/path:123')).to.eql(['c:/some/path', 123, 0]);
      return expect(slash.splitFileLine('c:/some/path:123:15')).to.eql(['c:/some/path', 123, 15]);
    });
    it('splitFilePos', function() {
      expect(slash.splitFilePos('/some/path')).to.eql(['/some/path', [0, 0]]);
      expect(slash.splitFilePos('/some/path:123')).to.eql(['/some/path', [0, 122]]);
      expect(slash.splitFilePos('/some/path:123:15')).to.eql(['/some/path', [15, 122]]);
      if (!slash.win()) {
        return;
      }
      expect(slash.splitFilePos('c:/some/path:123')).to.eql(['c:/some/path', [0, 122]]);
      return expect(slash.splitFilePos('c:/some/path:123:15')).to.eql(['c:/some/path', [15, 122]]);
    });
    it('exists', function() {
      expect(slash.exists(__dirname)).to.exist;
      expect(slash.exists(__filename)).to.exist;
      return expect(slash.exists(__filename + 'foo')).to.not.exist;
    });
    it('exists async', function(done) {
      return slash.exists(__filename, function(f) {
        expect(slash.samePath(f, __filename)).to.eql(true);
        return done();
      });
    });
    it('exist async not', function(done) {
      return slash.exists(__filename + 'foo', function(f) {
        expect(f).to.eql(void 0);
        return done();
      });
    });
    it('fileExists', function() {
      expect(slash.fileExists(__filename)).to.exist;
      return expect(slash.fileExists(__dirname)).to.not.exist;
    });
    it('dirExists', function() {
      expect(slash.dirExists(__dirname)).to.exist;
      return expect(slash.dirExists(__filename)).to.not.exist;
    });
    it('pkg', function() {
      expect(slash.pkg(__dirname)).to.exist;
      expect(slash.pkg(__filename)).to.exist;
      expect(slash.pkg('C:\\')).to.not.exist;
      return expect(slash.pkg('C:')).to.not.exist;
    });
    it('isRelative', function() {
      expect(slash.isRelative(__dirname)).to.eql(false);
      expect(slash.isRelative('.')).to.eql(true);
      expect(slash.isRelative('..')).to.eql(true);
      expect(slash.isRelative('.././bla../../fark')).to.eql(true);
      expect(slash.isRelative('C:\\blafark')).to.eql(false);
      return expect(slash.isRelative('..\\blafark')).to.eql(true);
    });
    return it('sanitize', function() {
      expect(slash.sanitize('a.b\n')).to.eql('a.b');
      return expect(slash.sanitize('\n\n c . d  \n\n\n')).to.eql(' c . d  ');
    });
  });

  describe('fileList', function() {
    it("exists", function() {
      return _.isFunction(fileList);
    });
    it("chdir", function() {
      process.chdir(`${__dirname}`);
      return expect(process.cwd()).to.eql(__dirname);
    });
    it("returns an array", function() {
      return _.isArray(fileList('.'));
    });
    it("returns empty array", function() {
      return _.isEmpty(fileList('foobar', {
        logError: false
      }));
    });
    it("finds this file relative", function() {
      return expect(fileList('.')).to.include('test.coffee');
    });
    it("finds this file absolute", function() {
      return expect(fileList(__dirname)).to.include(slash.path(__filename));
    });
    it("lists relative path with dot", function() {
      return expect(fileList('./dir').length).to.gt(0);
    });
    it("lists relative path without dot", function() {
      return expect(fileList('dir').length).to.gt(0);
    });
    it("ignores hidden files by default", function() {
      return expect(fileList('dir')).to.not.include(slash.normalize('dir/.konrad.noon'));
    });
    it("includes hidden files", function() {
      return expect(fileList('dir', {
        'ignoreHidden': false
      })).to.include(slash.normalize('dir/.konrad.noon'));
    });
    it("doesn't recurse by default", function() {
      return expect(fileList('dir')).to.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt')]);
    });
    it("recurses if depth set", function() {
      return expect(fileList('dir', {
        depth: 2
      })).to.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/test.js'), slash.normalize('dir/test.txt'), slash.normalize('dir/level1/test.coffee'), slash.normalize('dir/level1/test.js'), slash.normalize('dir/level1/test.txt'), slash.normalize('dir/level1/level2/level2.coffee'), slash.normalize('dir/level1b/level1b.coffee')]);
    });
    return it("matches extension", function() {
      return expect(fileList('dir', {
        depth: 3,
        matchExt: slash.ext(__filename)
      })).to.eql([slash.normalize('dir/test.coffee'), slash.normalize('dir/level1/test.coffee'), slash.normalize('dir/level1/level2/level2.coffee'), slash.normalize('dir/level1/level2/level3/level3.coffee'), slash.normalize('dir/level1b/level1b.coffee')]);
    });
  });

  describe('pos', function() {
    it("angle", function() {
      expect(pos(1, 0).angle(pos(0, 1))).to.eql(90);
      expect(pos(1, 0).angle(pos(0, -1))).to.eql(90);
      expect(pos(0, 10).angle(pos(1, 0))).to.eql(90);
      return expect(pos(0, -10).angle(pos(1, 0))).to.eql(90);
    });
    it("rotation", function() {
      expect(Math.round(pos(0, 1).rotation(pos(1, 0)))).to.eql(90);
      expect(Math.round(pos(0, -1).rotation(pos(1, 0)))).to.eql(-90);
      expect(Math.round(pos(1, 1).rotation(pos(1, 0)))).to.eql(45);
      expect(Math.round(pos(1, -1).rotation(pos(1, 0)))).to.eql(-45);
      expect(Math.round(pos(1, 0).rotation(pos(0, 1)))).to.eql(-90);
      return expect(Math.round(pos(1, 0).rotation(pos(0, -1)))).to.eql(90);
    });
    return it("rotate", function() {
      expect(pos(1, 0).rotate(90).rounded()).to.eql(pos(0, 1));
      expect(pos(1, 0).rotate(-90).rounded()).to.eql(pos(0, -1));
      return expect(pos(1, 0).rotate(45).rounded(0.001)).to.eql(pos(1, 1).normal().rounded(0.001));
    });
  });

  describe('clamp', function() {
    it('clamps', function() {
      expect(clamp(0, 1, 1.1)).to.eql(1);
      expect(clamp(1, 0, 1.1)).to.eql(1);
      expect(clamp(2.2, 3, 1.1)).to.eql(2.2);
      return expect(clamp(3, 2.2, 1.1)).to.eql(2.2);
    });
    return it('nulls', function() {
      expect(clamp(0, 1)).to.eql(0);
      expect(clamp(2, 3, void 0)).to.eql(2);
      expect(clamp(4, 5, null)).to.eql(4);
      expect(clamp(6, 7, {})).to.eql(6);
      expect(clamp(8, 9, [])).to.eql(8);
      expect(clamp(10, 11, clamp)).to.eql(10);
      return expect(clamp(-3, -2, 0)).to.eql(-2);
    });
  });

  describe('empty', function() {
    it('true', function() {
      expect(empty('')).to.eql(true);
      expect(empty([])).to.eql(true);
      expect(empty({})).to.eql(true);
      expect(empty(null)).to.eql(true);
      return expect(empty(void 0)).to.eql(true);
    });
    return it('false', function() {
      expect(empty(1)).to.eql(false);
      expect(empty(0)).to.eql(false);
      expect(empty([[]])).to.eql(false);
      expect(empty({
        a: null
      })).to.eql(false);
      expect(empty(' ')).to.eql(false);
      return expect(empty(2e308)).to.eql(false);
    });
  });

  describe('valid', function() {
    it('false', function() {
      expect(valid('')).to.eql(false);
      expect(valid([])).to.eql(false);
      expect(valid({})).to.eql(false);
      expect(valid(null)).to.eql(false);
      return expect(valid(void 0)).to.eql(false);
    });
    return it('true', function() {
      expect(valid(1)).to.eql(true);
      expect(valid(0)).to.eql(true);
      expect(valid([[]])).to.eql(true);
      expect(valid({
        a: null
      })).to.eql(true);
      expect(valid(' ')).to.eql(true);
      return expect(valid(2e308)).to.eql(true);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../test/test.coffee