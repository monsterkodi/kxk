  /*
  000000000  000  000000000  000      00000000
     000     000     000     000      000     
     000     000     000     000      0000000 
     000     000     000     000      000     
     000     000     000     0000000  00000000
  */
var $, Title, _, elem, empty, keyinfo, log, menu, noon, post, prefs, scheme, sds, slash, stopEvent, str,
  indexOf = [].indexOf;

({elem, sds, prefs, slash, scheme, empty, post, stopEvent, keyinfo, menu, noon, str, log, $, _} = require('./kxk'));

Title = class Title {
  constructor(opt) {
    var pkg, ref;
    this.onTitlebar = this.onTitlebar.bind(this);
    
    // 00     00  00000000  000   000  000   000  
    // 000   000  000       0000  000  000   000  
    // 000000000  0000000   000 0 000  000   000  
    // 000 0 000  000       000  0000  000   000  
    // 000   000  00000000  000   000   0000000   
    this.onMenuAction = this.onMenuAction.bind(this);
    this.menuVisible = this.menuVisible.bind(this);
    this.showMenu = this.showMenu.bind(this);
    this.hideMenu = this.hideMenu.bind(this);
    this.toggleMenu = this.toggleMenu.bind(this);
    this.openMenu = this.openMenu.bind(this);
    this.opt = opt;
    post.on('titlebar', this.onTitlebar);
    post.on('menuAction', this.onMenuAction);
    if (this.opt == null) {
      this.opt = {};
    }
    pkg = this.opt.pkg;
    this.elem = $((ref = this.opt.elem) != null ? ref : "#titlebar");
    this.elem.addEventListener('dblclick', function(event) {
      return stopEvent(event, post.emit('menuAction', 'Maximize'));
    });
    this.winicon = elem({
      class: 'winicon'
    });
    if (this.opt.icon) {
      this.winicon.appendChild(elem('img', {
        src: slash.fileUrl(slash.join(this.opt.dir, this.opt.icon))
      }));
    }
    this.elem.appendChild(this.winicon);
    this.winicon.addEventListener('click', function() {
      return post.emit('menuAction', 'Open Menu');
    });
    this.title = elem({
      class: 'titlebar-title'
    });
    this.elem.appendChild(this.title);
    this.setTitle(pkg);
    
    // ‚Äî ‚óª üû©
    this.minimize = elem({
      class: 'winbutton minimize gray'
    });
    this.minimize.innerHTML = "<svg width=\"100%\" height=\"100%\" viewBox=\"-10 -8 30 30\">\n    <line x1=\"-1\" y1=\"5\" x2=\"11\" y2=\"5\"></line>\n</svg>";
    this.elem.appendChild(this.minimize);
    this.minimize.addEventListener('click', function() {
      return post.emit('menuAction', 'Minimize');
    });
    this.maximize = elem({
      class: 'winbutton maximize gray'
    });
    this.maximize.innerHTML = "<svg width=\"100%\" height=\"100%\" viewBox=\"-10 -9 30 30\">\n  <rect width=\"11\" height=\"11\" style=\"fill-opacity: 0;\"></rect>\n</svg>";
    this.elem.appendChild(this.maximize);
    this.maximize.addEventListener('click', function() {
      return post.emit('menuAction', 'Maximize');
    });
    this.close = elem({
      class: 'winbutton close'
    });
    this.close.innerHTML = "<svg width=\"100%\" height=\"100%\" viewBox=\"-10 -9 30 30\">\n    <line x1=\"0\" y1=\"0\" x2=\"10\" y2=\"11\"></line>\n    <line x1=\"10\" y1=\"0\" x2=\"0\" y2=\"11\"></line>\n</svg>";
    this.elem.appendChild(this.close);
    this.close.addEventListener('click', function() {
      return post.emit('menuAction', 'Close');
    });
    this.topframe = elem({
      class: 'topframe'
    });
    this.elem.appendChild(this.topframe);
    this.initStyle();
    if (this.opt.menu) {
      this.initMenu(this.menuTemplate());
    }
  }

  
  // 00000000   000   000   0000000  000   000  00000000  000      00000000  00     00  
  // 000   000  000   000  000       000   000  000       000      000       000   000  
  // 00000000   000   000  0000000   000000000  0000000   000      0000000   000000000  
  // 000        000   000       000  000   000  000       000      000       000 0 000  
  // 000         0000000   0000000   000   000  00000000  0000000  00000000  000   000  
  pushElem(elem) {
    return this.elem.insertBefore(elem, this.minimize);
  }

  showTitle() {
    return this.title.style.display = 'initial';
  }

  hideTitle() {
    return this.title.style.display = 'none';
  }

  setTitle(info) {
    var html;
    html = `<span class='titlebar-name'>${info.name}</span>`;
    if (info.version) {
      html += "<span class='titlebar-dot'> ‚óè </span>";
      html += `<span class='titlebar-version'>${info.version}</span>`;
    }
    if (info.path) {
      html += "<span class='titlebar-dot'> ‚ñ∫ </span>";
      html += `<span class='titlebar-version'>${info.path}</span>`;
    }
    return this.title.innerHTML = html;
  }

  onTitlebar(action) {
    switch (action) {
      case 'showTitle':
        return this.showTitle();
      case 'hideTitle':
        return this.hideTitle();
      case 'showMenu':
        return this.showMenu();
      case 'hideMenu':
        return this.hideMenu();
      case 'toggleMenu':
        return this.toggleMenu();
    }
  }

  onMenuAction(action, args) {
    var electron, maximized, wa, wb, win;
    electron = require('electron');
    win = electron.remote.getCurrentWindow();
    switch (action) {
      case 'Toggle Menu':
        return this.toggleMenu();
      case 'Open Menu':
        return this.openMenu();
      case 'Show Menu':
        return this.showMenu();
      case 'Hide Menu':
        return this.hideMenu();
      case 'Toggle Scheme':
        if (this.opt.scheme !== false) {
          return scheme.toggle();
        }
        break;
      case 'DevTools':
        return win.webContents.toggleDevTools();
      case 'Reload':
        return win.webContents.reloadIgnoringCache();
      case 'Close':
        return win.close();
      case 'Minimize':
        return win.minimize();
      case 'Maximize':
        wa = electron.screen.getPrimaryDisplay().workAreaSize;
        wb = win.getBounds();
        maximized = win.isMaximized() || (wb.width === wa.width && wb.height === wa.height);
        if (maximized) {
          return win.unmaximize();
        } else {
          return win.maximize();
        }
    }
  }

  menuTemplate() {
    if (empty(this.templateCache)) {
      // log 'menuTemplate', slash.resolve slash.join @opt.dir, @opt.menu
      this.templateCache = this.makeTemplate(noon.load(slash.resolve(slash.join(this.opt.dir, this.opt.menu))));
    }
    if (this.opt.menuTemplate != null) {
      return this.opt.menuTemplate(this.templateCache);
    } else {
      return this.templateCache;
    }
  }

  makeTemplate(obj) {
    var item, menuOrAccel, text, tmpl;
    tmpl = [];
    for (text in obj) {
      menuOrAccel = obj[text];
      tmpl.push((function() {
        switch (false) {
          case !(empty(menuOrAccel) && text.startsWith('-')):
            return {
              text: ''
            };
          case !_.isNumber(menuOrAccel):
            return {
              text: text,
              accel: str(menuOrAccel)
            };
          case !_.isString(menuOrAccel):
            return {
              text: text,
              accel: keyinfo.convertCmdCtrl(menuOrAccel)
            };
          case !empty(menuOrAccel):
            return {
              text: text,
              accel: ''
            };
          default:
            if ((menuOrAccel.accel != null) || (menuOrAccel.command != null)) { // needs better test!
              item = _.clone(menuOrAccel);
              item.text = text;
              return item;
            } else {
              return {
                text: text,
                menu: this.makeTemplate(menuOrAccel)
              };
            }
        }
      }).call(this));
    }
    return tmpl;
  }

  initMenu(items) {
    this.menu = new menu({
      items: items
    });
    this.elem.insertBefore(this.menu.elem, this.elem.firstChild.nextSibling);
    return this.hideMenu();
  }

  menuVisible() {
    return this.menu.elem.style.display !== 'none';
  }

  showMenu() {
    var ref;
    this.menu.elem.style.display = 'inline-block';
    if ((ref = this.menu) != null) {
      if (typeof ref.focus === "function") {
        ref.focus();
      }
    }
    return post.emit('titlebar', 'hideTitle');
  }

  hideMenu() {
    var ref;
    if ((ref = this.menu) != null) {
      ref.close();
    }
    this.menu.elem.style.display = 'none';
    return post.emit('titlebar', 'showTitle');
  }

  toggleMenu() {
    if (this.menuVisible()) {
      return this.hideMenu();
    } else {
      return this.showMenu();
    }
  }

  openMenu() {
    if (this.menuVisible()) {
      return this.hideMenu();
    } else {
      this.showMenu();
      return this.menu.open();
    }
  }

  //  0000000  000000000  000   000  000      00000000  
  // 000          000      000 000   000      000       
  // 0000000      000       00000    000      0000000   
  //      000     000        000     000      000       
  // 0000000      000        000     0000000  00000000  
  initStyle() {
    var href, link, titleStyle;
    if (link = $("#style-link")) {
      href = slash.fileUrl(slash.resolve(slash.join(__dirname, "css/style.css")));
      titleStyle = elem('link', {
        href: href,
        rel: 'stylesheet',
        type: 'text/css'
      });
      link.parentNode.insertBefore(titleStyle, link);
      href = slash.fileUrl(slash.resolve(slash.join(__dirname, `css/${prefs.get('scheme', 'dark')}.css`)));
      titleStyle = elem('link', {
        href: href,
        rel: 'stylesheet',
        type: 'text/css',
        id: 'style-title'
      });
      return link.parentNode.insertBefore(titleStyle, link);
    }
  }

  
  // 000   000  00000000  000   000
  // 000  000   000        000 000
  // 0000000    0000000     00000
  // 000  000   000          000
  // 000   000  00000000     000
  handleKey(event) {
    var accels, combo, combos, i, item, kepaths, keypath, len, mainMenu, ref;
    ({combo} = keyinfo.forEvent(event));
    mainMenu = this.menuTemplate();
    accels = sds.find.key(mainMenu, 'accel');
    combos = sds.find.key(mainMenu, 'combo');
    kepaths = combos.concat(accels); // swap on win?
    for (i = 0, len = kepaths.length; i < len; i++) {
      keypath = kepaths[i];
      combos = sds.get(mainMenu, keypath).split(' ');
      combos = combos.map(function(combo) {
        return keyinfo.convertCmdCtrl(combo);
      });
      if (indexOf.call(combos, combo) >= 0) {
        keypath.pop();
        item = sds.get(mainMenu, keypath);
        post.emit('menuAction', (ref = item.action) != null ? ref : item.text, item);
        return item;
      }
    }
    return 'unhandled';
  }

};

module.exports = Title;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/title.coffee