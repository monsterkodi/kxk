// Generated by CoffeeScript 1.12.7

/*
000000000  000  000000000  000      00000000
   000     000     000     000      000     
   000     000     000     000      0000000 
   000     000     000     000      000     
   000     000     000     0000000  00000000
 */

(function() {
  var $, Title, _, elem, empty, keyinfo, log, menu, noon, post, prefs, ref, scheme, sds, slash, stopEvent, str,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('./kxk'), elem = ref.elem, sds = ref.sds, prefs = ref.prefs, slash = ref.slash, scheme = ref.scheme, empty = ref.empty, post = ref.post, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, menu = ref.menu, noon = ref.noon, str = ref.str, log = ref.log, $ = ref.$, _ = ref._;

  Title = (function() {
    function Title(opt) {
      var html, pkg, ref1;
      this.opt = opt;
      this.openMenu = bind(this.openMenu, this);
      this.toggleMenu = bind(this.toggleMenu, this);
      this.hideMenu = bind(this.hideMenu, this);
      this.showMenu = bind(this.showMenu, this);
      this.menuVisible = bind(this.menuVisible, this);
      this.onMenuAction = bind(this.onMenuAction, this);
      this.onTitlebar = bind(this.onTitlebar, this);
      post.on('titlebar', this.onTitlebar);
      post.on('menuAction', this.onMenuAction);
      if (this.opt == null) {
        this.opt = {};
      }
      pkg = this.opt.pkg;
      this.elem = $((ref1 = this.opt.elem) != null ? ref1 : "#titlebar");
      this.elem.addEventListener('dblclick', function(event) {
        return stopEvent(event, post.emit('menuAction', 'Maximize'));
      });
      this.winicon = elem({
        "class": 'winicon'
      });
      this.winicon.appendChild(elem('img', {
        src: slash.fileUrl(slash.join(this.opt.dir, this.opt.icon))
      }));
      this.elem.appendChild(this.winicon);
      this.winicon.addEventListener('click', function() {
        return post.emit('menuAction', 'Open Menu');
      });
      this.title = elem({
        "class": 'titlebar-title'
      });
      html = "<span class='titlebar-name'>" + pkg.name + "</span>";
      html += "<span class='titlebar-dot'> ‚óè </span>";
      html += "<span class='titlebar-version'>" + pkg.version + "</span>";
      this.title.innerHTML = html;
      this.elem.appendChild(this.title);
      this.minimize = elem({
        "class": 'winbutton minimize gray'
      });
      this.minimize.innerHTML = "<svg width=\"100%\" height=\"100%\" viewBox=\"-10 -8 30 30\">\n    <line x1=\"-1\" y1=\"5\" x2=\"11\" y2=\"5\"></line>\n</svg>";
      this.elem.appendChild(this.minimize);
      this.minimize.addEventListener('click', function() {
        return post.emit('menuAction', 'Minimize');
      });
      this.maximize = elem({
        "class": 'winbutton maximize gray'
      });
      this.maximize.innerHTML = "<svg width=\"100%\" height=\"100%\" viewBox=\"-10 -9 30 30\">\n  <rect width=\"11\" height=\"11\" style=\"fill-opacity: 0;\"></rect>\n</svg>";
      this.elem.appendChild(this.maximize);
      this.maximize.addEventListener('click', function() {
        return post.emit('menuAction', 'Maximize');
      });
      this.close = elem({
        "class": 'winbutton close'
      });
      this.close.innerHTML = "<svg width=\"100%\" height=\"100%\" viewBox=\"-10 -9 30 30\">\n    <line x1=\"0\" y1=\"0\" x2=\"10\" y2=\"11\"></line>\n    <line x1=\"10\" y1=\"0\" x2=\"0\" y2=\"11\"></line>\n</svg>";
      this.elem.appendChild(this.close);
      this.close.addEventListener('click', function() {
        return post.emit('menuAction', 'Close');
      });
      this.initStyle();
      if (this.opt.menu) {
        this.initMenu(this.menuTemplate());
      }
    }

    Title.prototype.showTitle = function() {
      return this.title.style.display = 'initial';
    };

    Title.prototype.hideTitle = function() {
      return this.title.style.display = 'none';
    };

    Title.prototype.onTitlebar = function(action) {
      switch (action) {
        case 'showTitle':
          return this.showTitle();
        case 'hideTitle':
          return this.hideTitle();
        case 'showMenu':
          return this.showMenu();
        case 'hideMenu':
          return this.hideMenu();
        case 'toggleMenu':
          return this.toggleMenu();
      }
    };

    Title.prototype.onMenuAction = function(action, args) {
      var electron, maximized, wa, wb, win;
      electron = require('electron');
      win = electron.remote.getCurrentWindow();
      switch (action) {
        case 'Toggle Menu':
          return this.toggleMenu();
        case 'Open Menu':
          return this.openMenu();
        case 'Show Menu':
          return this.showMenu();
        case 'Hide Menu':
          return this.hideMenu();
        case 'Toggle Scheme':
          return scheme.toggle();
        case 'DevTools':
          return win.webContents.toggleDevTools();
        case 'Reload':
          return win.webContents.reloadIgnoringCache();
        case 'Close':
          return win.close();
        case 'Minimize':
          return win.minimize();
        case 'Maximize':
          wa = electron.screen.getPrimaryDisplay().workAreaSize;
          wb = win.getBounds();
          maximized = win.isMaximized() || (wb.width === wa.width && wb.height === wa.height);
          if (maximized) {
            return win.unmaximize();
          } else {
            return win.maximize();
          }
      }
    };

    Title.prototype.menuTemplate = function() {
      if (empty(this.templateCache)) {
        log('menuTemplate', slash.resolve(slash.join(this.opt.dir, this.opt.menu)));
        this.templateCache = this.makeTemplate(noon.load(slash.resolve(slash.join(this.opt.dir, this.opt.menu))));
      }
      return this.templateCache;
    };

    Title.prototype.makeTemplate = function(obj) {
      var menuOrAccel, text, tmpl;
      tmpl = [];
      for (text in obj) {
        menuOrAccel = obj[text];
        tmpl.push((function() {
          switch (false) {
            case !(empty(menuOrAccel) && text.startsWith('-')):
              return {
                text: ''
              };
            case !_.isNumber(menuOrAccel):
              return {
                text: text,
                accel: str(menuOrAccel)
              };
            case !_.isString(menuOrAccel):
              return {
                text: text,
                accel: menuOrAccel
              };
            case !empty(menuOrAccel):
              return {
                text: text,
                accel: ''
              };
            default:
              return {
                text: text,
                menu: this.makeTemplate(menuOrAccel)
              };
          }
        }).call(this));
      }
      return tmpl;
    };

    Title.prototype.initMenu = function(items) {
      this.menu = new menu({
        items: items
      });
      this.elem.insertBefore(this.menu.elem, this.elem.firstChild.nextSibling);
      return this.hideMenu();
    };

    Title.prototype.menuVisible = function() {
      return this.menu.elem.style.display !== 'none';
    };

    Title.prototype.showMenu = function() {
      var ref1;
      this.menu.elem.style.display = 'inline-block';
      if ((ref1 = this.menu) != null) {
        if (typeof ref1.focus === "function") {
          ref1.focus();
        }
      }
      return post.emit('titlebar', 'hideTitle');
    };

    Title.prototype.hideMenu = function() {
      var ref1;
      if ((ref1 = this.menu) != null) {
        ref1.close();
      }
      this.menu.elem.style.display = 'none';
      return post.emit('titlebar', 'showTitle');
    };

    Title.prototype.toggleMenu = function() {
      if (this.menuVisible()) {
        return this.hideMenu();
      } else {
        return this.showMenu();
      }
    };

    Title.prototype.openMenu = function() {
      if (this.menuVisible()) {
        return this.hideMenu();
      } else {
        this.showMenu();
        return this.menu.open();
      }
    };

    Title.prototype.initStyle = function() {
      var href, link, titleStyle;
      if (link = $("#style-link")) {
        href = slash.fileUrl(slash.resolve(slash.join(__dirname, "css/style.css")));
        titleStyle = elem('link', {
          href: href,
          rel: 'stylesheet',
          type: 'text/css'
        });
        link.parentNode.insertBefore(titleStyle, link);
        href = slash.fileUrl(slash.resolve(slash.join(__dirname, "css/" + (prefs.get('scheme', 'dark')) + ".css")));
        titleStyle = elem('link', {
          href: href,
          rel: 'stylesheet',
          type: 'text/css',
          id: 'style-title'
        });
        return link.parentNode.insertBefore(titleStyle, link);
      }
    };

    Title.prototype.handleKey = function(event) {
      var combo, combos, i, item, keypath, len, mainMenu, ref1, ref2;
      combo = keyinfo.forEvent(event).combo;
      mainMenu = this.menuTemplate();
      ref1 = sds.find.key(mainMenu, 'accel');
      for (i = 0, len = ref1.length; i < len; i++) {
        keypath = ref1[i];
        combos = sds.get(mainMenu, keypath).split(' ');
        if (indexOf.call(combos, combo) >= 0) {
          keypath.pop();
          item = sds.get(mainMenu, keypath);
          post.emit('menuAction', (ref2 = item.action) != null ? ref2 : item.text, item.actarg);
          return item;
        }
      }
      return 'unhandled';
    };

    return Title;

  })();

  module.exports = Title;

}).call(this);
