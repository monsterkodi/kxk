(function() {
  /*
  00       0000000    0000000 
  00      000   000  000      
  00      000   000  000  0000
  00      000   000  000   000
  000000   0000000    0000000 
  */
  var _, fs, log, os, post, slog, sorcery, stack, str, sutil, udpLog, udpSend;

  post = require('./ppost');

  str = require('./str');

  os = require('os');

  fs = require('fs');

  _ = require('lodash');

  sutil = require('stack-utils');

  sorcery = require('sorcery');

  stack = new sutil({
    cwd: process.cwd(),
    internals: sutil.nodeInternals()
  });

  udpSend = null;

  udpLog = function(info) {
    var udp;
    if (!udpSend) {
      udp = require('./udp');
      udpSend = new udp({
        debug: slog.debug
      });
    }
    info.id = slog.id;
    info.icon = slog.icon;
    return udpSend.send(info);
  };

  slog = function(s) {
    var chain, err, f, file, info, match, meth, slash, source, sourceText;
    slash = require('./slash'); // fancy log with source-mapped files and line numbers
    try {
      f = stack.capture()[slog.depth];
      if (chain = sorcery.loadSync(f.getFileName())) {
        info = chain.trace(f.getLineNumber(), 0);
        source = f.getFileName();
        if (!slash.samePath(f.getScriptNameOrSourceURL(), f.getFileName())) {
          source = slash.path(f.getScriptNameOrSourceURL());
        } else {
          sourceText = fs.readFileSync(f.getFileName(), 'utf8');
          // balancer is broken. below is not a comment. should handle escaped hash signs. 
          match = sourceText.match(/\/\/\# sourceURL=(.+)$/);
          if ((match != null ? match[1] : void 0) != null) {
            source = match != null ? match[1] : void 0;
          }
        }
        info.source = slash.tilde(source);
      } else {
        info = {
          source: slash.tilde(f.getFileName()),
          line: f.getLineNumber()
        };
      }
      file = _.padStart(`${info.source}:${info.line}`, slog.filepad);
      meth = _.padEnd(f.getFunctionName(), slog.methpad);
      info.str = s;
      s = `${file}${slog.filesep}${meth}${slog.methsep}${s}`;
      post.emit('slog', s, info);
      if (slog.udp) {
        return udpLog(info);
      }
    } catch (error) {
      err = error;
      return post.emit('slog', `!${slog.methsep}${s} ${err}`);
    }
  };

  log = function() {
    var s;
    s = ((function() {
      var i, len, ref, results;
      ref = [].slice.call(arguments, 0);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        results.push(str(s));
      }
      return results;
    }).apply(this, arguments)).join(" ");
    post.emit('log', s);
    console.log(s);
    return slog(s);
  };

  slog.udp = true;

  slog.id = 'kxk';

  slog.icon = '⛾';

  slog.depth = 2;

  slog.filesep = ' > '; //' ⦿ '

  slog.methsep = ' >> '; //' ▸ '

  slog.filepad = 30;

  slog.methpad = 15;

  log.slog = slog;

  module.exports = log;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWUvbG9nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBOztFQVFBLElBQUEsR0FBVSxPQUFBLENBQVEsU0FBUjs7RUFDVixHQUFBLEdBQVUsT0FBQSxDQUFRLE9BQVI7O0VBQ1YsRUFBQSxHQUFVLE9BQUEsQ0FBUSxJQUFSOztFQUNWLEVBQUEsR0FBVSxPQUFBLENBQVEsSUFBUjs7RUFDVixDQUFBLEdBQVUsT0FBQSxDQUFRLFFBQVI7O0VBQ1YsS0FBQSxHQUFVLE9BQUEsQ0FBUSxhQUFSOztFQUNWLE9BQUEsR0FBVSxPQUFBLENBQVEsU0FBUjs7RUFFVixLQUFBLEdBQVUsSUFBSSxLQUFKLENBQVU7SUFBQSxHQUFBLEVBQUssT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUFMO0lBQW9CLFNBQUEsRUFBVyxLQUFLLENBQUMsYUFBTixDQUFBO0VBQS9CLENBQVY7O0VBRVYsT0FBQSxHQUFVOztFQUNWLE1BQUEsR0FBUyxRQUFBLENBQUMsSUFBRCxDQUFBO0FBQ0wsUUFBQTtJQUFBLElBQUcsQ0FBSSxPQUFQO01BQ0ksR0FBQSxHQUFNLE9BQUEsQ0FBUSxPQUFSO01BQ04sT0FBQSxHQUFVLElBQUksR0FBSixDQUFRO1FBQUEsS0FBQSxFQUFNLElBQUksQ0FBQztNQUFYLENBQVIsRUFGZDs7SUFHQSxJQUFJLENBQUMsRUFBTCxHQUFZLElBQUksQ0FBQztJQUNqQixJQUFJLENBQUMsSUFBTCxHQUFZLElBQUksQ0FBQztXQUNqQixPQUFPLENBQUMsSUFBUixDQUFhLElBQWI7RUFOSzs7RUFRVCxJQUFBLEdBQU8sUUFBQSxDQUFDLENBQUQsQ0FBQTtBQUVILFFBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUE7SUFBQSxLQUFBLEdBQVEsT0FBQSxDQUFRLFNBQVIsRUFBUjtBQUVBO01BQ0ksQ0FBQSxHQUFJLEtBQUssQ0FBQyxPQUFOLENBQUEsQ0FBZ0IsQ0FBQSxJQUFJLENBQUMsS0FBTDtNQUNwQixJQUFHLEtBQUEsR0FBUSxPQUFPLENBQUMsUUFBUixDQUFpQixDQUFDLENBQUMsV0FBRixDQUFBLENBQWpCLENBQVg7UUFDSSxJQUFBLEdBQVMsS0FBSyxDQUFDLEtBQU4sQ0FBWSxDQUFDLENBQUMsYUFBRixDQUFBLENBQVosRUFBK0IsQ0FBL0I7UUFDVCxNQUFBLEdBQVMsQ0FBQyxDQUFDLFdBQUYsQ0FBQTtRQUNULElBQUcsQ0FBSSxLQUFLLENBQUMsUUFBTixDQUFlLENBQUMsQ0FBQyx3QkFBRixDQUFBLENBQWYsRUFBNkMsQ0FBQyxDQUFDLFdBQUYsQ0FBQSxDQUE3QyxDQUFQO1VBQ0ksTUFBQSxHQUFTLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxDQUFDLHdCQUFGLENBQUEsQ0FBWCxFQURiO1NBQUEsTUFBQTtVQUdJLFVBQUEsR0FBYSxFQUFFLENBQUMsWUFBSCxDQUFnQixDQUFDLENBQUMsV0FBRixDQUFBLENBQWhCLEVBQWlDLE1BQWpDLEVBQWI7O1VBRUEsS0FBQSxHQUFTLFVBQVUsQ0FBQyxLQUFYLENBQWlCLHdCQUFqQjtVQUNULElBQUcsMkNBQUg7WUFDSSxNQUFBLG1CQUFTLEtBQU8sQ0FBQSxDQUFBLFdBRHBCO1dBTko7O1FBUUEsSUFBSSxDQUFDLE1BQUwsR0FBYyxLQUFLLENBQUMsS0FBTixDQUFZLE1BQVosRUFYbEI7T0FBQSxNQUFBO1FBYUksSUFBQSxHQUFPO1VBQUEsTUFBQSxFQUFRLEtBQUssQ0FBQyxLQUFOLENBQVksQ0FBQyxDQUFDLFdBQUYsQ0FBQSxDQUFaLENBQVI7VUFBc0MsSUFBQSxFQUFNLENBQUMsQ0FBQyxhQUFGLENBQUE7UUFBNUMsRUFiWDs7TUFlQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxDQUFBLENBQUEsQ0FBRyxJQUFJLENBQUMsTUFBUixDQUFlLENBQWYsQ0FBQSxDQUFrQixJQUFJLENBQUMsSUFBdkIsQ0FBQSxDQUFYLEVBQTBDLElBQUksQ0FBQyxPQUEvQztNQUNQLElBQUEsR0FBTyxDQUFDLENBQUMsTUFBRixDQUFTLENBQUMsQ0FBQyxlQUFGLENBQUEsQ0FBVCxFQUE4QixJQUFJLENBQUMsT0FBbkM7TUFDUCxJQUFJLENBQUMsR0FBTCxHQUFXO01BQ1gsQ0FBQSxHQUFJLENBQUEsQ0FBQSxDQUFHLElBQUgsQ0FBQSxDQUFBLENBQVUsSUFBSSxDQUFDLE9BQWYsQ0FBQSxDQUFBLENBQXlCLElBQXpCLENBQUEsQ0FBQSxDQUFnQyxJQUFJLENBQUMsT0FBckMsQ0FBQSxDQUFBLENBQStDLENBQS9DLENBQUE7TUFDSixJQUFJLENBQUMsSUFBTCxDQUFVLE1BQVYsRUFBa0IsQ0FBbEIsRUFBcUIsSUFBckI7TUFDQSxJQUFHLElBQUksQ0FBQyxHQUFSO2VBQ0ksTUFBQSxDQUFPLElBQVAsRUFESjtPQXRCSjtLQUFBLGFBQUE7TUF5Qk07YUFDRixJQUFJLENBQUMsSUFBTCxDQUFVLE1BQVYsRUFBa0IsQ0FBQSxDQUFBLENBQUEsQ0FBSSxJQUFJLENBQUMsT0FBVCxDQUFBLENBQUEsQ0FBbUIsQ0FBbkIsRUFBQSxDQUFBLENBQXdCLEdBQXhCLENBQUEsQ0FBbEIsRUExQko7O0VBSkc7O0VBZ0NQLEdBQUEsR0FBTSxRQUFBLENBQUEsQ0FBQTtBQUVGLFFBQUE7SUFBQSxDQUFBLEdBQUk7O0FBQVE7QUFBQTtNQUFBLEtBQUEscUNBQUE7O3FCQUFQLEdBQUEsQ0FBSSxDQUFKO01BQU8sQ0FBQTs7NkJBQVIsQ0FBNEMsQ0FBQyxJQUE3QyxDQUFrRCxHQUFsRDtJQUVKLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBVixFQUFpQixDQUFqQjtJQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBWjtXQUNBLElBQUEsQ0FBSyxDQUFMO0VBTkU7O0VBUU4sSUFBSSxDQUFDLEdBQUwsR0FBZTs7RUFDZixJQUFJLENBQUMsRUFBTCxHQUFlOztFQUNmLElBQUksQ0FBQyxJQUFMLEdBQWU7O0VBQ2YsSUFBSSxDQUFDLEtBQUwsR0FBZTs7RUFDZixJQUFJLENBQUMsT0FBTCxHQUFlLE1BdkVmOztFQXdFQSxJQUFJLENBQUMsT0FBTCxHQUFlLE9BeEVmOztFQXlFQSxJQUFJLENBQUMsT0FBTCxHQUFlOztFQUNmLElBQUksQ0FBQyxPQUFMLEdBQWU7O0VBQ2YsR0FBRyxDQUFDLElBQUosR0FBZTs7RUFFZixNQUFNLENBQUMsT0FBUCxHQUFpQjtBQTdFakIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCBcbjAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICBcbjAwICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDBcbjAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCBcbiMjI1xuXG5wb3N0ICAgID0gcmVxdWlyZSAnLi9wcG9zdCcgXG5zdHIgICAgID0gcmVxdWlyZSAnLi9zdHInXG5vcyAgICAgID0gcmVxdWlyZSAnb3MnXG5mcyAgICAgID0gcmVxdWlyZSAnZnMnXG5fICAgICAgID0gcmVxdWlyZSAnbG9kYXNoJ1xuc3V0aWwgICA9IHJlcXVpcmUgJ3N0YWNrLXV0aWxzJ1xuc29yY2VyeSA9IHJlcXVpcmUgJ3NvcmNlcnknXG5cbnN0YWNrICAgPSBuZXcgc3V0aWwgY3dkOiBwcm9jZXNzLmN3ZCgpLCBpbnRlcm5hbHM6IHN1dGlsLm5vZGVJbnRlcm5hbHMoKVxuXG51ZHBTZW5kID0gbnVsbFxudWRwTG9nID0gKGluZm8pIC0+XG4gICAgaWYgbm90IHVkcFNlbmRcbiAgICAgICAgdWRwID0gcmVxdWlyZSAnLi91ZHAnXG4gICAgICAgIHVkcFNlbmQgPSBuZXcgdWRwIGRlYnVnOnNsb2cuZGVidWdcbiAgICBpbmZvLmlkICAgPSBzbG9nLmlkXG4gICAgaW5mby5pY29uID0gc2xvZy5pY29uXG4gICAgdWRwU2VuZC5zZW5kIGluZm9cblxuc2xvZyA9IChzKSAtPlxuICAgIFxuICAgIHNsYXNoID0gcmVxdWlyZSAnLi9zbGFzaCdcbiAgICBcbiAgICB0cnkgIyBmYW5jeSBsb2cgd2l0aCBzb3VyY2UtbWFwcGVkIGZpbGVzIGFuZCBsaW5lIG51bWJlcnNcbiAgICAgICAgZiA9IHN0YWNrLmNhcHR1cmUoKVtzbG9nLmRlcHRoXVxuICAgICAgICBpZiBjaGFpbiA9IHNvcmNlcnkubG9hZFN5bmMoZi5nZXRGaWxlTmFtZSgpKVxuICAgICAgICAgICAgaW5mbyAgID0gY2hhaW4udHJhY2UoZi5nZXRMaW5lTnVtYmVyKCksIDApXG4gICAgICAgICAgICBzb3VyY2UgPSBmLmdldEZpbGVOYW1lKClcbiAgICAgICAgICAgIGlmIG5vdCBzbGFzaC5zYW1lUGF0aCBmLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCgpLCBmLmdldEZpbGVOYW1lKClcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBzbGFzaC5wYXRoIGYuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzb3VyY2VUZXh0ID0gZnMucmVhZEZpbGVTeW5jIGYuZ2V0RmlsZU5hbWUoKSwgJ3V0ZjgnXG4gICAgICAgICAgICAgICAgIyBiYWxhbmNlciBpcyBicm9rZW4uIGJlbG93IGlzIG5vdCBhIGNvbW1lbnQuIHNob3VsZCBoYW5kbGUgZXNjYXBlZCBoYXNoIHNpZ25zLiBcbiAgICAgICAgICAgICAgICBtYXRjaCAgPSBzb3VyY2VUZXh0Lm1hdGNoIC9cXC9cXC9cXCMgc291cmNlVVJMPSguKykkL1xuICAgICAgICAgICAgICAgIGlmIG1hdGNoP1sxXT9cbiAgICAgICAgICAgICAgICAgICAgc291cmNlID0gbWF0Y2g/WzFdXG4gICAgICAgICAgICBpbmZvLnNvdXJjZSA9IHNsYXNoLnRpbGRlIHNvdXJjZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpbmZvID0gc291cmNlOiBzbGFzaC50aWxkZShmLmdldEZpbGVOYW1lKCkpLCBsaW5lOiBmLmdldExpbmVOdW1iZXIoKVxuXG4gICAgICAgIGZpbGUgPSBfLnBhZFN0YXJ0IFwiI3tpbmZvLnNvdXJjZX06I3tpbmZvLmxpbmV9XCIsIHNsb2cuZmlsZXBhZFxuICAgICAgICBtZXRoID0gXy5wYWRFbmQgZi5nZXRGdW5jdGlvbk5hbWUoKSwgc2xvZy5tZXRocGFkXG4gICAgICAgIGluZm8uc3RyID0gc1xuICAgICAgICBzID0gXCIje2ZpbGV9I3tzbG9nLmZpbGVzZXB9I3ttZXRofSN7c2xvZy5tZXRoc2VwfSN7c31cIlxuICAgICAgICBwb3N0LmVtaXQgJ3Nsb2cnLCBzLCBpbmZvXG4gICAgICAgIGlmIHNsb2cudWRwXG4gICAgICAgICAgICB1ZHBMb2cgaW5mb1xuICAgICAgICAgICAgXG4gICAgY2F0Y2ggZXJyXG4gICAgICAgIHBvc3QuZW1pdCAnc2xvZycsIFwiISN7c2xvZy5tZXRoc2VwfSN7c30gI3tlcnJ9XCJcblxubG9nID0gLT5cbiAgICBcbiAgICBzID0gKHN0cihzKSBmb3IgcyBpbiBbXS5zbGljZS5jYWxsIGFyZ3VtZW50cywgMCkuam9pbiBcIiBcIiBcbiAgICBcbiAgICBwb3N0LmVtaXQgJ2xvZycsIHNcbiAgICBjb25zb2xlLmxvZyBzXG4gICAgc2xvZyBzXG5cbnNsb2cudWRwICAgICA9IHRydWVcbnNsb2cuaWQgICAgICA9ICdreGsnXG5zbG9nLmljb24gICAgPSAn4pu+J1xuc2xvZy5kZXB0aCAgID0gMlxuc2xvZy5maWxlc2VwID0gJyA+ICcgIycg4qa/ICdcbnNsb2cubWV0aHNlcCA9ICcgPj4gJyAjJyDilrggJ1xuc2xvZy5maWxlcGFkID0gMzBcbnNsb2cubWV0aHBhZCA9IDE1XG5sb2cuc2xvZyAgICAgPSBzbG9nXG5cbm1vZHVsZS5leHBvcnRzID0gbG9nXG5cbiJdfQ==
//# sourceURL=C:/Users/kodi/s/kxk/coffee/log.coffee