// koffee 1.4.0

/*
000   000  000       0000000    0000000     
000  000   000      000   000  000          
0000000    000      000   000  000  0000    
000  000   000      000   000  000   000    
000   000  0000000   0000000    0000000
 */
var app, dumpImmediately, dumpInfos, dumpTimer, electron, err, fileLog, infos, klog, ref, ref1, ref2, slash, slog, stack, sutil;

sutil = require('stack-utils');

stack = new sutil({
    cwd: process.cwd(),
    internals: sutil.nodeInternals()
});

infos = [];

dumpInfos = function() {
    var fs, info, slash, stream;
    fs = require('fs');
    slash = require('kslash');
    stream = fs.createWriteStream(slash.resolve(slog.logFile), {
        flags: 'a',
        encoding: 'utf8'
    });
    while (infos.length) {
        info = infos.shift();
        stream.write(JSON.stringify(info) + '\n');
    }
    return stream.end();
};

dumpImmediately = function() {
    var data, fs, info, slash;
    fs = require('fs');
    slash = require('kslash');
    data = '';
    while (infos.length) {
        info = infos.shift();
        data += JSON.stringify(info) + '\n';
    }
    return fs.appendFileSync(slash.resolve(slog.logFile), data, 'utf8');
};

dumpTimer = null;

fileLog = function(info) {
    var err, i, len, line, lines;
    try {
        info.id = slog.id;
        info.icon = slog.icon;
        info.type = slog.type;
        lines = info.str.split('\n');
        if (lines.length) {
            for (i = 0, len = lines.length; i < len; i++) {
                line = lines[i];
                info.str = line;
                infos.push(Object.assign({}, info));
                info.sep = '';
                info.icon = '';
            }
        } else {
            infos.push(info);
        }
        return dumpImmediately();
    } catch (error) {
        err = error;
        console.error("kxk.log.fileLog -- ", err.stack);
        return slog.file = false;
    }
};

slog = function(s) {
    var chain, err, f, file, info, kstr, meth, post, ref, slash, sorcery, sorceryInfo, source;
    slash = require('kslash');
    ref = require('./kxk'), post = ref.post, kstr = ref.kstr;
    try {
        f = stack.capture()[slog.depth];
        sorcery = require('sorcery');
        info = {
            source: slash.tilde(f.getFileName()),
            line: f.getLineNumber()
        };
        try {
            if (chain = sorcery.loadSync(f.getFileName())) {
                sorceryInfo = chain.trace(f.getLineNumber(), 0);
                if (!slash.samePath(f.getScriptNameOrSourceURL(), f.getFileName())) {
                    if (slash.isAbsolute(f.getScriptNameOrSourceURL())) {
                        source = slash.path(f.getScriptNameOrSourceURL());
                    } else {
                        source = slash.resolve(slash.join(slash.dir(f.getFileName()), f.getScriptNameOrSourceURL()));
                    }
                } else {
                    source = f.getFileName();
                }
                sorceryInfo.source = slash.tilde(source);
                info = sorceryInfo;
            } else {

            }
        } catch (error) {
            err = error;
            true;
        }
        file = kstr.lpad(info.source + ":" + info.line, slog.filepad);
        meth = kstr.rpad(f.getFunctionName(), slog.methpad);
        info.str = s;
        s = "" + file + slog.filesep + meth + slog.methsep + s;
        post.emit('slog', s, info);
        if (slog.file) {
            return fileLog(info);
        }
    } catch (error) {
        err = error;
        console.error(err);
        return post.emit('slog', "!" + slog.methsep + s + " " + err);
    }
};

klog = function() {
    var kstr, post, ref, s;
    ref = require('./kxk'), post = ref.post, kstr = ref.kstr;
    s = ((function() {
        var i, len, ref1, results;
        ref1 = [].slice.call(arguments, 0);
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            s = ref1[i];
            results.push(kstr(s));
        }
        return results;
    }).apply(this, arguments)).join(" ");
    post.emit('log', s);
    console.log(s);
    return slog(s);
};

slog.file = true;

if (process.platform === 'win32') {
    slog.logFile = '~/AppData/Roaming/klog.txt';
} else if (process.platform === 'darwin') {
    slog.logFile = '~/Library/Application Support/klog.txt';
} else {
    slash = require('kslash');
    if (slash.isFile('~/AppData/Roaming/klog.txt')) {
        slog.logFile = '~/AppData/Roaming/klog.txt';
    } else {
        slog.file = false;
    }
}

slog.id = '???';

slog.type = process.type === 'renderer' ? 'win' : 'main';

slog.icon = process.type === 'renderer' ? '●' : '◼';

slog.depth = 2;

slog.filesep = ' > ';

slog.methsep = ' >> ';

slog.filepad = 30;

slog.methpad = 15;

klog.slog = slog;

klog.flog = fileLog;

try {
    electron = require('electron');
    if (process.type === 'renderer') {
        app = electron.remote.app;
    } else {
        app = electron.app;
    }
    slog.id = app.getName();
    slash = require('kslash');
    slog.logFile = slash.join(app.getPath('appData'), 'klog.txt');
} catch (error) {
    err = error;
    try {
        slash = require('kslash');
        if (process.argv[0].length && ((ref = slash.base(process.argv[0])) === 'node' || ref === 'coffee' || ref === 'koffee' || ref === 'electron')) {
            if ((ref1 = process.argv[1]) != null ? ref1.length : void 0) {
                slog.id = slash.base(process.argv[1]);
            }
        } else if ((ref2 = slash.ext(process.argv.slice(-1)[0])) === 'js') {
            slog.id = slash.base(process.argv.slice(-1)[0]);
        } else {
            console.warn("can't figure out slog.id -- process.argv:", process.argv.join(' '));
        }
    } catch (error) {
        err = error;
        null;
    }
}

module.exports = klog;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/log.coffee