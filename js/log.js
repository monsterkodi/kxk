// koffee 0.42.0

/*
000       0000000    0000000     
000      000   000  000          
000      000   000  000  0000    
000      000   000  000   000    
0000000   0000000    0000000
 */
var _, app, dumpInfos, dumpTimer, electron, err, fileLog, fs, infos, kstr, log, noon, os, post, ref, ref1, ref2, slash, slog, sorcery, stack, sutil;

post = require('./ppost');

kstr = require('./str');

os = require('os');

fs = require('fs');

_ = require('lodash');

noon = require('noon');

sutil = require('stack-utils');

sorcery = require('sorcery');

stack = new sutil({
    cwd: process.cwd(),
    internals: sutil.nodeInternals()
});

infos = [];

dumpInfos = function() {
    var info, slash, stream;
    slash = require('./slash');
    stream = fs.createWriteStream(slash.resolve(slog.logFile), {
        flags: 'a',
        encoding: 'utf8'
    });
    while (infos.length) {
        info = infos.shift();
        stream.write(JSON.stringify(info) + '\n');
    }
    return stream.end();
};

dumpTimer = null;

fileLog = function(info) {
    var err, i, len, line, lines;
    try {
        info.id = slog.id;
        info.icon = slog.icon;
        info.type = slog.type;
        lines = info.str.split('\n');
        if (lines.length) {
            for (i = 0, len = lines.length; i < len; i++) {
                line = lines[i];
                info.str = line;
                infos.push(_.clone(info));
                info.sep = '';
                info.icon = '';
            }
        } else {
            infos.push(info);
        }
        clearImmediate(dumpTimer);
        return dumpTimer = setImmediate(dumpInfos);
    } catch (error) {
        err = error;
        console.error("fileLog error -- ", err.stack);
        return slog.file = false;
    }
};

slog = function(s) {
    var chain, err, f, file, info, meth, slash, source;
    slash = require('./slash');
    try {
        f = stack.capture()[slog.depth];
        if (chain = sorcery.loadSync(f.getFileName())) {
            info = chain.trace(f.getLineNumber(), 0);
            if (!slash.samePath(f.getScriptNameOrSourceURL(), f.getFileName())) {
                if (slash.isAbsolute(f.getScriptNameOrSourceURL())) {
                    source = slash.path(f.getScriptNameOrSourceURL());
                } else {
                    source = slash.resolve(slash.join(slash.dir(f.getFileName()), f.getScriptNameOrSourceURL()));
                }
            } else {
                source = f.getFileName();
            }
            info.source = slash.tilde(source);
        } else {
            info = {
                source: slash.tilde(f.getFileName()),
                line: f.getLineNumber()
            };
        }
        file = _.padStart(info.source + ":" + info.line, slog.filepad);
        meth = _.padEnd(f.getFunctionName(), slog.methpad);
        info.str = s;
        s = "" + file + slog.filesep + meth + slog.methsep + s;
        post.emit('slog', s, info);
        if (slog.file) {
            return fileLog(info);
        }
    } catch (error) {
        err = error;
        return post.emit('slog', "!" + slog.methsep + s + " " + err);
    }
};

log = function() {
    var s;
    s = ((function() {
        var i, len, ref, results;
        ref = [].slice.call(arguments, 0);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
            s = ref[i];
            results.push(kstr(s));
        }
        return results;
    }).apply(this, arguments)).join(" ");
    post.emit('log', s);
    console.log(s);
    return slog(s);
};

slog.file = true;

if (process.platform === 'win32') {
    slog.logFile = '~/AppData/Roaming/klog.txt';
} else {
    slog.logFile = '~/Library/Application Support/klog.txt';
}

slog.id = '???';

slog.type = process.type === 'renderer' ? 'win' : 'main';

slog.icon = process.type === 'renderer' ? '●' : '◼';

slog.depth = 2;

slog.filesep = ' > ';

slog.methsep = ' >> ';

slog.filepad = 30;

slog.methpad = 15;

log.slog = slog;

log.flog = fileLog;

try {
    electron = require('electron');
    if (process.type === 'renderer') {
        app = electron.remote.app;
    } else {
        app = electron.app;
    }
    slog.id = app.getName();
    slash = require('./slash');
    slog.logFile = slash.join(app.getPath('appData'), 'klog.txt');
} catch (error) {
    err = error;
    try {
        slash = require('./slash');
        if (process.argv[0].length && ((ref = slash.base(process.argv[0])) === 'node' || ref === 'coffee' || ref === 'koffee' || ref === 'electron')) {
            if ((ref1 = process.argv[1]) != null ? ref1.length : void 0) {
                slog.id = slash.base(process.argv[1]);
            }
        } else if ((ref2 = slash.ext(process.argv.slice(-1)[0])) === 'js') {
            slog.id = slash.base(process.argv.slice(-1)[0]);
        } else {
            console.log("can't figure out slog.id -- process.argv:", process.argv.join(' '));
        }
    } catch (error) {
        err = error;
        null;
    }
}

module.exports = log;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/log.coffee