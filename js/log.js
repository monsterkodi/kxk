// koffee 1.3.0

/*
<<<<<<< HEAD
000   000  000       0000000    0000000     
000  000   000      000   000  000          
0000000    000      000   000  000  0000    
000  000   000      000   000  000   000    
000   000  0000000   0000000    0000000
 */
var app, dumpImmediately, dumpInfos, dumpTimer, electron, err, fileLog, infos, klog, ref, ref1, ref2, slash, slog, stack, sutil;

sutil = require('stack-utils');

=======
000       0000000    0000000     
000      000   000  000          
000      000   000  000  0000    
000      000   000  000   000    
0000000   0000000    0000000
 */
var _, app, dumpInfos, dumpTimer, electron, err, fileLog, fs, infos, log, noon, os, post, ref, ref1, slash, slog, sorcery, stack, str, sutil;

post = require('./ppost');

str = require('./str');

os = require('os');

fs = require('fs');

_ = require('lodash');

noon = require('noon');

sutil = require('stack-utils');

sorcery = require('sorcery');

>>>>>>> koffee
stack = new sutil({
    cwd: process.cwd(),
    internals: sutil.nodeInternals()
});

infos = [];

dumpInfos = function() {
<<<<<<< HEAD
    var fs, info, slash, stream;
    fs = require('fs');
    slash = require('./kxk').slash;
=======
    var info, slash, stream;
    slash = require('./slash');
>>>>>>> koffee
    stream = fs.createWriteStream(slash.resolve(slog.logFile), {
        flags: 'a',
        encoding: 'utf8'
    });
    while (infos.length) {
        info = infos.shift();
        stream.write(JSON.stringify(info) + '\n');
    }
    return stream.end();
};
<<<<<<< HEAD

dumpImmediately = function() {
    var data, fs, info, slash;
    fs = require('fs');
    slash = require('./kxk').slash;
    data = '';
    while (infos.length) {
        info = infos.shift();
        data += JSON.stringify(info) + '\n';
    }
    return fs.appendFileSync(slash.resolve(slog.logFile), data, 'utf8');
};
=======
>>>>>>> koffee

dumpTimer = null;

fileLog = function(info) {
    var err, i, len, line, lines;
    try {
        info.id = slog.id;
        info.icon = slog.icon;
        info.type = slog.type;
        lines = info.str.split('\n');
        if (lines.length) {
            for (i = 0, len = lines.length; i < len; i++) {
                line = lines[i];
                info.str = line;
<<<<<<< HEAD
                infos.push(Object.assign({}, info));
=======
                infos.push(_.clone(info));
>>>>>>> koffee
                info.sep = '';
                info.icon = '';
            }
        } else {
            infos.push(info);
        }
<<<<<<< HEAD
        return dumpImmediately();
    } catch (error) {
        err = error;
        console.error("kxk.log.fileLog -- ", err.stack);
=======
        clearImmediate(dumpTimer);
        return dumpTimer = setImmediate(dumpInfos);
    } catch (error) {
        err = error;
        console.log("fileLog error -- ", err.stack);
>>>>>>> koffee
        return slog.file = false;
    }
};

slog = function(s) {
<<<<<<< HEAD
    var chain, err, f, file, info, kstr, meth, post, ref, slash, sorcery, sorceryInfo, source;
    ref = require('./kxk'), slash = ref.slash, post = ref.post, kstr = ref.kstr;
    try {
        f = stack.capture()[slog.depth];
        sorcery = require('sorcery');
        info = {
            source: slash.tilde(f.getFileName()),
            line: f.getLineNumber()
        };
        try {
            if (chain = sorcery.loadSync(f.getFileName())) {
                sorceryInfo = chain.trace(f.getLineNumber(), 0);
                if (!slash.samePath(f.getScriptNameOrSourceURL(), f.getFileName())) {
                    if (slash.isAbsolute(f.getScriptNameOrSourceURL())) {
                        source = slash.path(f.getScriptNameOrSourceURL());
                    } else {
                        source = slash.resolve(slash.join(slash.dir(f.getFileName()), f.getScriptNameOrSourceURL()));
                    }
                } else {
                    source = f.getFileName();
                }
                sorceryInfo.source = slash.tilde(source);
                info = sorceryInfo;
            } else {

            }
        } catch (error) {
            err = error;
            true;
        }
        file = kstr.lpad(info.source + ":" + info.line, slog.filepad);
        meth = kstr.rpad(f.getFunctionName(), slog.methpad);
=======
    var chain, err, f, file, info, meth, slash, source;
    slash = require('./slash');
    try {
        f = stack.capture()[slog.depth];
        if (chain = sorcery.loadSync(f.getFileName())) {
            info = chain.trace(f.getLineNumber(), 0);
            if (!slash.samePath(f.getScriptNameOrSourceURL(), f.getFileName())) {
                if (slash.isAbsolute(f.getScriptNameOrSourceURL())) {
                    source = slash.path(f.getScriptNameOrSourceURL());
                } else {
                    source = slash.resolve(slash.join(slash.dir(f.getFileName()), f.getScriptNameOrSourceURL()));
                }
            } else {
                source = f.getFileName();
            }
            info.source = slash.tilde(source);
        } else {
            info = {
                source: slash.tilde(f.getFileName()),
                line: f.getLineNumber()
            };
        }
        file = _.padStart(info.source + ":" + info.line, slog.filepad);
        meth = _.padEnd(f.getFunctionName(), slog.methpad);
>>>>>>> koffee
        info.str = s;
        s = "" + file + slog.filesep + meth + slog.methsep + s;
        post.emit('slog', s, info);
        if (slog.file) {
            return fileLog(info);
        }
    } catch (error) {
        err = error;
<<<<<<< HEAD
        console.error(err);
=======
>>>>>>> koffee
        return post.emit('slog', "!" + slog.methsep + s + " " + err);
    }
};

<<<<<<< HEAD
klog = function() {
    var kstr, post, ref, s;
    ref = require('./kxk'), post = ref.post, kstr = ref.kstr;
    s = ((function() {
        var i, len, ref1, results;
        ref1 = [].slice.call(arguments, 0);
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            s = ref1[i];
            results.push(kstr(s));
=======
log = function() {
    var s;
    s = ((function() {
        var i, len, ref, results;
        ref = [].slice.call(arguments, 0);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
            s = ref[i];
            results.push(str(s));
>>>>>>> koffee
        }
        return results;
    }).apply(this, arguments)).join(" ");
    post.emit('log', s);
    console.log(s);
    return slog(s);
};

slog.file = true;

if (process.platform === 'win32') {
    slog.logFile = '~/AppData/Roaming/klog.txt';
<<<<<<< HEAD
} else if (process.platform === 'darwin') {
    slog.logFile = '~/Library/Application Support/klog.txt';
} else {
    slash = require('./kxk').slash;
    if (slash.isFile('~/AppData/Roaming/klog.txt')) {
        slog.logFile = '~/AppData/Roaming/klog.txt';
    } else {
        slog.file = false;
    }
=======
} else {
    slog.logFile = '~/Library/Application Support/klog.txt';
>>>>>>> koffee
}

slog.id = '???';

slog.type = process.type === 'renderer' ? 'win' : 'main';

slog.icon = process.type === 'renderer' ? '●' : '◼';

slog.depth = 2;

slog.filesep = ' > ';

slog.methsep = ' >> ';

slog.filepad = 30;

slog.methpad = 15;

<<<<<<< HEAD
klog.slog = slog;

klog.flog = fileLog;
=======
log.slog = slog;

log.flog = fileLog;
>>>>>>> koffee

try {
    electron = require('electron');
    if (process.type === 'renderer') {
        app = electron.remote.app;
    } else {
        app = electron.app;
    }
    slog.id = app.getName();
    slash = require('./kxk').slash;
    slog.logFile = slash.join(app.getPath('appData'), 'klog.txt');
} catch (error) {
    err = error;
    try {
<<<<<<< HEAD
        slash = require('./kxk').slash;
=======
        slash = require('./slash');
>>>>>>> koffee
        if (process.argv[0].length && ((ref = slash.base(process.argv[0])) === 'node' || ref === 'coffee' || ref === 'koffee' || ref === 'electron')) {
            if ((ref1 = process.argv[1]) != null ? ref1.length : void 0) {
                slog.id = slash.base(process.argv[1]);
            }
<<<<<<< HEAD
        } else if ((ref2 = slash.ext(process.argv.slice(-1)[0])) === 'js') {
            slog.id = slash.base(process.argv.slice(-1)[0]);
        } else {
            console.warn("can't figure out slog.id -- process.argv:", process.argv.join(' '));
=======
        } else {
            console.log("can't figure out slog.id -- process.argv:", process.argv.join(' '));
>>>>>>> koffee
        }
    } catch (error) {
        err = error;
        null;
    }
}

<<<<<<< HEAD
module.exports = klog;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxLQUFBLEdBQVUsT0FBQSxDQUFRLGFBQVI7O0FBQ1YsS0FBQSxHQUFVLElBQUksS0FBSixDQUFVO0lBQUEsR0FBQSxFQUFLLE9BQU8sQ0FBQyxHQUFSLENBQUEsQ0FBTDtJQUFvQixTQUFBLEVBQVcsS0FBSyxDQUFDLGFBQU4sQ0FBQSxDQUEvQjtDQUFWOztBQVFWLEtBQUEsR0FBUTs7QUFFUixTQUFBLEdBQVksU0FBQTtBQUVSLFFBQUE7SUFBQSxFQUFBLEdBQVMsT0FBQSxDQUFRLElBQVI7SUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLE9BQVIsQ0FBZ0IsQ0FBQztJQUMxQixNQUFBLEdBQVMsRUFBRSxDQUFDLGlCQUFILENBQXFCLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBSSxDQUFDLE9BQW5CLENBQXJCLEVBQWtEO1FBQUEsS0FBQSxFQUFNLEdBQU47UUFBVyxRQUFBLEVBQVUsTUFBckI7S0FBbEQ7QUFDVCxXQUFNLEtBQUssQ0FBQyxNQUFaO1FBQ0ksSUFBQSxHQUFPLEtBQUssQ0FBQyxLQUFOLENBQUE7UUFDUCxNQUFNLENBQUMsS0FBUCxDQUFhLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUFBLEdBQXFCLElBQWxDO0lBRko7V0FHQSxNQUFNLENBQUMsR0FBUCxDQUFBO0FBUlE7O0FBVVosZUFBQSxHQUFrQixTQUFBO0FBRWQsUUFBQTtJQUFBLEVBQUEsR0FBUyxPQUFBLENBQVEsSUFBUjtJQUNULEtBQUEsR0FBUyxPQUFBLENBQVEsT0FBUixDQUFnQixDQUFDO0lBQzFCLElBQUEsR0FBTztBQUNQLFdBQU0sS0FBSyxDQUFDLE1BQVo7UUFDSSxJQUFBLEdBQU8sS0FBSyxDQUFDLEtBQU4sQ0FBQTtRQUNQLElBQUEsSUFBUSxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsQ0FBQSxHQUFxQjtJ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LENBQVEsT0FBUjtRQUNWLElBQUcsT0FBTyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFoQixJQUEyQixRQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBTyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQXhCLEVBQUEsS0FBZ0MsTUFBaEMsSUFBQSxHQUFBLEtBQXdDLFFBQXhDLElBQUEsR0FBQSxLQUFrRCxRQUFsRCxJQUFBLEdBQUEsS0FBNEQsVUFBNUQsQ0FBOUI7WUFDSSwyQ0FBa0IsQ0FBRSxlQUFwQjtnQkFDSSxJQUFJLENBQUMsRUFBTCxHQUFVLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBTyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQXhCLEVBRGQ7YUFESjtTQUFBLE1BR0ssWUFBRyxLQUFLLENBQUMsR0FBTixDQUFVLE9BQU8sQ0FBQyxJQUFLLFVBQUUsQ0FBQSxDQUFBLENBQXpCLEVBQUEsS0FBZ0MsSUFBbkM7WUFDRCxJQUFJLENBQUMsRUFBTCxHQUFVLEtBQUssQ0FBQyxJQUFOLENBQVcsT0FBTyxDQUFDLElBQUssVUFBRSxDQUFBLENBQUEsQ0FBMUIsRUFEVDtTQUFBLE1BQUE7WUFHRixPQUFBLENBQUMsSUFBRCxDQUFNLDJDQUFOLEVBQW1ELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBYixDQUFrQixHQUFsQixDQUFuRCxFQUhFO1NBTFQ7S0FBQSxhQUFBO1FBU007UUFDRixLQVZKO0tBVko7OztBQXNCQSxNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgICBcbjAwMCAgMDAwICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgICAgXG4wMDAwMDAwICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgIFxuMDAwICAwMDAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICBcbjAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgXG4jIyNcblxuc3V0aWwgICA9IHJlcXVpcmUgJ3N0YWNrLXV0aWxzJ1xuc3RhY2sgICA9IG5ldyBzdXRpbCBjd2Q6IHByb2Nlc3MuY3dkKCksIGludGVybmFsczogc3V0aWwubm9kZUludGVybmFscygpXG5cbiMgMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuIyAwMDAgICAgICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAwMDAgICAgICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cbmluZm9zID0gW11cblxuZHVtcEluZm9zID0gLT5cbiAgICBcbiAgICBmcyAgICAgPSByZXF1aXJlICdmcydcbiAgICBzbGFzaCAgPSByZXF1aXJlKCcuL2t4aycpLnNsYXNoXG4gICAgc3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0gc2xhc2gucmVzb2x2ZShzbG9nLmxvZ0ZpbGUpLCBmbGFnczonYScsIGVuY29kaW5nOiAndXRmOCdcbiAgICB3aGlsZSBpbmZvcy5sZW5ndGhcbiAgICAgICAgaW5mbyA9IGluZm9zLnNoaWZ0KClcbiAgICAgICAgc3RyZWFtLndyaXRlIEpTT04uc3RyaW5naWZ5KGluZm8pKydcXG4nXG4gICAgc3RyZWFtLmVuZCgpXG5cbmR1bXBJbW1lZGlhdGVseSA9IC0+XG4gICAgXG4gICAgZnMgICAgID0gcmVxdWlyZSAnZnMnXG4gICAgc2xhc2ggID0gcmVxdWlyZSgnLi9reGsnKS5zbGFzaFxuICAgIGRhdGEgPSAnJ1xuICAgIHdoaWxlIGluZm9zLmxlbmd0aFxuICAgICAgICBpbmZvID0gaW5mb3Muc2hpZnQoKVxuICAgICAgICBkYXRhICs9IEpTT04uc3RyaW5naWZ5KGluZm8pKydcXG4nXG4gICAgZnMuYXBwZW5kRmlsZVN5bmMgc2xhc2gucmVzb2x2ZShzbG9nLmxvZ0ZpbGUpLCBkYXRhLCAndXRmOCdcbiAgICBcbmR1bXBUaW1lciA9IG51bGxcbiAgICBcbmZpbGVMb2cgPSAoaW5mbykgLT5cbiAgICBcbiAgICB0cnlcbiAgICAgICAgaW5mby5pZCAgID0gc2xvZy5pZFxuICAgICAgICBpbmZvLmljb24gPSBzbG9nLmljb25cbiAgICAgICAgaW5mby50eXBlID0gc2xvZy50eXBlXG4gICAgICAgIGxpbmVzID0gaW5mby5zdHIuc3BsaXQgJ1xcbidcbiAgICAgICAgaWYgbGluZXMubGVuZ3RoXG4gICAgICAgICAgICBmb3IgbGluZSBpbiBsaW5lc1xuICAgICAgICAgICAgICAgIGluZm8uc3RyID0gbGluZVxuICAgICAgICAgICAgICAgIGluZm9zLnB1c2ggT2JqZWN0LmFzc2lnbiB7fSwgaW5mb1xuICAgICAgICAgICAgICAgIGluZm8uc2VwICA9ICcnXG4gICAgICAgICAgICAgICAgaW5mby5pY29uID0gJydcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgaW5mb3MucHVzaCBpbmZvXG4gICAgICAgICAgICBcbiAgICAgICAgIyBjbGVhckltbWVkaWF0ZSBkdW1wVGltZXJcbiAgICAgICAgIyBkdW1wVGltZXIgPSBzZXRJbW1lZGlhdGUgZHVtcEluZm9zXG4gICAgICAgIFxuICAgICAgICBkdW1wSW1tZWRpYXRlbHkoKSAjIHNoZWxsIHNjcmlwdHMgbmVlZCBpbW1lZGlhdGUgZHVtcFxuICAgICAgICBcbiAgICBjYXRjaCBlcnJcbiAgICAgICAgZXJyb3IgXCJreGsubG9nLmZpbGVMb2cgLS0gXCIsIGVyci5zdGFja1xuICAgICAgICBzbG9nLmZpbGUgPSBmYWxzZVxuXG4jICAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgXG4jIDAwMDAwMDAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgXG4jICAgICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4jIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG5cbnNsb2cgPSAocykgLT5cbiAgICBcbiAgICB7c2xhc2gsIHBvc3QsIGtzdHIgfSA9IHJlcXVpcmUgJy4va3hrJ1xuICAgIFxuICAgIHRyeSAjIGZhbmN5IGxvZyB3aXRoIHNvdXJjZS1tYXBwZWQgZmlsZXMgYW5kIGxpbmUgbnVtYmVyc1xuICAgICAgICBmID0gc3RhY2suY2FwdHVyZSgpW3Nsb2cuZGVwdGhdXG4gICAgICAgIHNvcmNlcnkgPSByZXF1aXJlICdzb3JjZXJ5J1xuICAgICAgICBcbiAgICAgICAgaW5mbyA9IHNvdXJjZTogc2xhc2gudGlsZGUoZi5nZXRGaWxlTmFtZSgpKSwgbGluZTogZi5nZXRMaW5lTnVtYmVyKClcbiAgICAgICAgdHJ5XG4gICAgICAgICAgICBpZiBjaGFpbiA9IHNvcmNlcnkubG9hZFN5bmMoZi5nZXRGaWxlTmFtZSgpKVxuICAgICAgICAgICAgICAgIHNvcmNlcnlJbmZvID0gY2hhaW4udHJhY2UoZi5nZXRMaW5lTnVtYmVyKCksIDApXG4gICAgICAgICAgICAgICAgaWYgbm90IHNsYXNoLnNhbWVQYXRoIGYuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKCksIGYuZ2V0RmlsZU5hbWUoKVxuICAgICAgICAgICAgICAgICAgICBpZiBzbGFzaC5pc0Fic29sdXRlIGYuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNsYXNoLnBhdGggZi5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBzbGFzaC5yZXNvbHZlIHNsYXNoLmpvaW4gc2xhc2guZGlyKGYuZ2V0RmlsZU5hbWUoKSksIGYuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKClcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IGYuZ2V0RmlsZU5hbWUoKVxuICAgICAgICAgICAgICAgIHNvcmNlcnlJbmZvLnNvdXJjZSA9IHNsYXNoLnRpbGRlIHNvdXJjZVxuICAgICAgICAgICAgICAgIGluZm8gPSBzb3JjZXJ5SW5mb1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIHRydWVcblxuICAgICAgICBmaWxlID0ga3N0ci5scGFkIFwiI3tpbmZvLnNvdXJjZX06I3tpbmZvLmxpbmV9XCIsIHNsb2cuZmlsZXBhZFxuICAgICAgICBtZXRoID0ga3N0ci5ycGFkIGYuZ2V0RnVuY3Rpb25OYW1lKCksIHNsb2cubWV0aHBhZFxuICAgICAgICBpbmZvLnN0ciA9IHNcbiAgICAgICAgcyA9IFwiI3tmaWxlfSN7c2xvZy5maWxlc2VwfSN7bWV0aH0je3Nsb2cubWV0aHNlcH0je3N9XCJcbiAgICAgICAgcG9zdC5lbWl0ICdzbG9nJywgcywgaW5mb1xuICAgICAgICBpZiBzbG9nLmZpbGVcbiAgICAgICAgICAgIGZpbGVMb2cgaW5mbyAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgY2F0Y2ggZXJyXG4gICAgICAgIGVycm9yIGVyclxuICAgICAgICBwb3N0LmVtaXQgJ3Nsb2cnLCBcIiEje3Nsb2cubWV0aHNlcH0je3N9ICN7ZXJyfVwiXG5cbiMgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgXG4jIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICBcbiMgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgXG5cbmtsb2cgPSAtPlxuICAgIFxuICAgIHtwb3N0LCBrc3RyfSA9IHJlcXVpcmUgJy4va3hrJ1xuICAgIHMgPSAoa3N0cihzKSBmb3IgcyBpbiBbXS5zbGljZS5jYWxsIGFyZ3VtZW50cywgMCkuam9pbiBcIiBcIiBcbiAgICBcbiAgICBwb3N0LmVtaXQgJ2xvZycsIHNcbiAgICBjb25zb2xlLmxvZyBzXG4gICAgc2xvZyBzXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgICAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMCAgICAwMDAgIDAwMCAgMDAwMCAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAwMDAgICAgXG4jICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMDAwMDAgICAgIFxuICAgIFxuc2xvZy5maWxlID0gdHJ1ZVxuaWYgcHJvY2Vzcy5wbGF0Zm9ybSA9PSAnd2luMzInXG4gICAgc2xvZy5sb2dGaWxlID0gJ34vQXBwRGF0YS9Sb2FtaW5nL2tsb2cudHh0J1xuZWxzZSBpZiBwcm9jZXNzLnBsYXRmb3JtID09ICdkYXJ3aW4nXG4gICAgc2xvZy5sb2dGaWxlID0gJ34vTGlicmFyeS9BcHBsaWNhdGlvbiBTdXBwb3J0L2tsb2cudHh0J1xuZWxzZVxuICAgIHtzbGFzaH0gPSByZXF1aXJlICcuL2t4aydcbiAgICBpZiBzbGFzaC5pc0ZpbGUgJ34vQXBwRGF0YS9Sb2FtaW5nL2tsb2cudHh0J1xuICAgICAgICBzbG9nLmxvZ0ZpbGUgPSAnfi9BcHBEYXRhL1JvYW1pbmcva2xvZy50eHQnXG4gICAgZWxzZVxuICAgICAgICBzbG9nLmZpbGUgPSBmYWxzZVxuXG5zbG9nLmlkICAgICAgPSAnPz8/J1xuc2xvZy50eXBlICAgID0gaWYgcHJvY2Vzcy50eXBlID09ICdyZW5kZXJlcicgdGhlbiAnd2luJyBlbHNlICdtYWluJ1xuc2xvZy5pY29uICAgID0gaWYgcHJvY2Vzcy50eXBlID09ICdyZW5kZXJlcicgdGhlbiAn4pePJyBlbHNlICfil7wnXG5zbG9nLmRlcHRoICAgPSAyXG5zbG9nLmZpbGVzZXAgPSAnID4gJ1xuc2xvZy5tZXRoc2VwID0gJyA+PiAnXG5zbG9nLmZpbGVwYWQgPSAzMFxuc2xvZy5tZXRocGFkID0gMTVcblxua2xvZy5zbG9nICAgID0gc2xvZ1xua2xvZy5mbG9nICAgID0gZmlsZUxvZ1xuXG50cnlcbiAgICBlbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuICAgIGlmIHByb2Nlc3MudHlwZSA9PSAncmVuZGVyZXInXG4gICAgICAgIGFwcCA9IGVsZWN0cm9uLnJlbW90ZS5hcHBcbiAgICBlbHNlXG4gICAgICAgIGFwcCA9IGVsZWN0cm9uLmFwcFxuICAgIHNsb2cuaWQgPSBhcHAuZ2V0TmFtZSgpXG4gICAge3NsYXNofSA9IHJlcXVpcmUgJy4va3hrJ1xuICAgIHNsb2cubG9nRmlsZSA9IHNsYXNoLmpvaW4gYXBwLmdldFBhdGgoJ2FwcERhdGEnKSwgJ2tsb2cudHh0J1xuY2F0Y2ggZXJyXG4gICAgdHJ5XG4gICAgICAgIHtzbGFzaH0gPSByZXF1aXJlICcuL2t4aydcbiAgICAgICAgaWYgcHJvY2Vzcy5hcmd2WzBdLmxlbmd0aCBhbmQgc2xhc2guYmFzZShwcm9jZXNzLmFyZ3ZbMF0pIGluIFsnbm9kZScsICdjb2ZmZWUnLCAna29mZmVlJywgJ2VsZWN0cm9uJ11cbiAgICAgICAgICAgIGlmIHByb2Nlc3MuYXJndlsxXT8ubGVuZ3RoXG4gICAgICAgICAgICAgICAgc2xvZy5pZCA9IHNsYXNoLmJhc2UgcHJvY2Vzcy5hcmd2WzFdXG4gICAgICAgIGVsc2UgaWYgc2xhc2guZXh0KHByb2Nlc3MuYXJndlstMV0pIGluIFsnanMnXVxuICAgICAgICAgICAgc2xvZy5pZCA9IHNsYXNoLmJhc2UgcHJvY2Vzcy5hcmd2Wy0xXVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB3YXJuIFwiY2FuJ3QgZmlndXJlIG91dCBzbG9nLmlkIC0tIHByb2Nlc3MuYXJndjpcIiwgcHJvY2Vzcy5hcmd2LmpvaW4gJyAnXG4gICAgY2F0Y2ggZXJyXG4gICAgICAgIG51bGxcbiAgICBcbm1vZHVsZS5leHBvcnRzID0ga2xvZ1xuXG4iXX0=
=======
module.exports = log;

//# sourceMappingURL=data:application/json;base64,
>>>>>>> koffee
//# sourceURL=../coffee/log.coffee