(function() {
  /*
  00       0000000    0000000 
  00      000   000  000      
  00      000   000  000  0000
  00      000   000  000   000
  000000   0000000    0000000 
  */
  var _, app, electron, err, fs, log, os, post, ref, slash, slog, sorcery, stack, str, sutil, udpLog, udpSend, udpStop;

  post = require('./ppost');

  str = require('./str');

  os = require('os');

  fs = require('fs');

  _ = require('lodash');

  sutil = require('stack-utils');

  sorcery = require('sorcery');

  stack = new sutil({
    cwd: process.cwd(),
    internals: sutil.nodeInternals()
  });

  udpSend = null;

  udpLog = function(info) {
    var udp;
    if (!udpSend) {
      udp = require('./udp');
      udpSend = new udp({
        debug: slog.debug
      });
    }
    info.id = slog.id;
    info.icon = slog.icon;
    return udpSend.send(info);
  };

  udpStop = function() {
    if (udpSend) {
      udpSend.close();
      udpSend = null;
      return slog.udp = false;
    }
  };

  slog = function(s) {
    var chain, err, f, file, info, match, meth, slash, source, sourceText;
    slash = require('./slash'); // fancy log with source-mapped files and line numbers
    try {
      f = stack.capture()[slog.depth];
      if (chain = sorcery.loadSync(f.getFileName())) {
        info = chain.trace(f.getLineNumber(), 0);
        source = f.getFileName();
        if (!slash.samePath(f.getScriptNameOrSourceURL(), f.getFileName())) {
          source = slash.path(f.getScriptNameOrSourceURL());
        } else {
          sourceText = fs.readFileSync(f.getFileName(), 'utf8');
          // balancer is broken. below is not a comment. should handle escaped hash signs. 
          match = sourceText.match(/\/\/\# sourceURL=(.+)$/);
          if ((match != null ? match[1] : void 0) != null) {
            source = match != null ? match[1] : void 0;
          }
        }
        info.source = slash.tilde(source);
      } else {
        info = {
          source: slash.tilde(f.getFileName()),
          line: f.getLineNumber()
        };
      }
      file = _.padStart(`${info.source}:${info.line}`, slog.filepad);
      meth = _.padEnd(f.getFunctionName(), slog.methpad);
      info.str = s;
      s = `${file}${slog.filesep}${meth}${slog.methsep}${s}`;
      post.emit('slog', s, info);
      if (slog.udp) {
        return udpLog(info);
      }
    } catch (error) {
      err = error;
      return post.emit('slog', `!${slog.methsep}${s} ${err}`);
    }
  };

  log = function() {
    var s;
    s = ((function() {
      var i, len, ref, results;
      ref = [].slice.call(arguments, 0);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        results.push(str(s));
      }
      return results;
    }).apply(this, arguments)).join(" ");
    post.emit('log', s);
    console.log(s);
    return slog(s);
  };

  slog.udp = true;

  slog.id = '???';

  slog.icon = process.type === 'renderer' ? '●' : '◆';

  slog.depth = 2;

  slog.filesep = ' > '; //' ⦿ '

  slog.methsep = ' >> '; //' ▸ '

  slog.filepad = 30;

  slog.methpad = 15;

  log.slog = slog;

  log.stop = udpStop;

  try {
    electron = require('electron');
    if (process.type === 'renderer') {
      app = electron.remote.app;
    } else {
      app = electron.app;
    }
    slog.id = app.getName();
  } catch (error) {
    err = error;
    try {
      slash = require('./slash');
      if (process.argv[0].length && slash.base(process.argv[0]) === 'node') {
        if ((ref = process.argv[1]) != null ? ref.length : void 0) {
          slog.id = slash.base(process.argv[1]);
        }
      } else {
        console.log("can't figure out slog.id -- process.argv:", process.argv.join(' '));
      }
    } catch (error) {
      err = error;
      null;
    }
  }

  module.exports = log;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:/Users/kodi/s/kxk/coffee/log.coffee