  /*
  000   000   0000000   000000000   0000000  000   000
  000 0 000  000   000     000     000       000   000
  000000000  000000000     000     000       000000000
  000   000  000   000     000     000       000   000
  00     00  000   000     000      0000000  000   000
  */
var Watch, _, event, fs, log, slash, walkdir,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

({slash, log, fs, _} = require('./kxk'));

event = require('events');

walkdir = require('walkdir');

Watch = class Watch extends event {
  constructor(path, opt) {
    super();
    this.onChange = this.onChange.bind(this);
    this.dir = slash.resolve(path);
    this.opt = opt != null ? opt : {};
    this.watchDir();
  }

  static watch(path, opt) {
    if (slash.isDir(path)) {
      return Watch.dir(path, opt);
    } else {
      return Watch.file(path, opt);
    }
  }

  static file(path, opt) {
    var w;
    w = Watch.dir(slash.dir(path), opt);
    w.file = slash.resolve(path);
    return w;
  }

  static dir(path, opt) {
    return new Watch(path, opt);
  }

  close() {
    var i, len, ref, watch;
    this.watch.close();
    delete this.watch;
    if (this.opt.recursive) {
      ref = this.watchers;
      for (i = 0, len = ref.length; i < len; i++) {
        watch = ref[i];
        watch.close();
      }
      return delete this.watchers;
    }
  }

  watchDir() {
    var onPath;
    this.watch = fs.watch(this.dir);
    this.watch.on('error', function(err) {
      return log(`fs.watch dir:'${this.dir}' error: ${err.stack}`);
    });
    this.watch.on('change', this.onChange);
    if (this.opt.recursive) {
      // log 'ignore', @opt.ignore
      this.watchers = [];
      this.walker = walkdir(this.dir);
      onPath = function(ignore) {
        return function(path) {
          var i, len, regex;
          for (i = 0, len = ignore.length; i < len; i++) {
            regex = ignore[i];
            if (new RegExp(regex).test(path)) {
              // log "ignore #{regex} #{path}"
              this.ignore(path);
              return;
            }
          }
        };
      };
      if (this.opt.ignore) {
        this.walker.on('path', onPath(this.opt.ignore));
      }
      return this.walker.on('directory', (path) => {
        var change, watch;
        if (this.ignore(path)) {
          return;
        }
        log(`watch ${path}`);
        watch = fs.watch(path);
        this.watchers.push(watch);
        change = (dir) => {
          return (chg, pth) => {
            return this.onChange(chg, pth, dir);
          };
        };
        return watch.on('change', change(path));
      });
    }
  }

  ignore(path) {
    var i, len, ref, regex;
    if (this.opt.ignore) {
      ref = this.opt.ignore;
      for (i = 0, len = ref.length; i < len; i++) {
        regex = ref[i];
        if (new RegExp(regex).test(path)) {
          // log "ignore! #{regex} #{path}"
          return true;
        }
      }
    }
  }

  onChange(change, path, dir = this.dir) {
    boundMethodCheck(this, Watch);
    if (this.ignore(path)) {
      return;
    }
    log('onChange', change, path, dir);
    if (/\d\d\d\d\d\d\d\d?\d?$/.test(slash.ext(path))) {
      return;
    }
    path = slash.join(dir, path);
    log('onChange---', path);
    if (this.file && this.file !== path) {
      return;
    }
    return this.emit('change', {
      dir: dir,
      path: path,
      change: change,
      watch: this
    });
  }

};

module.exports = Watch;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/watch.coffee