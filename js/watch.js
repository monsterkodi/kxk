(function() {
  /*
  000   000   0000000   000000000   0000000  000   000
  000 0 000  000   000     000     000       000   000
  000000000  000000000     000     000       000000000
  000   000  000   000     000     000       000   000
  00     00  000   000     000      0000000  000   000
  */
  var Watch, _, event, fs, log, slash,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ({slash, log, fs, _} = require('./kxk'));

  event = require('events');

  Watch = class Watch extends event {
    constructor(path, opt) {
      super();
      this.onChange = this.onChange.bind(this);
      this.dir = slash.resolve(path);
      this.opt = opt != null ? opt : {};
      this.watchDir();
    }

    static watch(path, opt) {
      if (slash.isDir(path)) {
        return Watch.dir(path, opt);
      } else {
        return Watch.file(path, opt);
      }
    }

    static file(path, opt) {
      var w;
      w = Watch.dir(slash.dir(path), opt);
      w.file = slash.resolve(path);
      return w;
    }

    static dir(path, opt) {
      return new Watch(path, opt);
    }

    close() {
      this.watch.close();
      return delete this.watch;
    }

    watchDir() {
      this.watch = fs.watch(this.dir);
      this.watch.on('error', function(err) {
        return log(`fs.watch dir:'${this.dir}' error: ${err.stack}`);
      });
      return this.watch.on('change', this.onChange);
    }

    onChange(change, path) {
      boundMethodCheck(this, Watch);
      if (/\d\d\d\d\d\d\d\d?\d?$/.test(slash.ext(path))) {
        return;
      }
      path = slash.join(this.dir, path);
      if (this.file && this.file !== path) {
        return;
      }
      return this.emit('change', {
        dir: this.dir,
        path: path,
        change: change,
        watch: this
      });
    }

  };

  module.exports = Watch;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiLi4vY29mZmVlL3dhdGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUE7SUFBQTs7RUFRQSxDQUFBLENBQUUsS0FBRixFQUFTLEdBQVQsRUFBYyxFQUFkLEVBQWtCLENBQWxCLENBQUEsR0FBd0IsT0FBQSxDQUFRLE9BQVIsQ0FBeEI7O0VBRUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxRQUFSOztFQUVGLFFBQU4sTUFBQSxNQUFBLFFBQW9CLE1BQXBCO0lBRUksV0FBYSxDQUFDLElBQUQsRUFBTyxHQUFQLENBQUE7O1VBcUNiLENBQUEsZUFBQSxDQUFBO01BakNJLElBQUMsQ0FBQSxHQUFELEdBQU8sS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkO01BQ1AsSUFBQyxDQUFBLEdBQUQsaUJBQU8sTUFBTSxDQUFBO01BRWIsSUFBQyxDQUFBLFFBQUQsQ0FBQTtJQVBTOztJQVNMLE9BQVAsS0FBTyxDQUFDLElBQUQsRUFBTyxHQUFQLENBQUE7TUFFSixJQUFHLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBWixDQUFIO2VBQ0ksS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFWLEVBQWdCLEdBQWhCLEVBREo7T0FBQSxNQUFBO2VBR0ksS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLEdBQWpCLEVBSEo7O0lBRkk7O0lBT0QsT0FBTixJQUFNLENBQUMsSUFBRCxFQUFPLEdBQVAsQ0FBQTtBQUVILFVBQUE7TUFBQSxDQUFBLEdBQUksS0FBSyxDQUFDLEdBQU4sQ0FBVSxLQUFLLENBQUMsR0FBTixDQUFVLElBQVYsQ0FBVixFQUEyQixHQUEzQjtNQUNKLENBQUMsQ0FBQyxJQUFGLEdBQVMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkO2FBQ1Q7SUFKRzs7SUFNRCxPQUFMLEdBQUssQ0FBQyxJQUFELEVBQU8sR0FBUCxDQUFBO2FBRUYsSUFBSSxLQUFKLENBQVUsSUFBVixFQUFnQixHQUFoQjtJQUZFOztJQUlOLEtBQU8sQ0FBQSxDQUFBO01BRUgsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQUE7YUFDQSxPQUFPLElBQUMsQ0FBQTtJQUhMOztJQUtQLFFBQVUsQ0FBQSxDQUFBO01BRU4sSUFBQyxDQUFBLEtBQUQsR0FBUyxFQUFFLENBQUMsS0FBSCxDQUFTLElBQUMsQ0FBQSxHQUFWO01BQ1QsSUFBQyxDQUFBLEtBQUssQ0FBQyxFQUFQLENBQVUsT0FBVixFQUFtQixRQUFBLENBQUMsR0FBRCxDQUFBO2VBQVMsR0FBQSxDQUFJLENBQUEsY0FBQSxDQUFBLENBQWlCLElBQUMsQ0FBQSxHQUFsQixDQUFzQixTQUF0QixDQUFBLENBQWlDLEdBQUcsQ0FBQyxLQUFyQyxDQUFBLENBQUo7TUFBVCxDQUFuQjthQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsRUFBUCxDQUFVLFFBQVYsRUFBb0IsSUFBQyxDQUFBLFFBQXJCO0lBSk07O0lBTVYsUUFBVSxDQUFDLE1BQUQsRUFBUyxJQUFULENBQUE7NkJBdkNSO01BeUNFLElBQUcsdUJBQXVCLENBQUMsSUFBeEIsQ0FBNkIsS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFWLENBQTdCLENBQUg7QUFDSSxlQURKOztNQUdBLElBQUEsR0FBTyxLQUFLLENBQUMsSUFBTixDQUFXLElBQUMsQ0FBQSxHQUFaLEVBQWlCLElBQWpCO01BRVAsSUFBRyxJQUFDLENBQUEsSUFBRCxJQUFVLElBQUMsQ0FBQSxJQUFELEtBQVMsSUFBdEI7QUFDSSxlQURKOzthQUdBLElBQUMsQ0FBQSxJQUFELENBQU0sUUFBTixFQUFnQjtRQUFBLEdBQUEsRUFBSSxJQUFDLENBQUEsR0FBTDtRQUFVLElBQUEsRUFBSyxJQUFmO1FBQXFCLE1BQUEsRUFBTyxNQUE1QjtRQUFvQyxLQUFBLEVBQU07TUFBMUMsQ0FBaEI7SUFWTTs7RUF2Q2Q7O0VBbURBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBL0RqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuMDAwMDAwMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuMDAgICAgIDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuIyMjXG5cbnsgc2xhc2gsIGxvZywgZnMsIF8gfSA9IHJlcXVpcmUgJy4va3hrJ1xuXG5ldmVudCA9IHJlcXVpcmUgJ2V2ZW50cydcblxuY2xhc3MgV2F0Y2ggZXh0ZW5kcyBldmVudFxuXG4gICAgY29uc3RydWN0b3I6IChwYXRoLCBvcHQpIC0+XG4gICAgICAgIFxuICAgICAgICBzdXBlcigpXG4gICAgICAgIFxuICAgICAgICBAZGlyID0gc2xhc2gucmVzb2x2ZSBwYXRoXG4gICAgICAgIEBvcHQgPSBvcHQgPyB7fVxuICAgICAgICBcbiAgICAgICAgQHdhdGNoRGlyKClcbiAgICAgICBcbiAgICBAd2F0Y2g6IChwYXRoLCBvcHQpIC0+XG4gICAgXG4gICAgICAgIGlmIHNsYXNoLmlzRGlyIHBhdGhcbiAgICAgICAgICAgIFdhdGNoLmRpciBwYXRoLCBvcHRcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgV2F0Y2guZmlsZSBwYXRoLCBvcHRcbiAgICBcbiAgICBAZmlsZTogKHBhdGgsIG9wdCkgLT5cbiAgICAgICAgICAgIFxuICAgICAgICB3ID0gV2F0Y2guZGlyIHNsYXNoLmRpcihwYXRoKSwgb3B0XG4gICAgICAgIHcuZmlsZSA9IHNsYXNoLnJlc29sdmUgcGF0aFxuICAgICAgICB3XG4gICAgICAgIFxuICAgIEBkaXI6IChwYXRoLCBvcHQpIC0+XG4gICAgICAgIFxuICAgICAgICBuZXcgV2F0Y2ggcGF0aCwgb3B0XG5cbiAgICBjbG9zZTogLT5cbiAgICAgICAgXG4gICAgICAgIEB3YXRjaC5jbG9zZSgpXG4gICAgICAgIGRlbGV0ZSBAd2F0Y2hcbiAgICAgICAgXG4gICAgd2F0Y2hEaXI6IC0+XG4gICAgICAgIFxuICAgICAgICBAd2F0Y2ggPSBmcy53YXRjaCBAZGlyXG4gICAgICAgIEB3YXRjaC5vbiAnZXJyb3InLCAoZXJyKSAtPiBsb2cgXCJmcy53YXRjaCBkaXI6JyN7QGRpcn0nIGVycm9yOiAje2Vyci5zdGFja31cIlxuICAgICAgICBAd2F0Y2gub24gJ2NoYW5nZScsIEBvbkNoYW5nZVxuICAgICAgICBcbiAgICBvbkNoYW5nZTogKGNoYW5nZSwgcGF0aCkgPT5cbiAgICAgICAgXG4gICAgICAgIGlmIC9cXGRcXGRcXGRcXGRcXGRcXGRcXGRcXGQ/XFxkPyQvLnRlc3Qgc2xhc2guZXh0IHBhdGhcbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIHBhdGggPSBzbGFzaC5qb2luIEBkaXIsIHBhdGhcbiAgICAgICAgXG4gICAgICAgIGlmIEBmaWxlIGFuZCBAZmlsZSAhPSBwYXRoXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIFxuICAgICAgICBAZW1pdCAnY2hhbmdlJywgZGlyOkBkaXIsIHBhdGg6cGF0aCwgY2hhbmdlOmNoYW5nZSwgd2F0Y2g6QFxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gV2F0Y2hcbiJdfQ==
//# sourceURL=../coffee/watch.coffee