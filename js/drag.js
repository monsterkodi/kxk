// koffee 0.50.0

/*
0000000    00000000    0000000    0000000 
000   000  000   000  000   000  000      
000   000  0000000    000000000  000  0000
000   000  000   000  000   000  000   000
0000000    000   000  000   000   0000000
 */
var $, Drag, _, def, kerror, kpos, ref, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), def = ref.def, kpos = ref.kpos, stopEvent = ref.stopEvent, kerror = ref.kerror, $ = ref.$, _ = ref._;

Drag = (function() {
    function Drag(cfg) {
        this.deactivate = bind(this.deactivate, this);
        this.activate = bind(this.activate, this);
        this.dragStop = bind(this.dragStop, this);
        this.dragUp = bind(this.dragUp, this);
        this.dragMove = bind(this.dragMove, this);
        this.dragStart = bind(this.dragStart, this);
        var t;
        _.extend(this, def(cfg, {
            target: null,
            handle: null,
            onStart: null,
            onMove: null,
            onStop: null,
            active: true
        }));
        if (_.isString(this.target)) {
            t = $(this.target);
            if (t == null) {
                return kerror("Drag -- can't find drag target with id", this.target);
            }
            this.target = t;
        }
        if (this.target == null) {
            return kerror("Drag -- can't find drag target");
        }
        if ((this.onStart != null) && !_.isFunction(this.onStart)) {
            kerror("Drag -- onStart not a function?");
        }
        if ((this.onMove != null) && !_.isFunction(this.onMove)) {
            kerror("Drag -- onMove not a function?");
        }
        if ((this.onEnd != null) && !_.isFunction(this.onEnd)) {
            kerror("Drag -- onEnd not a function?");
        }
        this.dragging = false;
        this.listening = false;
        if (_.isString(this.handle)) {
            this.handle = $(this.handle);
        }
        if (this.handle != null) {
            this.handle;
        } else {
            this.handle = this.target;
        }
        if (this.active) {
            this.activate();
        }
    }

    Drag.prototype.start = function(p, event) {
        if (!this.dragging && this.listening) {
            this.dragging = true;
            this.startPos = p;
            this.pos = p;
            if ('skip' === (typeof this.onStart === "function" ? this.onStart(this, event) : void 0)) {
                delete this.startPos;
                this.dragging = false;
                return this;
            }
            this.lastPos = p;
            stopEvent(event);
            document.addEventListener('mousemove', this.dragMove);
            document.addEventListener('mouseup', this.dragUp);
        }
        return this;
    };

    Drag.prototype.dragStart = function(event) {
        return this.start(kpos(event), event);
    };

    Drag.prototype.dragMove = function(event) {
        if (this.dragging) {
            this.pos = kpos(event);
            this.delta = this.lastPos.to(this.pos);
            this.deltaSum = this.startPos.to(this.pos);
            if ((this.constrainKey != null) && event[this.constrainKey]) {
                if (this.constrain != null) {
                    this.constrain;
                } else {
                    this.constrain = Math.abs(this.delta.x) >= Math.abs(this.delta.y) ? kpos(1, 0) : kpos(0, 1);
                }
                this.delta.x *= this.constrain.x;
                this.delta.y *= this.constrain.y;
            } else {
                delete this.constrain;
            }
            if (typeof this.onMove === "function") {
                this.onMove(this, event);
            }
            this.lastPos = this.pos;
        }
        return this;
    };

    Drag.prototype.dragUp = function(event) {
        delete this.constrain;
        return this.dragStop(event);
    };

    Drag.prototype.dragStop = function(event) {
        if (this.dragging) {
            document.removeEventListener('mousemove', this.dragMove);
            document.removeEventListener('mouseup', this.dragUp);
            if ((this.onStop != null) && (event != null)) {
                this.onStop(this, event);
            }
            delete this.lastPos;
            delete this.startPos;
            this.dragging = false;
        }
        return this;
    };

    Drag.prototype.activate = function() {
        if (!this.listening) {
            this.listening = true;
            this.handle.addEventListener('mousedown', this.dragStart);
        }
        return this;
    };

    Drag.prototype.deactivate = function() {
        if (this.listening) {
            this.handle.removeEventListener('mousedown', this.dragStart);
            this.listening = false;
            if (this.dragging) {
                this.dragStop();
            }
        }
        return this;
    };

    return Drag;

})();

module.exports = Drag;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/drag.coffee