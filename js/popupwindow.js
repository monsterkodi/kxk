(function() {
  /*
  00000000    0000000   00000000   000   000  00000000   000   000  000  000   000  
  000   000  000   000  000   000  000   000  000   000  000 0 000  000  0000  000  
  00000000   000   000  00000000   000   000  00000000   000000000  000  000 0 000  
  000        000   000  000        000   000  000        000   000  000  000  0000  
  000         0000000   000         0000000   000        00     00  000  000   000  
  */
  var PopupWindow, _, elem, keyinfo, slash;

  ({keyinfo, slash, elem, _} = require('./kxk'));

  PopupWindow = (function() {
    class PopupWindow {
      
      //  0000000  000   000   0000000   000   000  
      // 000       000   000  000   000  000 0 000  
      // 0000000   000000000  000   000  000000000  
      //      000  000   000  000   000  000   000  
      // 0000000   000   000   0000000   00     00  
      static show(opt) {
        var Browser, electron, html, i, item, len, popupOpt, ref, ref1, remote, win;
        electron = require('electron');
        PopupWindow.opt = opt;
        popupOpt = {
          winID: electron.remote.getCurrentWindow().id,
          items: []
        };
        ref = opt.items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (!item.hide) {
            popupOpt.items.push({
              text: item.text,
              combo: item.combo
            });
          }
        }
        remote = electron.remote;
        Browser = remote.BrowserWindow;
        electron.ipcRenderer.on('popupItem', PopupWindow.onPopupItem);
        electron.ipcRenderer.on('popupClose', PopupWindow.close);
        if (PopupWindow.win != null) {
          PopupWindow.win.setPosition(opt.x, opt.y);
        } else {
          win = new Browser({
            x: opt.x,
            y: opt.y,
            backgroundColor: (ref1 = opt.background) != null ? ref1 : '#222',
            hasShadow: true,
            show: false,
            frame: false,
            resizable: false,
            minimizable: false,
            maximizable: false,
            fullscreenable: false,
            webPreferences: {
              webSecurity: false
            },
            width: 240,
            height: popupOpt.items.length * 28
          });
          win.on('blur', PopupWindow.close);
          PopupWindow.win = win;
        }
        html = `<link rel='stylesheet' href="${slash.fileUrl(opt.stylesheet)}" type='text/css'>\n<body>\n<script>\n    var PopupWindow = require("${slash.path(__dirname)}/popupWindow");\n    new PopupWindow(${JSON.stringify(popupOpt)});\n</script>\n</body>`;
        PopupWindow.win.loadURL("data:text/html;charset=utf-8," + encodeURI(html));
        PopupWindow.win.webContents.on('did-finish-load', function() {
          return PopupWindow.win.show();
        });
        return PopupWindow.win;
      }

      static onPopupItem(e, text) {
        var i, item, len, ref, results;
        PopupWindow.close();
        ref = PopupWindow.opt.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item.text === text) {
            if (typeof item.cb === "function") {
              item.cb();
            }
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }

      static close() {
        var electron, ref;
        electron = require('electron');
        electron.ipcRenderer.removeListener('popupItem', PopupWindow.onPopupItem);
        electron.ipcRenderer.removeListener('popupClose', PopupWindow.close);
        return (ref = PopupWindow.win) != null ? ref.hide() : void 0;
      }

      // 00000000    0000000   00000000   000   000  00000000   
      // 000   000  000   000  000   000  000   000  000   000  
      // 00000000   000   000  00000000   000   000  00000000   
      // 000        000   000  000        000   000  000        
      // 000         0000000   000         0000000   000        
      constructor(opt) {
        var combo, div, i, item, len, ref, ref1;
        this.close = this.close.bind(this);
        this.onHover = this.onHover.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.onClick = this.onClick.bind(this);
        this.items = elem({
          class: 'popupWindow',
          tabindex: 1
        });
        this.targetWinID = opt.winID;
        ref = opt.items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item.hide) {
            continue;
          }
          div = elem({
            class: 'popupItem',
            text: item.text
          });
          div.item = item;
          div.addEventListener('click', this.onClick);
          if (item.combo != null) {
            combo = elem('span', {
              class: 'popupCombo',
              text: item.combo
            });
            div.appendChild(combo);
          }
          this.items.appendChild(div);
        }
        this.select(this.items.firstChild);
        ((ref1 = opt.parent) != null ? ref1 : document.body).appendChild(this.items);
        this.items.addEventListener('keydown', this.onKeyDown);
        this.items.addEventListener('focusout', this.onFocusOut);
        this.items.addEventListener('mouseover', this.onHover);
        this.items.focus();
        this.getWin().setSize(parseInt(this.items.getBoundingClientRect().width), parseInt(this.items.getBoundingClientRect().height));
      }

      close() {
        var electron, ref, ref1, ref2, ref3, targetWin;
        electron = require('electron');
        if ((ref = this.items) != null) {
          ref.removeEventListener('keydown', this.onKeyDown);
        }
        if ((ref1 = this.items) != null) {
          ref1.removeEventListener('focusout', this.onFocusOut);
        }
        if ((ref2 = this.items) != null) {
          ref2.removeEventListener('mouseover', this.onHover);
        }
        if ((ref3 = this.items) != null) {
          ref3.remove();
        }
        delete this.items;
        targetWin = electron.remote.BrowserWindow.fromId(this.targetWinID);
        return targetWin.webContents.send('popupClose');
      }

      getWin() {
        return require('electron').remote.getCurrentWindow();
      }

      select(item) {
        var ref;
        if (item == null) {
          return;
        }
        if ((ref = this.selected) != null) {
          ref.classList.remove('selected');
        }
        this.selected = item;
        return this.selected.classList.add('selected');
      }

      activate(item) {
        var electron, ref, targetWin;
        electron = require('electron');
        targetWin = electron.remote.BrowserWindow.fromId(this.targetWinID);
        targetWin.webContents.send('popupItem', (ref = item.item.ipc) != null ? ref : item.item.text);
        return this.close();
      }

      onHover(event) {
        return this.select(event.target);
      }

      onKeyDown(event) {
        var combo, electron, key, mod, ref, ref1, ref2, ref3, ref4, ref5, targetWin;
        electron = require('electron');
        ({mod, key, combo} = keyinfo.forEvent(event));
        switch (combo) {
          case 'end':
          case 'page down':
            return this.select(this.items.lastChild);
          case 'home':
          case 'page up':
            return this.select(this.items.firstChild);
          case 'enter':
            return this.activate(this.selected);
          case 'esc':
          case 'space':
            return this.close();
          case 'down':
            return this.select((ref = (ref1 = this.selected) != null ? ref1.nextSibling : void 0) != null ? ref : this.items.firstChild);
          case 'up':
            return this.select((ref2 = (ref3 = this.selected) != null ? ref3.previousSibling : void 0) != null ? ref2 : this.items.lastChild);
          case 'right':
            return this.select((ref4 = this.selected) != null ? ref4.nextSibling : void 0);
          case 'left':
            return this.select((ref5 = this.selected) != null ? ref5.previousSibling : void 0);
        }
        if (key.length < 1) {
          return;
        }
        targetWin = electron.remote.BrowserWindow.fromId(this.targetWinID);
        targetWin.webContents.send('popupModKeyCombo', mod, key, combo);
        return this.close();
      }

      onClick(e) {
        return this.activate(e.target);
      }

    };

    PopupWindow.win = null;

    PopupWindow.opt = null;

    PopupWindow.popup = null;

    return PopupWindow;

  }).call(this);

  module.exports = PopupWindow;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/popupwindow.coffee