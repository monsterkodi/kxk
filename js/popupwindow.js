// Generated by CoffeeScript 1.12.7

/*
00000000    0000000   00000000   000   000  00000000   000   000  000  000   000  
000   000  000   000  000   000  000   000  000   000  000 0 000  000  0000  000  
00000000   000   000  00000000   000   000  00000000   000000000  000  000 0 000  
000        000   000  000        000   000  000        000   000  000  000  0000  
000         0000000   000         0000000   000        00     00  000  000   000
 */

(function() {
  var PopupWindow, _, elem, keyinfo, ref, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('./kxk'), keyinfo = ref.keyinfo, slash = ref.slash, elem = ref.elem, _ = ref._;

  PopupWindow = (function() {
    PopupWindow.win = null;

    PopupWindow.opt = null;

    PopupWindow.popup = null;

    PopupWindow.show = function(opt) {
      var Browser, electron, html, i, item, len, popupOpt, ref1, ref2, remote, win;
      electron = require('electron');
      PopupWindow.opt = opt;
      popupOpt = {
        winID: electron.remote.getCurrentWindow().id,
        items: []
      };
      ref1 = opt.items;
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        if (!item.hide) {
          popupOpt.items.push({
            text: item.text,
            combo: item.combo
          });
        }
      }
      remote = electron.remote;
      Browser = remote.BrowserWindow;
      electron.ipcRenderer.on('popupItem', PopupWindow.onPopupItem);
      electron.ipcRenderer.on('popupClose', PopupWindow.close);
      if (PopupWindow.win != null) {
        PopupWindow.win.setPosition(opt.x, opt.y);
      } else {
        win = new Browser({
          x: opt.x,
          y: opt.y,
          backgroundColor: (ref2 = opt.background) != null ? ref2 : '#222',
          hasShadow: true,
          show: false,
          frame: false,
          resizable: false,
          minimizable: false,
          maximizable: false,
          fullscreenable: false,
          webPreferences: {
            webSecurity: false
          },
          width: 240,
          height: popupOpt.items.length * 28
        });
        win.on('blur', PopupWindow.close);
        PopupWindow.win = win;
      }
      html = "<link rel='stylesheet' href=\"" + (slash.fileUrl(opt.stylesheet)) + "\" type='text/css'>\n<body>\n<script>\n    var PopupWindow = require(\"" + (slash.path(__dirname)) + "/popupWindow\");\n    new PopupWindow(" + (JSON.stringify(popupOpt)) + ");\n</script>\n</body>";
      PopupWindow.win.loadURL("data:text/html;charset=utf-8," + encodeURI(html));
      PopupWindow.win.webContents.on('did-finish-load', function() {
        return PopupWindow.win.show();
      });
      return PopupWindow.win;
    };

    PopupWindow.onPopupItem = function(e, text) {
      var i, item, len, ref1, results;
      PopupWindow.close();
      ref1 = PopupWindow.opt.items;
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        if (item.text === text) {
          if (typeof item.cb === "function") {
            item.cb();
          }
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    PopupWindow.close = function() {
      var electron, ref1;
      electron = require('electron');
      electron.ipcRenderer.removeListener('popupItem', PopupWindow.onPopupItem);
      electron.ipcRenderer.removeListener('popupClose', PopupWindow.close);
      return (ref1 = PopupWindow.win) != null ? ref1.hide() : void 0;
    };

    function PopupWindow(opt) {
      this.onClick = bind(this.onClick, this);
      this.onKeyDown = bind(this.onKeyDown, this);
      this.onHover = bind(this.onHover, this);
      this.close = bind(this.close, this);
      var combo, div, i, item, len, ref1, ref2;
      this.items = elem({
        "class": 'popupWindow',
        tabindex: 1
      });
      this.targetWinID = opt.winID;
      ref1 = opt.items;
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        if (item.hide) {
          continue;
        }
        div = elem({
          "class": 'popupItem',
          text: item.text
        });
        div.item = item;
        div.addEventListener('click', this.onClick);
        if (item.combo != null) {
          combo = elem('span', {
            "class": 'popupCombo',
            text: item.combo
          });
          div.appendChild(combo);
        }
        this.items.appendChild(div);
      }
      this.select(this.items.firstChild);
      ((ref2 = opt.parent) != null ? ref2 : document.body).appendChild(this.items);
      this.items.addEventListener('keydown', this.onKeyDown);
      this.items.addEventListener('focusout', this.onFocusOut);
      this.items.addEventListener('mouseover', this.onHover);
      this.items.focus();
      this.getWin().setSize(parseInt(this.items.getBoundingClientRect().width), parseInt(this.items.getBoundingClientRect().height));
    }

    PopupWindow.prototype.close = function() {
      var electron, ref1, ref2, ref3, ref4, targetWin;
      electron = require('electron');
      if ((ref1 = this.items) != null) {
        ref1.removeEventListener('keydown', this.onKeyDown);
      }
      if ((ref2 = this.items) != null) {
        ref2.removeEventListener('focusout', this.onFocusOut);
      }
      if ((ref3 = this.items) != null) {
        ref3.removeEventListener('mouseover', this.onHover);
      }
      if ((ref4 = this.items) != null) {
        ref4.remove();
      }
      delete this.items;
      targetWin = electron.remote.BrowserWindow.fromId(this.targetWinID);
      return targetWin.webContents.send('popupClose');
    };

    PopupWindow.prototype.getWin = function() {
      return require('electron').remote.getCurrentWindow();
    };

    PopupWindow.prototype.select = function(item) {
      var ref1;
      if (item == null) {
        return;
      }
      if ((ref1 = this.selected) != null) {
        ref1.classList.remove('selected');
      }
      this.selected = item;
      return this.selected.classList.add('selected');
    };

    PopupWindow.prototype.activate = function(item) {
      var electron, ref1, targetWin;
      electron = require('electron');
      targetWin = electron.remote.BrowserWindow.fromId(this.targetWinID);
      targetWin.webContents.send('popupItem', (ref1 = item.item.ipc) != null ? ref1 : item.item.text);
      return this.close();
    };

    PopupWindow.prototype.onHover = function(event) {
      return this.select(event.target);
    };

    PopupWindow.prototype.onKeyDown = function(event) {
      var combo, electron, key, mod, ref1, ref2, ref3, ref4, ref5, ref6, ref7, targetWin;
      electron = require('electron');
      ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo;
      switch (combo) {
        case 'end':
        case 'page down':
          return this.select(this.items.lastChild);
        case 'home':
        case 'page up':
          return this.select(this.items.firstChild);
        case 'enter':
          return this.activate(this.selected);
        case 'esc':
        case 'space':
          return this.close();
        case 'down':
          return this.select((ref2 = (ref3 = this.selected) != null ? ref3.nextSibling : void 0) != null ? ref2 : this.items.firstChild);
        case 'up':
          return this.select((ref4 = (ref5 = this.selected) != null ? ref5.previousSibling : void 0) != null ? ref4 : this.items.lastChild);
        case 'right':
          return this.select((ref6 = this.selected) != null ? ref6.nextSibling : void 0);
        case 'left':
          return this.select((ref7 = this.selected) != null ? ref7.previousSibling : void 0);
      }
      if (key.length < 1) {
        return;
      }
      targetWin = electron.remote.BrowserWindow.fromId(this.targetWinID);
      targetWin.webContents.send('popupModKeyCombo', mod, key, combo);
      return this.close();
    };

    PopupWindow.prototype.onClick = function(e) {
      return this.activate(e.target);
    };

    return PopupWindow;

  })();

  module.exports = PopupWindow;

}).call(this);
