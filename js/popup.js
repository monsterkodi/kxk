// koffee 0.56.0

/*
00000000    0000000   00000000   000   000  00000000 
000   000  000   000  000   000  000   000  000   000
00000000   000   000  00000000   000   000  00000000 
000        000   000  000        000   000  000      
000         0000000   000         0000000   000
 */
var Popup, elem, empty, keyinfo, menu, os, post, ref, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('./kxk'), post = ref.post, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, empty = ref.empty, elem = ref.elem, menu = ref.menu, os = ref.os;

Popup = (function() {
    function Popup(opt) {
        this.onKeyDown = bind(this.onKeyDown, this);
        this.onFocusOut = bind(this.onFocusOut, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.onClick = bind(this.onClick, this);
        this.onHover = bind(this.onHover, this);
        this.close = bind(this.close, this);
        var br, div, i, item, len, ref1, ref2, ref3, ref4, text;
        this.focusElem = document.activeElement;
        this.items = elem({
            "class": 'popup',
            tabindex: 3
        });
        this.parent = opt.parent;
        this.onClose = opt.onClose;
        if (opt["class"]) {
            this.items.classList.add(opt["class"]);
        }
        ref1 = opt.items;
        for (i = 0, len = ref1.length; i < len; i++) {
            item = ref1[i];
            if (item.hide) {
                continue;
            }
            if (empty(item.text) && empty(item.html)) {
                div = elem('hr', {
                    "class": 'popupItem separator'
                });
            } else {
                div = elem({
                    "class": 'popupItem',
                    text: item.text
                });
                if (!empty(item.html)) {
                    div.innerHTML = item.html;
                }
                div.item = item;
                div.addEventListener('click', this.onClick);
                if ((ref2 = item.combo) != null ? ref2 : item.accel) {
                    text = keyinfo.short(os.platform() === 'darwin' ? (ref3 = item.combo) != null ? ref3 : item.accel : (ref4 = item.accel) != null ? ref4 : item.combo);
                    div.appendChild(elem('span', {
                        "class": 'popupCombo',
                        text: text
                    }));
                } else if (item.menu) {
                    div.appendChild(elem('span', {
                        "class": 'popupCombo',
                        text: 'â–¶'
                    }));
                }
            }
            this.items.appendChild(div);
        }
        document.body.appendChild(this.items);
        this.items.addEventListener('contextmenu', this.onContextMenu);
        this.items.addEventListener('keydown', this.onKeyDown);
        this.items.addEventListener('focusout', this.onFocusOut);
        this.items.addEventListener('mouseover', this.onHover);
        br = this.items.getBoundingClientRect();
        if (opt.x + br.width > document.body.clientWidth) {
            this.items.style.left = (document.body.clientWidth - br.width) + "px";
        } else {
            this.items.style.left = opt.x + "px";
        }
        if (opt.y + br.height > document.body.clientHeight) {
            this.items.style.top = (document.body.clientHeight - br.height) + "px";
        } else {
            this.items.style.top = opt.y + "px";
        }
        if (opt.selectFirstItem !== false) {
            this.select(this.items.firstChild, {
                selectFirstItem: false
            });
        }
        post.emit('popup', 'opened');
    }

    Popup.prototype.close = function(opt) {
        var ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
        if (opt == null) {
            opt = {};
        }
        if (empty(this.parent) || ((ref1 = this.parentMenu()) != null ? (ref2 = ref1.elem) != null ? ref2.classList.contains('menu') : void 0 : void 0)) {
            post.emit('popup', 'closed');
            if (typeof this.onClose === "function") {
                this.onClose();
            }
        }
        if ((ref3 = this.popup) != null) {
            ref3.close({
                focus: false
            });
        }
        delete this.popup;
        if ((ref4 = this.items) != null) {
            ref4.removeEventListener('keydown', this.onKeyDown);
        }
        if ((ref5 = this.items) != null) {
            ref5.removeEventListener('focusout', this.onFocusOut);
        }
        if ((ref6 = this.items) != null) {
            ref6.removeEventListener('mouseover', this.onHover);
        }
        if ((ref7 = this.items) != null) {
            ref7.remove();
        }
        delete this.items;
        if ((ref8 = this.parent) != null) {
            ref8.childClosed(this, opt);
        }
        if (opt.all) {
            if (this.parent != null) {
                this.parent.close(opt);
            }
        }
        if (opt.focus !== false && !this.parent) {
            return (ref9 = this.focusElem) != null ? ref9.focus() : void 0;
        }
    };

    Popup.prototype.childClosed = function(child, opt) {
        if (child === this.popup) {
            delete this.popup;
            if (opt.focus !== false) {
                return this.focus();
            }
        }
    };

    Popup.prototype.select = function(item, opt) {
        var ref1, ref2;
        if (opt == null) {
            opt = {};
        }
        if (item == null) {
            return;
        }
        if (this.popup != null) {
            this.popup.close({
                focus: false
            });
        }
        if ((ref1 = this.selected) != null) {
            ref1.classList.remove('selected');
        }
        this.selected = item;
        this.selected.classList.add('selected');
        if (((ref2 = item.item) != null ? ref2.menu : void 0) && opt.open !== false) {
            delete this.popup;
            this.popupChild(item, opt);
        }
        return this.focus();
    };

    Popup.prototype.popupChild = function(item, opt) {
        var br, items;
        if (opt == null) {
            opt = {};
        }
        if (items = item.item.menu) {
            if (this.popup) {
                return this.closePopup();
            } else {
                br = item.getBoundingClientRect();
                return this.popup = new Popup({
                    items: items,
                    parent: this,
                    x: br.left + br.width,
                    y: br.top,
                    selectFirstItem: opt != null ? opt.selectFirstItem : void 0
                });
            }
        }
    };

    Popup.prototype.closePopup = function() {
        var ref1;
        if ((ref1 = this.popup) != null) {
            ref1.close({
                focus: false
            });
        }
        return delete this.popup;
    };

    Popup.prototype.navigateLeft = function() {
        if (this.popup) {
            return this.closePopup();
        } else if (menu = this.parentMenu()) {
            return menu.navigateLeft();
        } else if (this.parent) {
            return this.close({
                focus: false
            });
        }
    };

    Popup.prototype.activateOrNavigateRight = function() {
        if (this.selected != null) {
            if (!this.selected.item.menu) {
                return this.activate(this.selected);
            } else {
                return this.navigateRight();
            }
        }
    };

    Popup.prototype.navigateRight = function() {
        var ref1;
        if (this.popup) {
            return this.popup.select(this.popup.items.firstChild);
        } else if ((ref1 = this.selected) != null ? ref1.item.menu : void 0) {
            return this.select(this.selected, {
                selectFirstItem: true
            });
        } else if (menu = this.parentMenu()) {
            return menu.navigateRight();
        }
    };

    Popup.prototype.parentMenu = function() {
        if ((this.parent != null) && !this.parent.parent) {
            return this.parent;
        }
    };

    Popup.prototype.nextItem = function() {
        var next, ref1;
        if (next = this.selected) {
            while (next = next.nextSibling) {
                if (!empty((ref1 = next.item) != null ? ref1.text : void 0)) {
                    return next;
                }
            }
        }
    };

    Popup.prototype.prevItem = function() {
        var prev, ref1;
        if (prev = this.selected) {
            while (prev = prev.previousSibling) {
                if (!empty((ref1 = prev.item) != null ? ref1.text : void 0)) {
                    return prev;
                }
            }
        }
    };

    Popup.prototype.activate = function(item) {
        var ref1, ref2, ref3;
        if (((ref1 = item.item) != null ? ref1.cb : void 0) != null) {
            this.close({
                all: true
            });
            return item.item.cb((ref2 = item.item.arg) != null ? ref2 : item.item.text);
        } else if (!item.item.menu) {
            this.close({
                all: true
            });
            return post.emit('menuAction', (ref3 = item.item.action) != null ? ref3 : item.item.text, item.item);
        }
    };

    Popup.prototype.toggle = function(item) {
        if (this.popup) {
            this.popup.close({
                focus: false
            });
            return delete this.popup;
        } else {
            return this.select(item, {
                selectFirstItem: false
            });
        }
    };

    Popup.prototype.onHover = function(event) {
        var item;
        item = elem.upElem(event.target, {
            prop: 'item'
        });
        if (item) {
            return this.select(item, {
                selectFirstItem: false
            });
        }
    };

    Popup.prototype.onClick = function(event) {
        var item;
        stopEvent(event);
        item = elem.upElem(event.target, {
            prop: 'item'
        });
        if (item) {
            if (item.item.menu) {
                return this.toggle(item);
            } else {
                return this.activate(item);
            }
        }
    };

    Popup.prototype.onContextMenu = function(event) {
        return stopEvent(event);
    };

    Popup.prototype.focus = function() {
        var ref1;
        return (ref1 = this.items) != null ? ref1.focus() : void 0;
    };

    Popup.prototype.onFocusOut = function(event) {
        var ref1;
        if (!((ref1 = event.relatedTarget) != null ? ref1.classList.contains('popup') : void 0)) {
            return this.close({
                all: true,
                focus: false
            });
        }
    };

    Popup.prototype.onKeyDown = function(event) {
        var combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo;
        switch (combo) {
            case 'end':
            case 'page down':
                return stopEvent(event, this.select(this.items.lastChild, {
                    selectFirstItem: false
                }));
            case 'home':
            case 'page up':
                return stopEvent(event, this.select(this.items.firstChild, {
                    selectFirstItem: false
                }));
            case 'esc':
                return stopEvent(event, this.close());
            case 'down':
                return stopEvent(event, this.select(this.nextItem(), {
                    selectFirstItem: false
                }));
            case 'up':
                return stopEvent(event, this.select(this.prevItem(), {
                    selectFirstItem: false
                }));
            case 'enter':
            case 'space':
                return stopEvent(event, this.activateOrNavigateRight());
            case 'left':
                return stopEvent(event, this.navigateLeft());
            case 'right':
                return stopEvent(event, this.navigateRight());
        }
    };

    return Popup;

})();

module.exports = {
    menu: function(opt) {
        return new Popup(opt);
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/popup.coffee