/*
000   000  000   000  000   000  
000  000    000 000   000  000   
0000000      00000    0000000    
000  000    000 000   000  000   
000   000  000   000  000   000  
*/
var _, atomic, childp, colors, crypto, fs, i, k, karg, len, noon, open, os, post, ref, sds, walkdir;

childp = require('child_process');

crypto = require('crypto');

_ = require('lodash');

os = require('os');

noon = require('noon');

sds = require('sds');

fs = require('fs-extra');

open = require('opener');

walkdir = require('walkdir');

atomic = require('write-file-atomic');

post = require('./ppost');

karg = require('karg');

colors = require('colors');

module.exports = {
  _: _,
  os: os,
  fs: fs,
  sds: sds,
  karg: karg,
  colors: colors,
  atomic: atomic,
  walkdir: walkdir,
  open: open,
  post: post,
  noon: noon,
  childp: childp,
  
  // 0000000    000   0000000  000000000
  // 000   000  000  000          000   
  // 000   000  000  000          000   
  // 000   000  000  000          000   
  // 0000000    000   0000000     000   
  def: function(c, d) {
    if (c != null) {
      return _.defaults(_.clone(c), d);
    } else if (d != null) {
      return _.clone(d);
    } else {
      return {};
    }
  },
  
  // 00000000  000  000      000000000  00000000  00000000   
  // 000       000  000         000     000       000   000  
  // 000000    000  000         000     0000000   0000000    
  // 000       000  000         000     000       000   000  
  // 000       000  0000000     000     00000000  000   000  
  filter: function(o, f) {
    if (_.isArray(o)) {
      return _.filter(o, f);
    } else if (_.isObject(o)) {
      return _.pickBy(o, f);
    } else {
      return o;
    }
  },
  
  // 000   000   0000000   000      000   000  00000000
  // 000   000  000   000  000      000   000  000     
  //  000 000   000000000  000      000   000  0000000 
  //    000     000   000  000      000   000  000     
  //     0      000   000  0000000   0000000   00000000
  clamp: function(r1, r2, v) {
    var s1, s2;
    if (!_.isFinite(v)) {
      v = r1;
    }
    [s1, s2] = [Math.min(r1, r2), Math.max(r1, r2)];
    if (v < s1) {
      v = s1;
    }
    if (v > s2) {
      v = s2;
    }
    if (!_.isFinite(v)) {
      v = r1;
    }
    return v;
  },
  fadeAngles: function(a, b, f) {
    if (a - b > 180) {
      a -= 360;
    } else if (a - b < -180) {
      a += 360;
    }
    return (1 - f) * a + f * b;
  },
  reduce: function(v, d) {
    if (v >= 0) {
      return Math.max(0, v - d);
    } else {
      return Math.min(0, v + d);
    }
  },
  fade: function(s, e, v) {
    return s * (1 - v) + e * v;
  },
  last: function(a) {
    return _.last(a);
  },
  first: function(a) {
    return _.first(a);
  },
  empty: function(a) {
    return !_.isNumber(a) && _.isEmpty(a) || a === '';
  },
  valid: function(a) {
    return _.isNumber(a) || (_.isString(a) && a !== '') || !_.isEmpty(a);
  },
  absMax: function(a, b) {
    if (Math.abs(a) >= Math.abs(b)) {
      return a;
    } else {
      return b;
    }
  },
  absMin: function(a, b) {
    if (Math.abs(a) < Math.abs(b)) {
      return a;
    } else {
      return b;
    }
  },
  randInt: function(r) {
    return Math.floor(Math.random() * r);
  },
  shortCount: function(v) {
    v = parseInt(v);
    switch (false) {
      case !(v > 999999):
        return `${Math.floor(v / 1000000)}M`;
      case !(v > 999):
        return `${Math.floor(v / 1000)}k`;
      default:
        return `${v}`;
    }
  },
  rad2deg: function(r) {
    return 180 * r / Math.PI;
  },
  deg2rad: function(d) {
    return Math.PI * d / 180;
  },
  reversed: function(a) {
    return _.clone(a).reverse();
  },
  
  //  0000000   0000000  00000000   000  00000000   000000000  
  // 000       000       000   000  000  000   000     000     
  // 0000000   000       0000000    000  00000000      000     
  //      000  000       000   000  000  000           000     
  // 0000000    0000000  000   000  000  000           000     
  osascript: function(script) {
    var l;
    return ((function() {
      var i, len, ref, results;
      ref = script.split("\n");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];
        results.push(`-e "${l.replace(/\"/g, "\\\"")}"`);
      }
      return results;
    })()).join(" ");
  }
};

//  0000000  000000000  00000000   000  000   000   0000000 
// 000          000     000   000  000  0000  000  000      
// 0000000      000     0000000    000  000 0 000  000  0000
//      000     000     000   000  000  000  0000  000   000
// 0000000      000     000   000  000  000   000   0000000 
if (!String.prototype.splice) {
  String.prototype.splice = function(start, delCount, newSubStr = '') {
    return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
  };
}

if (!String.prototype.strip) {
  String.prototype.strip = String.prototype.trim;
}

if (!String.prototype.hash) {
  String.prototype.hash = function() {
    return crypto.createHash('md5').update(this.valueOf(), 'utf8').digest('hex');
  };
}


//  0000000   00000000   00000000    0000000   000   000
// 000   000  000   000  000   000  000   000   000 000 
// 000000000  0000000    0000000    000000000    00000  
// 000   000  000   000  000   000  000   000     000   
// 000   000  000   000  000   000  000   000     000   
if (!Array.prototype.clone) {
  Array.prototype.clone = function() {
    return this.slice(0);
  };
}

if (!Array.prototype.reversed) {
  Array.prototype.reversed = function() {
    return this.slice(0).reverse();
  };
}

module.exports.str = require('./str');

module.exports.log = require('./log');

module.exports.error = require('./error');

module.exports.pos = require('./pos');

module.exports.slash = require('./slash');

ref = Object.keys(require('./dom'));
for (i = 0, len = ref.length; i < len; i++) {
  k = ref[i];
  module.exports[k] = require('./dom')[k];
}

module.exports.drag = require('./drag');

module.exports.elem = require('./elem');

module.exports.stash = require('./stash');

module.exports.store = require('./store');

module.exports.state = require('./state');

module.exports.prefs = require('./prefs');

module.exports.filelist = require('./filelist');

module.exports.keyinfo = require('./keyinfo');

module.exports.history = require('./history');

module.exports.scheme = require('./scheme');

module.exports.about = require('./about');

module.exports.popup = require('./popup');

module.exports.menu = require('./menu');

module.exports.title = require('./title');

module.exports.matchr = require('./matchr');

module.exports.popupWindow = require('./popupwindow');

module.exports.tooltip = require('./tooltip');

module.exports.args = require('./args');

module.exports.srcmap = require('./srcmap');

module.exports.watch = require('./watch');

module.exports.app = require('./app');

module.exports.win = require('./win');

module.exports.udp = require('./udp');

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/kxk.coffee