(function() {
  /*
  000   000  000   000  000   000  
  000  000    000 000   000  000   
  0000000      00000    0000000    
  000  000    000 000   000  000   
  000   000  000   000  000   000  
  */
  var _, atomic, childp, colors, crypto, fs, i, k, karg, len, noon, open, os, post, ref, sds, walkdir, watch;

  childp = require('child_process');

  crypto = require('crypto');

  _ = require('lodash');

  os = require('os');

  noon = require('noon');

  sds = require('sds');

  fs = require('fs-extra');

  open = require('opener');

  walkdir = require('walkdir');

  atomic = require('write-file-atomic');

  watch = require('chokidar');

  post = require('./ppost');

  karg = require('karg');

  colors = require('colors');

  module.exports = {
    _: _,
    os: os,
    fs: fs,
    sds: sds,
    karg: karg,
    colors: colors,
    atomic: atomic,
    walkdir: walkdir,
    watch: watch,
    open: open,
    post: post,
    noon: noon,
    childp: childp,
    
    // 0000000    000   0000000  000000000
    // 000   000  000  000          000   
    // 000   000  000  000          000   
    // 000   000  000  000          000   
    // 0000000    000   0000000     000   
    def: function(c, d) {
      if (c != null) {
        return _.defaults(_.clone(c), d);
      } else if (d != null) {
        return _.clone(d);
      } else {
        return {};
      }
    },
    
    // 00000000  000  000      000000000  00000000  00000000   
    // 000       000  000         000     000       000   000  
    // 000000    000  000         000     0000000   0000000    
    // 000       000  000         000     000       000   000  
    // 000       000  0000000     000     00000000  000   000  
    filter: function(o, f) {
      if (_.isArray(o)) {
        return _.filter(o, f);
      } else if (_.isObject(o)) {
        return _.pickBy(o, f);
      } else {
        return o;
      }
    },
    
    // 000   000   0000000   000      000   000  00000000
    // 000   000  000   000  000      000   000  000     
    //  000 000   000000000  000      000   000  0000000 
    //    000     000   000  000      000   000  000     
    //     0      000   000  0000000   0000000   00000000
    clamp: function(r1, r2, v) {
      var s1, s2;
      if (!_.isFinite(v)) {
        v = r1;
      }
      [s1, s2] = [Math.min(r1, r2), Math.max(r1, r2)];
      if (v < s1) {
        v = s1;
      }
      if (v > s2) {
        v = s2;
      }
      if (!_.isFinite(v)) {
        v = r1;
      }
      return v;
    },
    fadeAngles: function(a, b, f) {
      if (a - b > 180) {
        a -= 360;
      } else if (a - b < -180) {
        a += 360;
      }
      return (1 - f) * a + f * b;
    },
    fade: function(s, e, v) {
      return s * (1 - v) + e * v;
    },
    last: function(a) {
      return _.last(a);
    },
    first: function(a) {
      return _.first(a);
    },
    empty: function(a) {
      return !_.isNumber(a) && _.isEmpty(a) || a === '';
    },
    valid: function(a) {
      return _.isNumber(a) || (_.isString(a) && a !== '') || !_.isEmpty(a);
    },
    absMax: function(a, b) {
      if (Math.abs(a) >= Math.abs(b)) {
        return a;
      } else {
        return b;
      }
    },
    absMin: function(a, b) {
      if (Math.abs(a) < Math.abs(b)) {
        return a;
      } else {
        return b;
      }
    },
    randInt: function(r) {
      return Math.floor(Math.random() * r);
    },
    shortCount: function(v) {
      v = parseInt(v);
      switch (false) {
        case !(v > 999999):
          return `${Math.floor(v / 1000000)}M`;
        case !(v > 999):
          return `${Math.floor(v / 1000)}k`;
        default:
          return `${v}`;
      }
    },
    rad2deg: function(r) {
      return 180 * r / Math.PI;
    },
    deg2rad: function(d) {
      return Math.PI * d / 180;
    },
    reversed: function(a) {
      return _.clone(a).reverse();
    },
    
    //  0000000   0000000  00000000   000  00000000   000000000  
    // 000       000       000   000  000  000   000     000     
    // 0000000   000       0000000    000  00000000      000     
    //      000  000       000   000  000  000           000     
    // 0000000    0000000  000   000  000  000           000     
    osascript: function(script) {
      var l;
      return ((function() {
        var i, len, ref, results;
        ref = script.split("\n");
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          l = ref[i];
          results.push(`-e "${l.replace(/\"/g, "\\\"")}"`);
        }
        return results;
      })()).join(" ");
    }
  };

  //  0000000  000000000  00000000   000  000   000   0000000 
  // 000          000     000   000  000  0000  000  000      
  // 0000000      000     0000000    000  000 0 000  000  0000
  //      000     000     000   000  000  000  0000  000   000
  // 0000000      000     000   000  000  000   000   0000000 
  if (!String.prototype.splice) {
    String.prototype.splice = function(start, delCount, newSubStr = '') {
      return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
    };
  }

  if (!String.prototype.strip) {
    String.prototype.strip = String.prototype.trim;
  }

  if (!String.prototype.hash) {
    String.prototype.hash = function() {
      return crypto.createHash('md5').update(this.valueOf(), 'utf8').digest('hex');
    };
  }

  module.exports.str = require('./str');

  module.exports.log = require('./log');

  module.exports.error = require('./error');

  module.exports.pos = require('./pos');

  module.exports.slash = require('./slash');

  ref = Object.keys(require('./dom'));
  for (i = 0, len = ref.length; i < len; i++) {
    k = ref[i];
    module.exports[k] = require('./dom')[k];
  }

  module.exports.drag = require('./drag');

  module.exports.elem = require('./elem');

  module.exports.stash = require('./stash');

  module.exports.store = require('./store');

  module.exports.state = require('./state');

  module.exports.prefs = require('./prefs');

  module.exports.fileList = require('./fileList');

  module.exports.keyinfo = require('./keyinfo');

  module.exports.history = require('./history');

  module.exports.scheme = require('./scheme');

  module.exports.about = require('./about');

  module.exports.popup = require('./popup');

  module.exports.menu = require('./menu');

  module.exports.title = require('./title');

  module.exports.matchr = require('./matchr');

  module.exports.popupWindow = require('./popupWindow');

  module.exports.tooltip = require('./tooltip');

  module.exports.args = require('./args');

  module.exports.app = require('./app');

  module.exports.win = require('./win');

  module.exports.udp = require('./udp');

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3hrLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIi4uL2NvZmZlZS9reGsuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUE7Ozs7Ozs7QUFBQSxNQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7O0VBUUEsTUFBQSxHQUFVLE9BQUEsQ0FBUSxlQUFSOztFQUNWLE1BQUEsR0FBVSxPQUFBLENBQVEsUUFBUjs7RUFDVixDQUFBLEdBQVUsT0FBQSxDQUFRLFFBQVI7O0VBQ1YsRUFBQSxHQUFVLE9BQUEsQ0FBUSxJQUFSOztFQUNWLElBQUEsR0FBVSxPQUFBLENBQVEsTUFBUjs7RUFDVixHQUFBLEdBQVUsT0FBQSxDQUFRLEtBQVI7O0VBQ1YsRUFBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztFQUNWLElBQUEsR0FBVSxPQUFBLENBQVEsUUFBUjs7RUFDVixPQUFBLEdBQVUsT0FBQSxDQUFRLFNBQVI7O0VBQ1YsTUFBQSxHQUFVLE9BQUEsQ0FBUSxtQkFBUjs7RUFDVixLQUFBLEdBQVUsT0FBQSxDQUFRLFVBQVI7O0VBQ1YsSUFBQSxHQUFVLE9BQUEsQ0FBUSxTQUFSOztFQUNWLElBQUEsR0FBVSxPQUFBLENBQVEsTUFBUjs7RUFDVixNQUFBLEdBQVUsT0FBQSxDQUFRLFFBQVI7O0VBRVYsTUFBTSxDQUFDLE9BQVAsR0FFSTtJQUFBLENBQUEsRUFBRSxDQUFGO0lBQ0EsRUFBQSxFQUFHLEVBREg7SUFFQSxFQUFBLEVBQUcsRUFGSDtJQUdBLEdBQUEsRUFBSSxHQUhKO0lBSUEsSUFBQSxFQUFLLElBSkw7SUFLQSxNQUFBLEVBQU8sTUFMUDtJQU1BLE1BQUEsRUFBTyxNQU5Q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UUFBZixHQUE2QixPQUFBLENBQVEsWUFBUjs7RUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFmLEdBQTZCLE9BQUEsQ0FBUSxXQUFSOztFQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWYsR0FBNkIsT0FBQSxDQUFRLFdBQVI7O0VBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBZixHQUE2QixPQUFBLENBQVEsVUFBUjs7RUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFmLEdBQTZCLE9BQUEsQ0FBUSxTQUFSOztFQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWYsR0FBNkIsT0FBQSxDQUFRLFNBQVI7O0VBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBZixHQUE2QixPQUFBLENBQVEsUUFBUjs7RUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFmLEdBQTZCLE9BQUEsQ0FBUSxTQUFSOztFQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWYsR0FBNkIsT0FBQSxDQUFRLFVBQVI7O0VBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBZixHQUE2QixPQUFBLENBQVEsZUFBUjs7RUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFmLEdBQTZCLE9BQUEsQ0FBUSxXQUFSOztFQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQWYsR0FBNkIsT0FBQSxDQUFRLFFBQVI7O0VBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBZixHQUE2QixPQUFBLENBQVEsT0FBUjs7RUFDN0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFmLEdBQTZCLE9BQUEsQ0FBUSxPQUFSOztFQUM3QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQWYsR0FBNkIsT0FBQSxDQUFRLE9BQVI7QUFwSzdCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbjAwMCAgMDAwICAgIDAwMCAwMDAgICAwMDAgIDAwMCAgIFxuMDAwMDAwMCAgICAgIDAwMDAwICAgIDAwMDAwMDAgICAgXG4wMDAgIDAwMCAgICAwMDAgMDAwICAgMDAwICAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyMjXG5cbmNoaWxkcCAgPSByZXF1aXJlICdjaGlsZF9wcm9jZXNzJ1xuY3J5cHRvICA9IHJlcXVpcmUgJ2NyeXB0bydcbl8gICAgICAgPSByZXF1aXJlICdsb2Rhc2gnXG5vcyAgICAgID0gcmVxdWlyZSAnb3MnXG5ub29uICAgID0gcmVxdWlyZSAnbm9vbidcbnNkcyAgICAgPSByZXF1aXJlICdzZHMnXG5mcyAgICAgID0gcmVxdWlyZSAnZnMtZXh0cmEnXG5vcGVuICAgID0gcmVxdWlyZSAnb3BlbmVyJyBcbndhbGtkaXIgPSByZXF1aXJlICd3YWxrZGlyJ1xuYXRvbWljICA9IHJlcXVpcmUgJ3dyaXRlLWZpbGUtYXRvbWljJ1xud2F0Y2ggICA9IHJlcXVpcmUgJ2Nob2tpZGFyJ1xucG9zdCAgICA9IHJlcXVpcmUgJy4vcHBvc3QnXG5rYXJnICAgID0gcmVxdWlyZSAna2FyZydcbmNvbG9ycyAgPSByZXF1aXJlICdjb2xvcnMnXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICBcbiAgICBfOl9cbiAgICBvczpvc1xuICAgIGZzOmZzXG4gICAgc2RzOnNkc1xuICAgIGthcmc6a2FyZ1xuICAgIGNvbG9yczpjb2xvcnNcbiAgICBhdG9taWM6YXRvbWljXG4gICAgd2Fsa2Rpcjp3YWxrZGlyXG4gICAgd2F0Y2g6d2F0Y2hcbiAgICBvcGVuOm9wZW5cbiAgICBwb3N0OnBvc3RcbiAgICBub29uOm5vb25cbiAgICBjaGlsZHA6Y2hpbGRwXG4gICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAgICAwMDAwMDAwICAgICAwMDAgICBcblxuICAgIGRlZjogKGMsZCkgLT5cbiAgICAgICAgaWYgYz9cbiAgICAgICAgICAgIF8uZGVmYXVsdHMgXy5jbG9uZShjKSwgZFxuICAgICAgICBlbHNlIGlmIGQ/XG4gICAgICAgICAgICBfLmNsb25lIGRcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAge31cbiAgICBcbiAgICAjIDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAgICAgMDAwICAwMDAgICAgICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwICAgIDAwMCAgMDAwICAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGZpbHRlcjogKG8sIGYpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBfLmlzQXJyYXkgb1xuICAgICAgICAgICAgXy5maWx0ZXIgbywgZlxuICAgICAgICBlbHNlIGlmIF8uaXNPYmplY3Qgb1xuICAgICAgICAgICAgXy5waWNrQnkgbywgZlxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvXG4gICAgICAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgIFxuICAgICMgIDAwMCAwMDAgICAwMDAwMDAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgXG4gICAgIyAgICAgMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMFxuXG4gICAgY2xhbXA6IChyMSwgcjIsIHYpIC0+IFxuICAgICAgICBcbiAgICAgICAgdiA9IHIxIGlmIG5vdCBfLmlzRmluaXRlIHZcbiAgICAgICAgW3MxLCBzMl0gPSBbTWF0aC5taW4ocjEscjIpLCBNYXRoLm1heChyMSxyMildXG4gICAgICAgIHYgPSBzMSBpZiB2IDwgczFcbiAgICAgICAgdiA9IHMyIGlmIHYgPiBzMlxuICAgICAgICB2ID0gcjEgaWYgbm90IF8uaXNGaW5pdGUgdlxuICAgICAgICB2XG5cbiAgICBmYWRlQW5nbGVzOiAoYSwgYiwgZikgLT5cbiAgICAgICAgXG4gICAgICAgIGlmICAgICAgYS1iID4gIDE4MCB0aGVuIGEgLT0gMzYwXG4gICAgICAgIGVsc2UgaWYgYS1iIDwgLTE4MCB0aGVuIGEgKz0gMzYwXG4gICAgICAgICgxLWYpICogYSArIGYgKiBiXG4gICAgXG4gICAgZmFkZTogIChzLGUsdikgLT4gcyooMS12KStlKih2KVxuICAgIGxhc3Q6ICAoYSkgLT4gXy5sYXN0IGFcbiAgICBmaXJzdDogKGEpIC0+IF8uZmlyc3QgYVxuICAgIGVtcHR5OiAoYSkgLT4gbm90IF8uaXNOdW1iZXIoYSkgYW5kIF8uaXNFbXB0eShhKSBvciBhID09ICcnXG4gICAgdmFsaWQ6IChhKSAtPiBfLmlzTnVtYmVyKGEpIG9yIChfLmlzU3RyaW5nKGEpIGFuZCBhICE9ICcnKSBvciBub3QgXy5pc0VtcHR5KGEpXG5cbiAgICBhYnNNYXg6IChhLGIpIC0+IGlmIE1hdGguYWJzKGEpID49IE1hdGguYWJzKGIpIHRoZW4gYSBlbHNlIGJcbiAgICBhYnNNaW46IChhLGIpIC0+IGlmIE1hdGguYWJzKGEpICA8IE1hdGguYWJzKGIpIHRoZW4gYSBlbHNlIGJcbiAgICAgICAgXG4gICAgcmFuZEludDogKHIpIC0+IE1hdGguZmxvb3IgTWF0aC5yYW5kb20oKSAqIHJcbiAgICAgICAgXG4gICAgc2hvcnRDb3VudDogKHYpIC0+XG4gICAgICAgIHYgPSBwYXJzZUludCB2XG4gICAgICAgIHN3aXRjaFxuICAgICAgICAgICAgd2hlbiB2ID4gOTk5OTk5IHRoZW4gXCIje01hdGguZmxvb3Igdi8xMDAwMDAwfU1cIlxuICAgICAgICAgICAgd2hlbiB2ID4gOTk5ICAgIHRoZW4gXCIje01hdGguZmxvb3Igdi8xMDAwfWtcIlxuICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgXCIje3Z9XCJcbiAgICAgICBcbiAgICByYWQyZGVnOiAocikgLT4gMTgwICogciAvIE1hdGguUElcbiAgICBkZWcycmFkOiAoZCkgLT4gTWF0aC5QSSAqIGQgLyAxODBcblxuICAgIHJldmVyc2VkOiAoYSkgLT4gXy5jbG9uZShhKS5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMCAgMDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgICAgICAwMDAgICAgIFxuICAgIFxuICAgIG9zYXNjcmlwdDogKHNjcmlwdCkgLT4gKCBcIi1lIFxcXCIje2wucmVwbGFjZSgvXFxcIi9nLCBcIlxcXFxcXFwiXCIpfVxcXCJcIiBmb3IgbCBpbiBzY3JpcHQuc3BsaXQoXCJcXG5cIikgKS5qb2luKFwiIFwiKVxuXG4jICAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwIFxuIyAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICBcbiMgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMCAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAwMDAwXG4jICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCBcbiAgICBcbmlmIG5vdCBTdHJpbmcucHJvdG90eXBlLnNwbGljZVxuICAgIFN0cmluZy5wcm90b3R5cGUuc3BsaWNlID0gKHN0YXJ0LCBkZWxDb3VudCwgbmV3U3ViU3RyPScnKSAtPlxuICAgICAgICBAc2xpY2UoMCwgc3RhcnQpICsgbmV3U3ViU3RyICsgQHNsaWNlKHN0YXJ0ICsgTWF0aC5hYnMoZGVsQ291bnQpKVxuICAgICAgICBcbmlmIG5vdCBTdHJpbmcucHJvdG90eXBlLnN0cmlwXG4gICAgU3RyaW5nLnByb3RvdHlwZS5zdHJpcCA9IFN0cmluZy5wcm90b3R5cGUudHJpbVxuICAgIFxuaWYgbm90IFN0cmluZy5wcm90b3R5cGUuaGFzaFxuICAgIFN0cmluZy5wcm90b3R5cGUuaGFzaCA9IC0+IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoQC52YWx1ZU9mKCksICd1dGY4JykuZGlnZXN0KCdoZXgnKVxuICAgIFxubW9kdWxlLmV4cG9ydHMuc3RyICAgICAgICAgPSByZXF1aXJlICcuL3N0cidcbm1vZHVsZS5leHBvcnRzLmxvZyAgICAgICAgID0gcmVxdWlyZSAnLi9sb2cnXG5tb2R1bGUuZXhwb3J0cy5lcnJvciAgICAgICA9IHJlcXVpcmUgJy4vZXJyb3InXG5tb2R1bGUuZXhwb3J0cy5wb3MgICAgICAgICA9IHJlcXVpcmUgJy4vcG9zJ1xubW9kdWxlLmV4cG9ydHMuc2xhc2ggICAgICAgPSByZXF1aXJlICcuL3NsYXNoJ1xuXG5tb2R1bGUuZXhwb3J0c1trXSAgICAgICAgICA9IHJlcXVpcmUoJy4vZG9tJylba10gZm9yIGsgaW4gT2JqZWN0LmtleXMgcmVxdWlyZSAnLi9kb20nXG4gICAgXG5tb2R1bGUuZXhwb3J0cy5kcmFnICAgICAgICA9IHJlcXVpcmUgJy4vZHJhZydcbm1vZHVsZS5leHBvcnRzLmVsZW0gICAgICAgID0gcmVxdWlyZSAnLi9lbGVtJ1xubW9kdWxlLmV4cG9ydHMuc3Rhc2ggICAgICAgPSByZXF1aXJlICcuL3N0YXNoJ1xubW9kdWxlLmV4cG9ydHMuc3RvcmUgICAgICAgPSByZXF1aXJlICcuL3N0b3JlJ1xubW9kdWxlLmV4cG9ydHMuc3RhdGUgICAgICAgPSByZXF1aXJlICcuL3N0YXRlJ1xubW9kdWxlLmV4cG9ydHMucHJlZnMgICAgICAgPSByZXF1aXJlICcuL3ByZWZzJ1xubW9kdWxlLmV4cG9ydHMuZmlsZUxpc3QgICAgPSByZXF1aXJlICcuL2ZpbGVMaXN0J1xubW9kdWxlLmV4cG9ydHMua2V5aW5mbyAgICAgPSByZXF1aXJlICcuL2tleWluZm8nXG5tb2R1bGUuZXhwb3J0cy5oaXN0b3J5ICAgICA9IHJlcXVpcmUgJy4vaGlzdG9yeSdcbm1vZHVsZS5leHBvcnRzLnNjaGVtZSAgICAgID0gcmVxdWlyZSAnLi9zY2hlbWUnXG5tb2R1bGUuZXhwb3J0cy5hYm91dCAgICAgICA9IHJlcXVpcmUgJy4vYWJvdXQnXG5tb2R1bGUuZXhwb3J0cy5wb3B1cCAgICAgICA9IHJlcXVpcmUgJy4vcG9wdXAnXG5tb2R1bGUuZXhwb3J0cy5tZW51ICAgICAgICA9IHJlcXVpcmUgJy4vbWVudSdcbm1vZHVsZS5leHBvcnRzLnRpdGxlICAgICAgID0gcmVxdWlyZSAnLi90aXRsZSdcbm1vZHVsZS5leHBvcnRzLm1hdGNociAgICAgID0gcmVxdWlyZSAnLi9tYXRjaHInXG5tb2R1bGUuZXhwb3J0cy5wb3B1cFdpbmRvdyA9IHJlcXVpcmUgJy4vcG9wdXBXaW5kb3cnXG5tb2R1bGUuZXhwb3J0cy50b29sdGlwICAgICA9IHJlcXVpcmUgJy4vdG9vbHRpcCdcbm1vZHVsZS5leHBvcnRzLmFyZ3MgICAgICAgID0gcmVxdWlyZSAnLi9hcmdzJ1xubW9kdWxlLmV4cG9ydHMuYXBwICAgICAgICAgPSByZXF1aXJlICcuL2FwcCdcbm1vZHVsZS5leHBvcnRzLndpbiAgICAgICAgID0gcmVxdWlyZSAnLi93aW4nXG5tb2R1bGUuZXhwb3J0cy51ZHAgICAgICAgICA9IHJlcXVpcmUgJy4vdWRwJ1xuXG4iXX0=
//# sourceURL=../coffee/kxk.coffee