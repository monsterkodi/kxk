(function() {
  /*
  00000000    0000000   000000000  000   000
  000   000  000   000     000     000   000
  00000000   000000000     000     000000000
  000        000   000     000     000   000
  000        000   000     000     000   000
  */
  var dirExists, encodePath, error, escapePath, extName, fileExists, fileName, fs, joinFileLine, joinFilePos, os, path, resolve, samePath, slash, splitExt, splitFileLine, splitFilePos, swapExt, unresolve;

  ({slash, path, error, os, fs} = require('./kxk'));

  fileName = function(p) {
    return slash.base(p);
  };

  extName = function(p) {
    return slash.ext(p);
  };

  splitExt = function(p) {
    return slash.removeExt(p);
  };

  swapExt = function(p, e) {
    return slash.swapExt(p, e);
  };

  unresolve = function(p) {
    return slash.tilde(p);
  };

  resolve = function(p) {
    return slash.resolve(p);
  };

  samePath = function(a, b) {
    return slash.samePath(a, b);
  };

  escapePath = function(p) {
    return slash.escape(p);
  };

  encodePath = function(p) {
    return slash.encode(p);
  };

  splitFilePos = function(p) {
    return slash.splitFilePos(p);
  };

  splitFileLine = function(p) {
    return slash.splitFileLine(p);
  };

  joinFilePos = function(f, p) {
    return slash.joinFilePos(f, p);
  };

  joinFileLine = function(f, l, c) {
    return slash.joinFilePos(f, l, c);
  };

  fileExists = function(p) {
    return slash.fileExists(p);
  };

  dirExists = function(p) {
    return slash.dirExists(p);
  };

  module.exports = {
    fileName: fileName,
    extName: extName,
    samePath: samePath,
    splitExt: splitExt,
    swapExt: swapExt,
    unresolve: unresolve,
    resolve: resolve,
    fileExists: fileExists,
    dirExists: dirExists,
    escapePath: escapePath,
    encodePath: encodePath,
    splitFilePos: splitFilePos,
    joinFilePos: joinFilePos,
    splitFileLine: splitFileLine,
    joinFileLine: joinFileLine
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsianMvcGF0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsRUFBQSxFQUFBLFlBQUEsRUFBQSxXQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUE7O0VBUUEsQ0FBQSxDQUFFLEtBQUYsRUFBUyxJQUFULEVBQWUsS0FBZixFQUFzQixFQUF0QixFQUEwQixFQUExQixDQUFBLEdBQWlDLE9BQUEsQ0FBUSxPQUFSLENBQWpDOztFQUVBLFFBQUEsR0FBYSxRQUFBLENBQUMsQ0FBRCxDQUFBO1dBQVUsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFYO0VBQVY7O0VBQ2IsT0FBQSxHQUFhLFFBQUEsQ0FBQyxDQUFELENBQUE7V0FBVSxLQUFLLENBQUMsR0FBTixDQUFVLENBQVY7RUFBVjs7RUFDYixRQUFBLEdBQWEsUUFBQSxDQUFDLENBQUQsQ0FBQTtXQUFVLEtBQUssQ0FBQyxTQUFOLENBQWdCLENBQWhCO0VBQVY7O0VBQ2IsT0FBQSxHQUFhLFFBQUEsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFBO1dBQVUsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLEVBQWlCLENBQWpCO0VBQVY7O0VBQ2IsU0FBQSxHQUFhLFFBQUEsQ0FBQyxDQUFELENBQUE7V0FBVSxLQUFLLENBQUMsS0FBTixDQUFZLENBQVo7RUFBVjs7RUFDYixPQUFBLEdBQWEsUUFBQSxDQUFDLENBQUQsQ0FBQTtXQUFVLEtBQUssQ0FBQyxPQUFOLENBQWMsQ0FBZDtFQUFWOztFQUNiLFFBQUEsR0FBYSxRQUFBLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBQTtXQUFVLEtBQUssQ0FBQyxRQUFOLENBQWUsQ0FBZixFQUFrQixDQUFsQjtFQUFWOztFQUNiLFVBQUEsR0FBYSxRQUFBLENBQUMsQ0FBRCxDQUFBO1dBQVUsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiO0VBQVY7O0VBQ2IsVUFBQSxHQUFhLFFBQUEsQ0FBQyxDQUFELENBQUE7V0FBVSxLQUFLLENBQUMsTUFBTixDQUFhLENBQWI7RUFBVjs7RUFFYixZQUFBLEdBQWdCLFFBQUEsQ0FBQyxDQUFELENBQUE7V0FBYSxLQUFLLENBQUMsWUFBTixDQUFvQixDQUFwQjtFQUFiOztFQUNoQixhQUFBLEdBQWdCLFFBQUEsQ0FBQyxDQUFELENBQUE7V0FBYSxLQUFLLENBQUMsYUFBTixDQUFvQixDQUFwQjtFQUFiOztFQUNoQixXQUFBLEdBQWdCLFFBQUEsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFBO1dBQWEsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckI7RUFBYjs7RUFDaEIsWUFBQSxHQUFnQixRQUFBLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQUE7V0FBYSxLQUFLLENBQUMsV0FBTixDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QjtFQUFiOztFQUVoQixVQUFBLEdBQWEsUUFBQSxDQUFDLENBQUQsQ0FBQTtXQUFPLEtBQUssQ0FBQyxVQUFOLENBQWlCLENBQWpCO0VBQVA7O0VBQ2IsU0FBQSxHQUFhLFFBQUEsQ0FBQyxDQUFELENBQUE7V0FBTyxLQUFLLENBQUMsU0FBTixDQUFnQixDQUFoQjtFQUFQOztFQUViLE1BQU0sQ0FBQyxPQUFQLEdBRUk7SUFBQSxRQUFBLEVBQWUsUUFBZjtJQUNBLE9BQUEsRUFBZSxPQURmO0lBRUEsUUFBQSxFQUFlLFFBRmY7SUFHQSxRQUFBLEVBQWUsUUFIZjtJQUlBLE9BQUEsRUFBZSxPQUpmO0lBS0EsU0FBQSxFQUFlLFNBTGY7SUFNQSxPQUFBLEVBQWUsT0FOZjtJQU9BLFVBQUEsRUFBZSxVQVBmO0lBUUEsU0FBQSxFQUFlLFNBUmY7SUFTQSxVQUFBLEVBQWUsVUFUZjtJQVVBLFVBQUEsRUFBZSxVQVZmO0lBV0EsWUFBQSxFQUFlLFlBWGY7SUFZQSxXQUFBLEVBQWUsV0FaZjtJQWFBLGFBQUEsRUFBZSxhQWJmO0lBY0EsWUFBQSxFQUFlO0VBZGY7QUE5QkoiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcclxuMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwXHJcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMFxyXG4wMDAwMDAwMCAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwMDBcclxuMDAwICAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwXHJcbjAwMCAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMFxyXG4jIyNcclxuXHJcbnsgc2xhc2gsIHBhdGgsIGVycm9yLCBvcywgZnMgfSA9IHJlcXVpcmUgJy4va3hrJ1xyXG5cclxuZmlsZU5hbWUgICA9IChwKSAgICAtPiBzbGFzaC5iYXNlIHBcclxuZXh0TmFtZSAgICA9IChwKSAgICAtPiBzbGFzaC5leHQgcFxyXG5zcGxpdEV4dCAgID0gKHApICAgIC0+IHNsYXNoLnJlbW92ZUV4dCBwXHJcbnN3YXBFeHQgICAgPSAocCwgZSkgLT4gc2xhc2guc3dhcEV4dCBwLCBlXHJcbnVucmVzb2x2ZSAgPSAocCkgICAgLT4gc2xhc2gudGlsZGUgcFxyXG5yZXNvbHZlICAgID0gKHApICAgIC0+IHNsYXNoLnJlc29sdmUgcFxyXG5zYW1lUGF0aCAgID0gKGEsIGIpIC0+IHNsYXNoLnNhbWVQYXRoIGEsIGJcclxuZXNjYXBlUGF0aCA9IChwKSAgICAtPiBzbGFzaC5lc2NhcGUgcFxyXG5lbmNvZGVQYXRoID0gKHApICAgIC0+IHNsYXNoLmVuY29kZSBwXHJcblxyXG5zcGxpdEZpbGVQb3MgID0gKHApICAgICAgIC0+IHNsYXNoLnNwbGl0RmlsZVBvcyAgcFxyXG5zcGxpdEZpbGVMaW5lID0gKHApICAgICAgIC0+IHNsYXNoLnNwbGl0RmlsZUxpbmUgcFxyXG5qb2luRmlsZVBvcyAgID0gKGYsIHApICAgIC0+IHNsYXNoLmpvaW5GaWxlUG9zIGYsIHBcclxuam9pbkZpbGVMaW5lICA9IChmLCBsLCBjKSAtPiBzbGFzaC5qb2luRmlsZVBvcyBmLCBsLCBjXHJcblxyXG5maWxlRXhpc3RzID0gKHApIC0+IHNsYXNoLmZpbGVFeGlzdHMgcFxyXG5kaXJFeGlzdHMgID0gKHApIC0+IHNsYXNoLmRpckV4aXN0cyBwXHJcbiAgICBcclxubW9kdWxlLmV4cG9ydHMgPSBcclxuICAgIFxyXG4gICAgZmlsZU5hbWUgICAgIDogZmlsZU5hbWVcclxuICAgIGV4dE5hbWUgICAgICA6IGV4dE5hbWVcclxuICAgIHNhbWVQYXRoICAgICA6IHNhbWVQYXRoXHJcbiAgICBzcGxpdEV4dCAgICAgOiBzcGxpdEV4dFxyXG4gICAgc3dhcEV4dCAgICAgIDogc3dhcEV4dFxyXG4gICAgdW5yZXNvbHZlICAgIDogdW5yZXNvbHZlXHJcbiAgICByZXNvbHZlICAgICAgOiByZXNvbHZlXHJcbiAgICBmaWxlRXhpc3RzICAgOiBmaWxlRXhpc3RzXHJcbiAgICBkaXJFeGlzdHMgICAgOiBkaXJFeGlzdHNcclxuICAgIGVzY2FwZVBhdGggICA6IGVzY2FwZVBhdGhcclxuICAgIGVuY29kZVBhdGggICA6IGVuY29kZVBhdGhcclxuICAgIHNwbGl0RmlsZVBvcyA6IHNwbGl0RmlsZVBvc1xyXG4gICAgam9pbkZpbGVQb3MgIDogam9pbkZpbGVQb3NcclxuICAgIHNwbGl0RmlsZUxpbmU6IHNwbGl0RmlsZUxpbmVcclxuICAgIGpvaW5GaWxlTGluZSA6IGpvaW5GaWxlTGluZVxyXG4gICAgXHJcbiAgICBcclxuIl19
//# sourceURL=C:/Users/t.kohnhorst/s/kxk/coffee/path.coffee