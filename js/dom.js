// Generated by CoffeeScript 1.12.7

/*
0000000     0000000   00     00
000   000  000   000  000   000
000   000  000   000  000000000
000   000  000   000  000 0 000
0000000     0000000   000   000
 */

(function() {
  var _;

  _ = require('lodash');

  module.exports = {
    $: function(idOrQueryOrElement, queryOrElement) {
      var ref;
      if (queryOrElement == null) {
        queryOrElement = document;
      }
      if (_.isString(idOrQueryOrElement)) {
        if (((ref = idOrQueryOrElement[0]) === '.' || ref === "#") || queryOrElement !== document) {
          return queryOrElement.querySelector(idOrQueryOrElement);
        } else {
          return document.getElementById(idOrQueryOrElement);
        }
      } else if (_.isElement(idOrQueryOrElement) && _.isString(queryOrElement)) {
        return idOrQueryOrElement.querySelector(queryOrElement);
      } else {
        return idOrQueryOrElement;
      }
    },
    childIndex: function(e) {
      return Array.prototype.indexOf.call(e.parentNode.childNodes, e);
    },
    sw: function() {
      return document.body.clientWidth;
    },
    sh: function() {
      return document.body.clientHeight;
    },
    stopEvent: function(event) {
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
        if (typeof event.stopPropagation === "function") {
          event.stopPropagation();
        }
      }
      return event;
    },
    style: function(selector, rule) {
      var i, j, r, ref;
      for (i = j = 0, ref = document.styleSheets[0].cssRules.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        r = document.styleSheets[0].cssRules[i];
        if ((r != null ? r.selectorText : void 0) === selector) {
          document.styleSheets[0].deleteRule(i);
        }
      }
      document.styleSheets[0].insertRule(selector + " { " + rule + " }", document.styleSheets[0].cssRules.length);
    },
    setStyle: function(selector, key, value, ssid) {
      var j, len, ref, rule;
      if (ssid == null) {
        ssid = 0;
      }
      ref = document.styleSheets[ssid].cssRules;
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        if (rule.selectorText === selector) {
          rule.style[key] = value;
          return;
        }
      }
      document.styleSheets[ssid].insertRule(selector + " { " + key + ": " + value + " }", document.styleSheets[ssid].cssRules.length);
    },
    getStyle: function(selector, key, value, ssid) {
      var j, len, ref, ref1, rule;
      if (ssid == null) {
        ssid = 0;
      }
      ref = document.styleSheets[ssid].cssRules;
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        if (rule.selectorText === selector) {
          if ((ref1 = rule.style[key]) != null ? ref1.length : void 0) {
            return rule.style[key];
          }
        }
      }
      return value;
    }
  };

}).call(this);
