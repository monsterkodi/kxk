// koffee 1.6.0

/*
 0000000    0000000   00     00  00000000  00000000    0000000   0000000  
000        000   000  000   000  000       000   000  000   000  000   000
000  0000  000000000  000000000  0000000   00000000   000000000  000   000
000   000  000   000  000 0 000  000       000        000   000  000   000
 0000000   000   000  000   000  00000000  000        000   000  0000000
 */
var Gamepad, events,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

events = require('events');

Gamepad = (function(superClass) {
    extend(Gamepad, superClass);

    function Gamepad(doPoll) {
        if (doPoll == null) {
            doPoll = true;
        }
        this.poll = bind(this.poll, this);
        this.btns = ['A', 'B', 'X', 'Y', 'LB', 'RB', 'LT', 'RT', 'Back', 'Start', 'LS', 'RS', 'Up', 'Down', 'Left', 'Right', 'Menu'];
        this.state = {
            buttons: {},
            left: {
                x: 0,
                y: 0
            },
            right: {
                x: 0,
                y: 0
            }
        };
        this.deadZone = 0.1;
        this.continuous = false;
        if (doPoll && 'function' === typeof (typeof navigator !== "undefined" && navigator !== null ? navigator.getGamepads : void 0)) {
            this.init();
        }
    }

    Gamepad.prototype.init = function() {
        return window.addEventListener('gamepadconnected', (function(_this) {
            return function(event) {
                if (event.gamepad.index === 0 && event.gamepad.axes.length >= 4) {
                    return window.requestAnimationFrame(_this.poll);
                }
            };
        })(this));
    };

    Gamepad.prototype.axisValue = function(value) {
        if (Math.abs(value) < this.deadZone) {
            return 0;
        }
        return value;
    };

    Gamepad.prototype.getState = function() {
        var button, i, index, pad, ref, state, x, y;
        if (pad = typeof navigator.getGamepads === "function" ? navigator.getGamepads()[0] : void 0) {
            state = {
                buttons: {}
            };
            for (index = i = 0, ref = pad.buttons.length; 0 <= ref ? i < ref : i > ref; index = 0 <= ref ? ++i : --i) {
                button = pad.buttons[index];
                if (button.pressed) {
                    state.buttons[this.btns[index]] = button.value;
                }
            }
            x = this.axisValue(pad.axes[0]);
            y = this.axisValue(-pad.axes[1]);
            state.left = {
                x: x,
                y: y
            };
            x = this.axisValue(pad.axes[2]);
            y = this.axisValue(-pad.axes[3]);
            state.right = {
                x: x,
                y: y
            };
            return state;
        }
    };

    Gamepad.prototype.poll = function() {
        var button, changed, i, index, pad, ref, state, x, y;
        if (pad = typeof navigator.getGamepads === "function" ? navigator.getGamepads()[0] : void 0) {
            state = {};
            changed = false;
            for (index = i = 0, ref = pad.buttons.length; 0 <= ref ? i < ref : i > ref; index = 0 <= ref ? ++i : --i) {
                button = pad.buttons[index];
                if (button.pressed) {
                    state[this.btns[index]] = button.value;
                    if (!this.state.buttons[this.btns[index]]) {
                        this.emit('button', this.btns[index], 1);
                        changed = true;
                    }
                } else if (this.state.buttons[this.btns[index]]) {
                    this.emit('button', this.btns[index], 0);
                    changed = true;
                }
            }
            this.state.buttons = state;
            if (changed) {
                this.emit('buttons', this.state.buttons);
            }
            changed = false;
            x = this.axisValue(pad.axes[0]);
            y = this.axisValue(-pad.axes[1]);
            if (x !== this.state.left.x || y !== this.state.left.y) {
                this.state.left = {
                    x: x,
                    y: y
                };
                changed = true;
            }
            x = this.axisValue(pad.axes[2]);
            y = this.axisValue(-pad.axes[3]);
            if (x !== this.state.right.x || y !== this.state.right.y) {
                this.state.right = {
                    x: x,
                    y: y
                };
                changed = true;
            }
            if (changed || this.continuous) {
                this.emit('axis', this.state);
            }
            return window.requestAnimationFrame(this.poll);
        }
    };

    return Gamepad;

})(events);

module.exports = Gamepad;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZXBhZC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsZUFBQTtJQUFBOzs7O0FBUUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztBQUVIOzs7SUFFQyxpQkFBQyxNQUFEOztZQUFDLFNBQU87OztRQUVQLElBQUMsQ0FBQSxJQUFELEdBQVEsQ0FBQyxHQUFELEVBQUksR0FBSixFQUFPLEdBQVAsRUFBVSxHQUFWLEVBQWEsSUFBYixFQUFpQixJQUFqQixFQUFxQixJQUFyQixFQUF5QixJQUF6QixFQUE2QixNQUE3QixFQUFtQyxPQUFuQyxFQUEwQyxJQUExQyxFQUE4QyxJQUE5QyxFQUFrRCxJQUFsRCxFQUFzRCxNQUF0RCxFQUE0RCxNQUE1RCxFQUFrRSxPQUFsRSxFQUF5RSxNQUF6RTtRQUNSLElBQUMsQ0FBQSxLQUFELEdBQVM7WUFBQSxPQUFBLEVBQVEsRUFBUjtZQUFZLElBQUEsRUFBSztnQkFBQyxDQUFBLEVBQUUsQ0FBSDtnQkFBSyxDQUFBLEVBQUUsQ0FBUDthQUFqQjtZQUE0QixLQUFBLEVBQU07Z0JBQUMsQ0FBQSxFQUFFLENBQUg7Z0JBQUssQ0FBQSxFQUFFLENBQVA7YUFBbEM7O1FBQ1QsSUFBQyxDQUFBLFFBQUQsR0FBWTtRQUNaLElBQUMsQ0FBQSxVQUFELEdBQWM7UUFFZCxJQUFHLE1BQUEsSUFBVyxVQUFBLEtBQWMsaUVBQU8sU0FBUyxDQUFFLHFCQUE5QztZQUNJLElBQUMsQ0FBQSxJQUFELENBQUEsRUFESjs7SUFQRDs7c0JBZ0JILElBQUEsR0FBTSxTQUFBO2VBRUYsTUFBTSxDQUFDLGdCQUFQLENBQXdCLGtCQUF4QixFQUEyQyxDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLEtBQUQ7Z0JBQ3ZDLElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFkLEtBQXVCLENBQXZCLElBQTZCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFD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ckI7WUFDSixDQUFBLEdBQUksSUFBQyxDQUFBLFNBQUQsQ0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUFyQjtZQUNKLElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQWpCLElBQXNCLENBQUEsS0FBSyxJQUFDLENBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUExQztnQkFDSSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsR0FBYztvQkFBQSxDQUFBLEVBQUUsQ0FBRjtvQkFBSyxDQUFBLEVBQUUsQ0FBUDs7Z0JBQ2QsT0FBQSxHQUFVLEtBRmQ7O1lBSUEsQ0FBQSxHQUFJLElBQUMsQ0FBQSxTQUFELENBQVksR0FBRyxDQUFDLElBQUssQ0FBQSxDQUFBLENBQXJCO1lBQ0osQ0FBQSxHQUFJLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBckI7WUFDSixJQUFHLENBQUEsS0FBSyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFsQixJQUF1QixDQUFBLEtBQUssSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBNUM7Z0JBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWU7b0JBQUEsQ0FBQSxFQUFFLENBQUY7b0JBQUssQ0FBQSxFQUFFLENBQVA7O2dCQUNmLE9BQUEsR0FBVSxLQUZkOztZQUlBLElBQUcsT0FBQSxJQUFXLElBQUMsQ0FBQSxVQUFmO2dCQUNJLElBQUMsQ0FBQSxJQUFELENBQU0sTUFBTixFQUFhLElBQUMsQ0FBQSxLQUFkLEVBREo7O21CQUdBLE1BQU0sQ0FBQyxxQkFBUCxDQUE2QixJQUFDLENBQUEsSUFBOUIsRUFyQ0o7O0lBRkU7Ozs7R0F2RFk7O0FBZ0d0QixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICBcbjAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4wMDAgIDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG4jIyNcblxuZXZlbnRzID0gcmVxdWlyZSAnZXZlbnRzJ1xuXG5jbGFzcyBHYW1lcGFkIGV4dGVuZHMgZXZlbnRzXG5cbiAgICBAOiAoZG9Qb2xsPXRydWUpIC0+IFxuICAgIFxuICAgICAgICBAYnRucyA9IFsnQScnQicnWCcnWScnTEInJ1JCJydMVCcnUlQnJ0JhY2snJ1N0YXJ0JydMUycnUlMnJ1VwJydEb3duJydMZWZ0JydSaWdodCcnTWVudSddXG4gICAgICAgIEBzdGF0ZSA9IGJ1dHRvbnM6e30sIGxlZnQ6e3g6MCx5OjB9LCByaWdodDp7eDowLHk6MH1cbiAgICAgICAgQGRlYWRab25lID0gMC4xXG4gICAgICAgIEBjb250aW51b3VzID0gZmFsc2VcblxuICAgICAgICBpZiBkb1BvbGwgYW5kICdmdW5jdGlvbicgPT0gdHlwZW9mIG5hdmlnYXRvcj8uZ2V0R2FtZXBhZHNcbiAgICAgICAgICAgIEBpbml0KClcbiAgICAgICAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMCAgMDAwIDAgMDAwICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICBcbiAgICBcbiAgICBpbml0OiAtPlxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdnYW1lcGFkY29ubmVjdGVkJyAoZXZlbnQpID0+XG4gICAgICAgICAgICBpZiBldmVudC5nYW1lcGFkLmluZGV4ID09IDAgYW5kIGV2ZW50LmdhbWVwYWQuYXhlcy5sZW5ndGggPj0gNFxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQHBvbGxcbiAgICAgICAgXG4gICAgIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMCAgXG4gICAgXG4gICAgYXhpc1ZhbHVlOiAodmFsdWUpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBNYXRoLmFicyh2YWx1ZSkgPCBAZGVhZFpvbmUgdGhlbiByZXR1cm4gMFxuICAgICAgICB2YWx1ZVxuICAgXG4gICAgZ2V0U3RhdGU6IC0+XG4gICAgICAgIFxuICAgICAgICBpZiBwYWQgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHM/KClbMF1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3RhdGUgPSBidXR0b25zOiB7fVxuICAgICAgICAgICAgZm9yIGluZGV4IGluIFswLi4ucGFkLmJ1dHRvbnMubGVuZ3RoXVxuICAgICAgICAgICAgICAgIGJ1dHRvbiA9IHBhZC5idXR0b25zW2luZGV4XVxuICAgICAgICAgICAgICAgIGlmIGJ1dHRvbi5wcmVzc2VkXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmJ1dHRvbnNbQGJ0bnNbaW5kZXhdXSA9IGJ1dHRvbi52YWx1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB4ID0gQGF4aXNWYWx1ZSAgcGFkLmF4ZXNbMF1cbiAgICAgICAgICAgIHkgPSBAYXhpc1ZhbHVlIC1wYWQuYXhlc1sxXVxuICAgICAgICAgICAgc3RhdGUubGVmdCA9IHg6eCwgeTp5IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgeCA9IEBheGlzVmFsdWUgIHBhZC5heGVzWzJdXG4gICAgICAgICAgICB5ID0gQGF4aXNWYWx1ZSAtcGFkLmF4ZXNbM11cbiAgICAgICAgICAgIHN0YXRlLnJpZ2h0ID0geDp4LCB5OnkgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxuICAgICAgICBcbiAgICBwb2xsOiA9PlxuICAgICAgICAgICAgXG4gICAgICAgIGlmIHBhZCA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcz8oKVswXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzdGF0ZSA9IHt9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICAgICAgZm9yIGluZGV4IGluIFswLi4ucGFkLmJ1dHRvbnMubGVuZ3RoXVxuICAgICAgICAgICAgICAgIGJ1dHRvbiA9IHBhZC5idXR0b25zW2luZGV4XVxuICAgICAgICAgICAgICAgIGlmIGJ1dHRvbi5wcmVzc2VkXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlW0BidG5zW2luZGV4XV0gPSBidXR0b24udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgbm90IEBzdGF0ZS5idXR0b25zW0BidG5zW2luZGV4XV1cbiAgICAgICAgICAgICAgICAgICAgICAgIEBlbWl0ICdidXR0b24nIEBidG5zW2luZGV4XSwgMVxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgICAgICBlbHNlIGlmIEBzdGF0ZS5idXR0b25zW0BidG5zW2luZGV4XV1cbiAgICAgICAgICAgICAgICAgICAgQGVtaXQgJ2J1dHRvbicgQGJ0bnNbaW5kZXhdLCAwXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQHN0YXRlLmJ1dHRvbnMgPSBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIGNoYW5nZWQgXG4gICAgICAgICAgICAgICAgQGVtaXQgJ2J1dHRvbnMnIEBzdGF0ZS5idXR0b25zXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNoYW5nZWQgPSBmYWxzZSBcbiAgICAgICAgICAgIHggPSBAYXhpc1ZhbHVlICBwYWQuYXhlc1swXVxuICAgICAgICAgICAgeSA9IEBheGlzVmFsdWUgLXBhZC5heGVzWzFdXG4gICAgICAgICAgICBpZiB4ICE9IEBzdGF0ZS5sZWZ0Lnggb3IgeSAhPSBAc3RhdGUubGVmdC55XG4gICAgICAgICAgICAgICAgQHN0YXRlLmxlZnQgPSB4OngsIHk6eSBcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgeCA9IEBheGlzVmFsdWUgIHBhZC5heGVzWzJdXG4gICAgICAgICAgICB5ID0gQGF4aXNWYWx1ZSAtcGFkLmF4ZXNbM11cbiAgICAgICAgICAgIGlmIHggIT0gQHN0YXRlLnJpZ2h0Lnggb3IgeSAhPSBAc3RhdGUucmlnaHQueVxuICAgICAgICAgICAgICAgIEBzdGF0ZS5yaWdodCA9IHg6eCwgeTp5IFxuICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBjaGFuZ2VkIG9yIEBjb250aW51b3VzXG4gICAgICAgICAgICAgICAgQGVtaXQgJ2F4aXMnIEBzdGF0ZVxuXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIEBwb2xsXG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZXBhZFxuIl19
//# sourceURL=../coffee/gamepad.coffee