// koffee 1.4.0

/*
 0000000    0000000   00     00  00000000  00000000    0000000   0000000  
000        000   000  000   000  000       000   000  000   000  000   000
000  0000  000000000  000000000  0000000   00000000   000000000  000   000
000   000  000   000  000 0 000  000       000        000   000  000   000
 0000000   000   000  000   000  00000000  000        000   000  0000000
 */
var Gamepad, events,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

events = require('events');

Gamepad = (function(superClass) {
    extend(Gamepad, superClass);

    function Gamepad() {
        this.poll = bind(this.poll, this);
        this.btns = ['A', 'B', 'X', 'Y', 'LB', 'RB', 'LT', 'RT', 'Back', 'Start', 'LS', 'RS', 'Up', 'Down', 'Left', 'Right', 'Menu'];
        this.state = {
            buttons: {},
            left: {
                x: 0,
                y: 0
            },
            right: {
                x: 0,
                y: 0
            }
        };
        if ('function' === typeof (typeof navigator !== "undefined" && navigator !== null ? navigator.getGamepads : void 0)) {
            this.init();
        }
    }

    Gamepad.prototype.init = function() {
        return window.addEventListener('gamepadconnected', (function(_this) {
            return function(event) {
                if (event.gamepad.index === 0 && event.gamepad.axes.length >= 4) {
                    return window.requestAnimationFrame(_this.poll);
                }
            };
        })(this));
    };

    Gamepad.prototype.axisValue = function(value) {
        if (Math.abs(value) < 0.0001) {
            return 0;
        }
        return value;
    };

    Gamepad.prototype.poll = function() {
        var button, changed, i, index, pad, ref, state, x, y;
        if (pad = typeof navigator.getGamepads === "function" ? navigator.getGamepads()[0] : void 0) {
            state = {};
            changed = false;
            for (index = i = 0, ref = pad.buttons.length; 0 <= ref ? i < ref : i > ref; index = 0 <= ref ? ++i : --i) {
                button = pad.buttons[index];
                if (button.pressed) {
                    state[this.btns[index]] = button.value;
                    if (!this.state.buttons[this.btns[index]]) {
                        this.emit('button', this.btns[index], 1);
                        changed = true;
                    }
                } else if (this.state.buttons[this.btns[index]]) {
                    this.emit('button', this.btns[index], 0);
                    changed = true;
                }
            }
            this.state.buttons = state;
            if (changed) {
                this.emit('buttons', this.state.buttons);
            }
            changed = false;
            x = this.axisValue(pad.axes[0]);
            y = this.axisValue(-pad.axes[1]);
            if (x !== this.state.left.x || y !== this.state.left.y) {
                this.state.left = {
                    x: x,
                    y: y
                };
                changed = true;
            }
            x = this.axisValue(pad.axes[2]);
            y = this.axisValue(-pad.axes[3]);
            if (x !== this.state.right.x || y !== this.state.right.y) {
                this.state.right = {
                    x: x,
                    y: y
                };
                changed = true;
            }
            if (changed) {
                this.emit('axis', this.state);
            }
            return window.requestAnimationFrame(this.poll);
        }
    };

    return Gamepad;

})(events);

module.exports = new Gamepad;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZXBhZC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsZUFBQTtJQUFBOzs7O0FBUUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSOztBQUVIOzs7SUFFQyxpQkFBQTs7UUFFQyxJQUFDLENBQUEsSUFBRCxHQUFRLENBQUMsR0FBRCxFQUFJLEdBQUosRUFBTyxHQUFQLEVBQVUsR0FBVixFQUFhLElBQWIsRUFBaUIsSUFBakIsRUFBcUIsSUFBckIsRUFBeUIsSUFBekIsRUFBNkIsTUFBN0IsRUFBbUMsT0FBbkMsRUFBMEMsSUFBMUMsRUFBOEMsSUFBOUMsRUFBa0QsSUFBbEQsRUFBc0QsTUFBdEQsRUFBNEQsTUFBNUQsRUFBa0UsT0FBbEUsRUFBeUUsTUFBekU7UUFDUixJQUFDLENBQUEsS0FBRCxHQUFTO1lBQUEsT0FBQSxFQUFRLEVBQVI7WUFBWSxJQUFBLEVBQUs7Z0JBQUMsQ0FBQSxFQUFFLENBQUg7Z0JBQUssQ0FBQSxFQUFFLENBQVA7YUFBakI7WUFBNEIsS0FBQSxFQUFNO2dCQUFDLENBQUEsRUFBRSxDQUFIO2dCQUFLLENBQUEsRUFBRSxDQUFQO2FBQWxDOztRQUVULElBQUcsVUFBQSxLQUFjLGlFQUFPLFNBQVMsQ0FBRSxxQkFBbkM7WUFDSSxJQUFDLENBQUEsSUFBRCxDQUFBLEVBREo7O0lBTEQ7O3NCQWNILElBQUEsR0FBTSxTQUFBO2VBRUYsTUFBTSxDQUFDLGdCQUFQLENBQXdCLGtCQUF4QixFQUEyQyxDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLEtBQUQ7Z0JBQ3ZDLElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFkLEtBQXVCLENBQXZCLElBQTZCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQW5CLElBQTZCLENBQTdEOzJCQUNJLE1BQU0sQ0FBQyxxQkFBUCxDQUE2QixLQUFDLENBQUEsSUFBOUIsRUFESjs7WUFEdUM7UUFB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OlsiIyMjXG4gMDAwMDAwMCAgICAwMDAwMDAwICAgMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIFxuMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMCAgMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwICBcbiMjI1xuXG5ldmVudHMgPSByZXF1aXJlICdldmVudHMnXG5cbmNsYXNzIEdhbWVwYWQgZXh0ZW5kcyBldmVudHNcblxuICAgIEA6IC0+IFxuICAgIFxuICAgICAgICBAYnRucyA9IFsnQScnQicnWCcnWScnTEInJ1JCJydMVCcnUlQnJ0JhY2snJ1N0YXJ0JydMUycnUlMnJ1VwJydEb3duJydMZWZ0JydSaWdodCcnTWVudSddXG4gICAgICAgIEBzdGF0ZSA9IGJ1dHRvbnM6e30sIGxlZnQ6e3g6MCx5OjB9LCByaWdodDp7eDowLHk6MH1cblxuICAgICAgICBpZiAnZnVuY3Rpb24nID09IHR5cGVvZiBuYXZpZ2F0b3I/LmdldEdhbWVwYWRzXG4gICAgICAgICAgICBAaW5pdCgpXG4gICAgICAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgXG4gICAgXG4gICAgaW5pdDogLT5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAnZ2FtZXBhZGNvbm5lY3RlZCcgKGV2ZW50KSA9PlxyXG4gICAgICAgICAgICBpZiBldmVudC5nYW1lcGFkLmluZGV4ID09IDAgYW5kIGV2ZW50LmdhbWVwYWQuYXhlcy5sZW5ndGggPj0gNFxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQHBvbGxcbiAgICAgICAgXG4gICAgIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4gICAgIyAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMCAgXG4gICAgXG4gICAgYXhpc1ZhbHVlOiAodmFsdWUpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBNYXRoLmFicyh2YWx1ZSkgPCAwLjAwMDEgdGhlbiByZXR1cm4gMFxuICAgICAgICB2YWx1ZVxuICAgIFxuICAgIHBvbGw6ID0+XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgcGFkID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzPygpWzBdXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN0YXRlID0ge31cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICAgICBmb3IgaW5kZXggaW4gWzAuLi5wYWQuYnV0dG9ucy5sZW5ndGhdXG4gICAgICAgICAgICAgICAgYnV0dG9uID0gcGFkLmJ1dHRvbnNbaW5kZXhdXG4gICAgICAgICAgICAgICAgaWYgYnV0dG9uLnByZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVbQGJ0bnNbaW5kZXhdXSA9IGJ1dHRvbi52YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgQHN0YXRlLmJ1dHRvbnNbQGJ0bnNbaW5kZXhdXVxuICAgICAgICAgICAgICAgICAgICAgICAgQGVtaXQgJ2J1dHRvbicgQGJ0bnNbaW5kZXhdLCAxXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgQHN0YXRlLmJ1dHRvbnNbQGJ0bnNbaW5kZXhdXVxuICAgICAgICAgICAgICAgICAgICBAZW1pdCAnYnV0dG9uJyBAYnRuc1tpbmRleF0sIDBcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBAc3RhdGUuYnV0dG9ucyA9IHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgY2hhbmdlZCBcbiAgICAgICAgICAgICAgICBAZW1pdCAnYnV0dG9ucycgQHN0YXRlLmJ1dHRvbnNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hhbmdlZCA9IGZhbHNlIFxuICAgICAgICAgICAgeCA9IEBheGlzVmFsdWUgIHBhZC5heGVzWzBdXG4gICAgICAgICAgICB5ID0gQGF4aXNWYWx1ZSAtcGFkLmF4ZXNbMV1cbiAgICAgICAgICAgIGlmIHggIT0gQHN0YXRlLmxlZnQueCBvciB5ICE9IEBzdGF0ZS5sZWZ0LnlcbiAgICAgICAgICAgICAgICBAc3RhdGUubGVmdCA9IHg6eCwgeTp5IFxuICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB4ID0gQGF4aXNWYWx1ZSAgcGFkLmF4ZXNbMl1cbiAgICAgICAgICAgIHkgPSBAYXhpc1ZhbHVlIC1wYWQuYXhlc1szXVxuICAgICAgICAgICAgaWYgeCAhPSBAc3RhdGUucmlnaHQueCBvciB5ICE9IEBzdGF0ZS5yaWdodC55XG4gICAgICAgICAgICAgICAgQHN0YXRlLnJpZ2h0ID0geDp4LCB5OnkgXG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIGNoYW5nZWRcbiAgICAgICAgICAgICAgICBAZW1pdCAnYXhpcycgQHN0YXRlXG5cbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQHBvbGxcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgR2FtZXBhZFxuIl19
//# sourceURL=../coffee/gamepad.coffee