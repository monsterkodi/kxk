(function() {
  /*
  00000000   00000000   00000000  00000000   0000000
  000   000  000   000  000       000       000     
  00000000   0000000    0000000   000000    0000000 
  000        000   000  000       000            000
  000        000   000  00000000  000       0000000 
  */
  var Prefs, error, log, store, watch;

  ({store, watch, error, log} = require('./kxk'));

  Prefs = (function() {
    class Prefs {
      static init(defs = {}) {
        if (this.store != null) {
          return error('prefs.init -- duplicate stores?');
        }
        this.store = new store('prefs', {
          defaults: defs
        });
        this.store.on('willSave', this.unwatch);
        this.store.on('didSave', this.watch);
        return this.watch();
      }

      static unwatch() {
        var ref;
        if (Prefs.store.app == null) {
          return;
        }
        if ((ref = Prefs.watcher) != null) {
          ref.close();
        }
        return Prefs.watcher = null;
      }

      static watch() {
        if (Prefs.store.app == null) {
          return;
        }
        Prefs.unwatch();
        Prefs.watcher = watch.watch(Prefs.store.file, {
          ignoreInitial: true,
          usePolling: false,
          useFsEvents: true
        });
        return Prefs.watcher.on('change', Prefs.onFileChange).on('unlink', Prefs.onFileUnlink).on('error', function(err) {
          return log('Prefs watch error', err);
        });
      }

      static onFileChange() {
        return Prefs.store.reload();
      }

      static onFileUnlink() {
        Prefs.unwatch();
        return Prefs.store.clear();
      }

      static get(key, value) {
        if (this.store) {
          return this.store.get(key, value);
        } else {
          return value;
        }
      }

      static set(key, value) {
        this.unwatch();
        this.store.set(key, value);
        return this.watch();
      }

      static del(key, value) {
        this.unwatch();
        this.store.del(key);
        return this.watch();
      }

      static save() {
        var ref;
        return (ref = this.store) != null ? ref.save() : void 0;
      }

    };

    Prefs.store = null;

    Prefs.watcher = null;

    return Prefs;

  }).call(this);

  module.exports = Prefs;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZnMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiLi4vY29mZmVlL3ByZWZzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUE7O0VBUUEsQ0FBQSxDQUFFLEtBQUYsRUFBUyxLQUFULEVBQWdCLEtBQWhCLEVBQXVCLEdBQXZCLENBQUEsR0FBK0IsT0FBQSxDQUFRLE9BQVIsQ0FBL0I7O0VBRU07SUFBTixNQUFBLE1BQUE7TUFLVyxPQUFOLElBQU0sQ0FBQyxPQUFLLENBQUEsQ0FBTixDQUFBO1FBRUgsSUFBa0Qsa0JBQWxEO0FBQUEsaUJBQU8sS0FBQSxDQUFNLGlDQUFOLEVBQVA7O1FBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLEtBQUosQ0FBVSxPQUFWLEVBQW1CO1VBQUEsUUFBQSxFQUFTO1FBQVQsQ0FBbkI7UUFDVCxJQUFDLENBQUEsS0FBSyxDQUFDLEVBQVAsQ0FBVSxVQUFWLEVBQXNCLElBQUMsQ0FBQSxPQUF2QjtRQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsRUFBUCxDQUFVLFNBQVYsRUFBc0IsSUFBQyxDQUFBLEtBQXZCO2VBQ0EsSUFBQyxDQUFBLEtBQUQsQ0FBQTtNQU5HOztNQVFHLE9BQVQsT0FBUyxDQUFBLENBQUE7QUFFTixZQUFBO1FBQUEsSUFBYyx1QkFBZDtBQUFBLGlCQUFBOzs7YUFFUSxDQUFFLEtBQVYsQ0FBQTs7ZUFDQSxLQUFDLENBQUEsT0FBRCxHQUFXO01BTEw7O01BT0YsT0FBUCxLQUFPLENBQUEsQ0FBQTtRQUVKLElBQWMsdUJBQWQ7QUFBQSxpQkFBQTs7UUFFQSxLQUFDLENBQUEsT0FBRCxDQUFBO1FBQ0EsS0FBQyxDQUFBLE9BQUQsR0FBVyxLQUFLLENBQUMsS0FBTixDQUFZLEtBQUMsQ0FBQSxLQUFLLENBQUMsSUFBbkIsRUFDUDtVQUFBLGFBQUEsRUFBZ0IsSUFBaEI7VUFDQSxVQUFBLEVBQWdCLEtBRGhCO1VBRUEsV0FBQSxFQUFnQjtRQUZoQixDQURPO2VBS1gsS0FBQyxDQUFBLE9BQ0csQ0FBQyxFQURMLENBQ1EsUUFEUixFQUNrQixLQUFDLENBQUEsWUFEbkIsQ0FFSSxDQUFDLEVBRkwsQ0FFUSxRQUZSLEVBRWtCLEtBQUMsQ0FBQSxZQUZuQixDQUdJLENBQUMsRUFITCxDQUdRLE9BSFIsRUFHa0IsUUFBQSxDQUFDLEdBQUQsQ0FBQTtpQkFBUyxHQUFBLENBQUksbUJBQUosRUFBeUIsR0FBekI7UUFBVCxDQUhsQjtNQVZJOztNQWVPLE9BQWQsWUFBYyxDQUFBLENBQUE7ZUFBRyxLQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBQTtNQUFIOztNQUNBLE9BQWQsWUFBYyxDQUFBLENBQUE7UUFBRyxLQUFDLENBQUEsT0FBRCxDQUFBO2VBQVksS0FBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQUE7TUFBZjs7TUFFUixPQUFOLEdBQU0sQ0FBQyxHQUFELEVBQU0sS0FBTixDQUFBO1FBQWdCLElBQUcsSUFBQyxDQUFBLEtBQUo7aUJBQWUsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsR0FBWCxFQUFnQixLQUFoQixFQUFmO1NBQUEsTUFBQTtpQkFBMEMsTUFBMUM7O01BQWhCOztNQUNBLE9BQU4sR0FBTSxDQUFDLEdBQUQsRUFBTSxLQUFOLENBQUE7UUFBZ0IsSUFBQyxDQUFBLE9BQUQsQ0FBQTtRQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLEdBQVgsRUFBZ0IsS0FBaEI7ZUFBd0IsSUFBQyxDQUFBLEtBQUQsQ0FBQTtNQUFwRDs7TUFDQSxPQUFOLEdBQU0sQ0FBQyxHQUFELEVBQU0sS0FBTixDQUFBO1FBQWdCLElBQUMsQ0FBQSxPQUFELENBQUE7UUFBWSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxHQUFYO2VBQWlCLElBQUMsQ0FBQSxLQUFELENBQUE7TUFBN0M7O01BQ2EsT0FBbkIsSUFBbUIsQ0FBQSxDQUFBO0FBQUcsWUFBQTsrQ0FBTSxDQUFFLElBQVIsQ0FBQTtNQUFIOztJQXpDeEI7O0lBRUksS0FBQyxDQUFBLEtBQUQsR0FBVzs7SUFDWCxLQUFDLENBQUEsT0FBRCxHQUFXOzs7Ozs7RUF3Q2YsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUFyRGpCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICBcbjAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwICAgIDAwMDAwMDAgXG4wMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAgIDAwMFxuMDAwICAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMCBcbiMjI1xuXG57IHN0b3JlLCB3YXRjaCwgZXJyb3IsIGxvZyB9ID0gcmVxdWlyZSAnLi9reGsnXG5cbmNsYXNzIFByZWZzXG4gICAgXG4gICAgQHN0b3JlICAgPSBudWxsXG4gICAgQHdhdGNoZXIgPSBudWxsXG4gICAgXG4gICAgQGluaXQ6IChkZWZzPXt9KSAtPiBcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBlcnJvciAncHJlZnMuaW5pdCAtLSBkdXBsaWNhdGUgc3RvcmVzPycgaWYgQHN0b3JlP1xuICAgICAgICBAc3RvcmUgPSBuZXcgc3RvcmUgJ3ByZWZzJywgZGVmYXVsdHM6ZGVmc1xuICAgICAgICBAc3RvcmUub24gJ3dpbGxTYXZlJywgQHVud2F0Y2hcbiAgICAgICAgQHN0b3JlLm9uICdkaWRTYXZlJywgIEB3YXRjaFxuICAgICAgICBAd2F0Y2goKSBcbiAgICAgIFxuICAgIEB1bndhdGNoOiA9PlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAc3RvcmUuYXBwP1xuICAgICAgICBcbiAgICAgICAgQHdhdGNoZXI/LmNsb3NlKClcbiAgICAgICAgQHdhdGNoZXIgPSBudWxsXG4gICAgICAgIFxuICAgIEB3YXRjaDogPT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQHN0b3JlLmFwcD9cbiAgICAgICAgXG4gICAgICAgIEB1bndhdGNoKClcbiAgICAgICAgQHdhdGNoZXIgPSB3YXRjaC53YXRjaCBAc3RvcmUuZmlsZSxcbiAgICAgICAgICAgIGlnbm9yZUluaXRpYWw6ICB0cnVlXG4gICAgICAgICAgICB1c2VQb2xsaW5nOiAgICAgZmFsc2VcbiAgICAgICAgICAgIHVzZUZzRXZlbnRzOiAgICB0cnVlXG5cbiAgICAgICAgQHdhdGNoZXJcbiAgICAgICAgICAgIC5vbiAnY2hhbmdlJywgQG9uRmlsZUNoYW5nZVxuICAgICAgICAgICAgLm9uICd1bmxpbmsnLCBAb25GaWxlVW5saW5rXG4gICAgICAgICAgICAub24gJ2Vycm9yJyAsIChlcnIpIC0+IGxvZyAnUHJlZnMgd2F0Y2ggZXJyb3InLCBlcnJcbiAgICAgICAgXG4gICAgQG9uRmlsZUNoYW5nZTogPT4gQHN0b3JlLnJlbG9hZCgpXG4gICAgQG9uRmlsZVVubGluazogPT4gQHVud2F0Y2goKTsgQHN0b3JlLmNsZWFyKClcbiAgICAgICAgICAgIFxuICAgIEBnZXQ6ICAoa2V5LCB2YWx1ZSkgLT4gaWYgQHN0b3JlIHRoZW4gQHN0b3JlLmdldCBrZXksIHZhbHVlIGVsc2UgdmFsdWVcbiAgICBAc2V0OiAgKGtleSwgdmFsdWUpIC0+IEB1bndhdGNoKCk7IEBzdG9yZS5zZXQoa2V5LCB2YWx1ZSk7IEB3YXRjaCgpXG4gICAgQGRlbDogIChrZXksIHZhbHVlKSAtPiBAdW53YXRjaCgpOyBAc3RvcmUuZGVsKGtleSk7IEB3YXRjaCgpXG4gICAgQHNhdmU6ICAgICAgICAgICAgICAtPiBAc3RvcmU/LnNhdmUoKVxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gUHJlZnNcbiJdfQ==
//# sourceURL=../coffee/prefs.coffee