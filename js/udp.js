(function() {
  /*
  000   000  0000000    00000000   
  000   000  000   000  000   000  
  000   000  000   000  00000000   
  000   000  000   000  000        
   0000000   0000000    000        
  */
  var dgram, udp;

  dgram = require('dgram');

  udp = class udp {
    constructor(opt) {
      var base, err, log;
      this.opt = opt;
      if (this.opt == null) {
        this.opt = {};
      }
      if ((base = this.opt).port == null) {
        base.port = 9669;
      }
      log = this.opt.debug ? console.log : function() {};
      try {
        this.port = dgram.createSocket('udp4');
        if (this.opt.onMsg) {
          log('receiver', this.opt);
          this.port.on('listening', () => {
            var err;
            try {
              log('listening', this.port.address().address, this.port.address().port);
              return this.port.setBroadcast(true);
            } catch (error) {
              err = error;
              return log("[ERROR] can't listen:", err);
            }
          });
          this.port.on('message', (message, rinfo) => {
            var msg;
            msg = JSON.parse(message.toString());
            log('message', rinfo.address, rinfo.port, msg);
            return this.opt.onMsg(msg);
          });
          this.port.bind(this.opt.port);
        } else {
          log('sender', this.opt);
          this.port.bind(() => {
            var ref, ref1;
            log('sender bind', (ref = this.port) != null ? ref.address().port : void 0);
            return (ref1 = this.port) != null ? ref1.setBroadcast(true) : void 0;
          });
        }
      } catch (error) {
        err = error;
        this.port = null;
        log("[ERROR] can't create udp port:", err);
      }
    }

    send(...args) {
      var buf, log, msg;
      if (!this.port) {
        return;
      }
      log = this.opt.debug ? console.log : function() {};
      if (args.length > 1) {
        msg = JSON.stringify(args);
      } else {
        msg = JSON.stringify(args[0]);
      }
      // log 'send', msg if @opt.debug
      buf = new Buffer(msg);
      return this.port.send(buf, 0, buf.length, this.opt.port, '255.255.255.255', function() {
        return log('sent', msg);
      });
    }

    close() {
      var ref;
      if ((ref = this.port) != null) {
        ref.close();
      }
      return this.port = null;
    }

  };

  module.exports = udp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWRwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWUvdWRwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUE7O0VBUUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztFQUVGLE1BQU4sTUFBQSxJQUFBO0lBRUksV0FBYSxJQUFBLENBQUE7QUFFVCxVQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7TUFGVSxJQUFDLENBQUE7O1FBRVgsSUFBQyxDQUFBLE1BQU8sQ0FBQTs7O1lBQ0osQ0FBQyxPQUFROztNQUViLEdBQUEsR0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVIsR0FBbUIsT0FBTyxDQUFDLEdBQTNCLEdBQW9DLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFFMUM7UUFDSSxJQUFDLENBQUEsSUFBRCxHQUFRLEtBQUssQ0FBQyxZQUFOLENBQW1CLE1BQW5CO1FBRVIsSUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVI7VUFDSSxHQUFBLENBQUksVUFBSixFQUFnQixJQUFDLENBQUEsR0FBakI7VUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxXQUFULEVBQXNCLENBQUEsQ0FBQSxHQUFBO0FBQ2xCLGdCQUFBO0FBQUE7Y0FDSSxHQUFBLENBQUksV0FBSixFQUFpQixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBQSxDQUFlLENBQUMsT0FBakMsRUFBMEMsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLENBQUEsQ0FBZSxDQUFDLElBQTFEO3FCQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsWUFBTixDQUFtQixJQUFuQixFQUZKO2FBQUEsYUFBQTtjQUdNO3FCQUNGLEdBQUEsQ0FBSSx1QkFBSixFQUE2QixHQUE3QixFQUpKOztVQURrQixDQUF0QjtVQU1BLElBQUMsQ0FBQSxJQUFJLENBQUMsRUFBTixDQUFTLFNBQVQsRUFBb0IsQ0FBQyxPQUFELEVBQVUsS0FBVixDQUFBLEdBQUE7QUFDaEIsZ0JBQUE7WUFBQSxHQUFBLEdBQU0sSUFBSSxDQUFDLEtBQUwsQ0FBVyxPQUFPLENBQUMsUUFBUixDQUFBLENBQVg7WUFDTixHQUFBLENBQUksU0FBSixFQUFlLEtBQUssQ0FBQyxPQUFyQixFQUE4QixLQUFLLENBQUMsSUFBcEMsRUFBMEMsR0FBMUM7bUJBQ0EsSUFBQyxDQUFBLEdBQUcsQ0FBQyxLQUFMLENBQVcsR0FBWDtVQUhnQixDQUFwQjtVQUlBLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFXLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBaEIsRUFaSjtTQUFBLE1BQUE7VUFjSSxHQUFBLENBQUksUUFBSixFQUFjLElBQUMsQ0FBQSxHQUFmO1VBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsQ0FBQSxDQUFBLEdBQUE7QUFDUCxnQkFBQSxHQUFBLEVBQUE7WUFBQSxHQUFBLENBQUksYUFBSixpQ0FBd0IsQ0FBRSxPQUFQLENBQUEsQ0FBZ0IsQ0FBQyxhQUFwQztvREFDSyxDQUFFLFlBQVAsQ0FBb0IsSUFBcEI7VUFGTyxDQUFYLEVBZko7U0FISjtPQUFBLGFBQUE7UUFxQk07UUFDRixJQUFDLENBQUEsSUFBRCxHQUFRO1FBQ1IsR0FBQSxDQUFJLGdDQUFKLEVBQXNDLEdBQXRDLEVBdkJKOztJQVBTOztJQWdDYixJQUFNLENBQUEsR0FBQyxJQUFELENBQUE7QUFFRixVQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7TUFBQSxJQUFVLENBQUksSUFBQyxDQUFBLElBQWY7QUFBQSxlQUFBOztNQUVBLEdBQUEsR0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVIsR0FBbUIsT0FBTyxDQUFDLEdBQTNCLEdBQW9DLFFBQUEsQ0FBQSxDQUFBLEVBQUE7TUFFMUMsSUFBRyxJQUFJLENBQUMsTUFBTCxHQUFjLENBQWpCO1FBQ0ksR0FBQSxHQUFNLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixFQURWO09BQUEsTUFBQTtRQUdJLEdBQUEsR0FBTSxJQUFJLENBQUMsU0FBTCxDQUFlLElBQUssQ0FBQSxDQUFBLENBQXBCLEVBSFY7T0FKQTs7TUFTQSxHQUFBLEdBQU0sSUFBSSxNQUFKLENBQVcsR0FBWDthQUNOLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFXLEdBQVgsRUFBZ0IsQ0FBaEIsRUFBbUIsR0FBRyxDQUFDLE1BQXZCLEVBQStCLElBQUMsQ0FBQSxHQUFHLENBQUMsSUFBcEMsRUFBMEMsaUJBQTFDLEVBQTZELFFBQUEsQ0FBQSxDQUFBO2VBQ3pELEdBQUEsQ0FBSSxNQUFKLEVBQVksR0FBWjtNQUR5RCxDQUE3RDtJQVpFOztJQWVOLEtBQU8sQ0FBQSxDQUFBO0FBRUgsVUFBQTs7V0FBSyxDQUFFLEtBQVAsQ0FBQTs7YUFDQSxJQUFDLENBQUEsSUFBRCxHQUFRO0lBSEw7O0VBakRYOztFQXNEQSxNQUFNLENBQUMsT0FBUCxHQUFpQjtBQWhFakIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIFxuIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgICAgICAgXG4jIyNcblxuZGdyYW0gPSByZXF1aXJlICdkZ3JhbSdcblxuY2xhc3MgdWRwXG5cbiAgICBjb25zdHJ1Y3RvcjogKEBvcHQpIC0+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBvcHQgPz0ge31cbiAgICAgICAgQG9wdC5wb3J0ID89IDk2NjlcbiAgICAgICAgXG4gICAgICAgIGxvZyA9IGlmIEBvcHQuZGVidWcgdGhlbiBjb25zb2xlLmxvZyBlbHNlIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgdHJ5XG4gICAgICAgICAgICBAcG9ydCA9IGRncmFtLmNyZWF0ZVNvY2tldCAndWRwNCdcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgQG9wdC5vbk1zZ1xuICAgICAgICAgICAgICAgIGxvZyAncmVjZWl2ZXInLCBAb3B0XG4gICAgICAgICAgICAgICAgQHBvcnQub24gJ2xpc3RlbmluZycsID0+IFxuICAgICAgICAgICAgICAgICAgICB0cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyAnbGlzdGVuaW5nJywgQHBvcnQuYWRkcmVzcygpLmFkZHJlc3MsIEBwb3J0LmFkZHJlc3MoKS5wb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICBAcG9ydC5zZXRCcm9hZGNhc3QgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyBcIltFUlJPUl0gY2FuJ3QgbGlzdGVuOlwiLCBlcnJcbiAgICAgICAgICAgICAgICBAcG9ydC5vbiAnbWVzc2FnZScsIChtZXNzYWdlLCByaW5mbykgPT5cbiAgICAgICAgICAgICAgICAgICAgbXNnID0gSlNPTi5wYXJzZSBtZXNzYWdlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgbG9nICdtZXNzYWdlJywgcmluZm8uYWRkcmVzcywgcmluZm8ucG9ydCwgbXNnXG4gICAgICAgICAgICAgICAgICAgIEBvcHQub25Nc2cgbXNnXG4gICAgICAgICAgICAgICAgQHBvcnQuYmluZCBAb3B0LnBvcnRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBsb2cgJ3NlbmRlcicsIEBvcHRcbiAgICAgICAgICAgICAgICBAcG9ydC5iaW5kID0+IFxuICAgICAgICAgICAgICAgICAgICBsb2cgJ3NlbmRlciBiaW5kJywgQHBvcnQ/LmFkZHJlc3MoKS5wb3J0XG4gICAgICAgICAgICAgICAgICAgIEBwb3J0Py5zZXRCcm9hZGNhc3QgdHJ1ZVxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIEBwb3J0ID0gbnVsbFxuICAgICAgICAgICAgbG9nIFwiW0VSUk9SXSBjYW4ndCBjcmVhdGUgdWRwIHBvcnQ6XCIsIGVyclxuICAgICAgICAgICAgICAgIFxuICAgIHNlbmQ6IChhcmdzLi4uKSAtPlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAcG9ydFxuICAgICAgICBcbiAgICAgICAgbG9nID0gaWYgQG9wdC5kZWJ1ZyB0aGVuIGNvbnNvbGUubG9nIGVsc2UgLT5cbiAgICAgICAgICAgIFxuICAgICAgICBpZiBhcmdzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5IGFyZ3NcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbXNnID0gSlNPTi5zdHJpbmdpZnkgYXJnc1swXVxuICAgICAgICAjIGxvZyAnc2VuZCcsIG1zZyBpZiBAb3B0LmRlYnVnXG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIgbXNnXG4gICAgICAgIEBwb3J0LnNlbmQgYnVmLCAwLCBidWYubGVuZ3RoLCBAb3B0LnBvcnQsICcyNTUuMjU1LjI1NS4yNTUnLCAtPlxuICAgICAgICAgICAgbG9nICdzZW50JywgbXNnXG4gICAgICAgICAgICBcbiAgICBjbG9zZTogLT5cbiAgICAgICAgXG4gICAgICAgIEBwb3J0Py5jbG9zZSgpXG4gICAgICAgIEBwb3J0ID0gbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IHVkcFxuICAgICJdfQ==
//# sourceURL=C:/Users/kodi/s/kxk/coffee/udp.coffee