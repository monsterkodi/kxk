(function() {
  /*
  000   000  0000000    00000000   
  000   000  000   000  000   000  
  000   000  000   000  00000000   
  000   000  000   000  000        
   0000000   0000000    000        
  */
  var dgram, udp;

  dgram = require('dgram');

  udp = class udp {
    constructor(opt) {
      var base, err, log;
      this.opt = opt;
      if (this.opt == null) {
        this.opt = {};
      }
      if ((base = this.opt).port == null) {
        base.port = 9669;
      }
      log = this.opt.debug ? console.log : function() {};
      try {
        this.port = dgram.createSocket('udp4');
        if (this.opt.onMsg) {
          log('receiver', this.opt);
          this.port.on('listening', () => {
            var err;
            try {
              log('listening', this.port.address().address, this.port.address().port);
              return this.port.setBroadcast(true);
            } catch (error) {
              err = error;
              return log("[ERROR] can't listen:", err);
            }
          });
          this.port.on('message', (message, rinfo) => {
            var err, messageString, msg;
            messageString = message.toString();
            log('messageString', messageString);
            try {
              msg = JSON.parse(messageString);
            } catch (error) {
              err = error;
              log('conversion error', err);
              return;
            }
            log('message', rinfo.address, rinfo.port, msg);
            return this.opt.onMsg(msg);
          });
          this.port.on('error', (err) => {
            return log('[ERROR] port error', err);
          });
          this.port.bind(this.opt.port);
        } else {
          log('sender', this.opt);
          this.port.bind(() => {
            var ref, ref1;
            log('sender bind', (ref = this.port) != null ? ref.address().port : void 0);
            return (ref1 = this.port) != null ? ref1.setBroadcast(true) : void 0;
          });
        }
      } catch (error) {
        err = error;
        this.port = null;
        log("[ERROR] can't create udp port:", err);
      }
    }

    send(...args) {
      var buf, log, msg;
      if (!this.port) {
        return;
      }
      log = this.opt.debug ? console.log : function() {};
      if (args.length > 1) {
        msg = JSON.stringify(args);
      } else {
        msg = JSON.stringify(args[0]);
      }
      // log 'send', msg if @opt.debug
      buf = new Buffer(msg);
      return this.port.send(buf, 0, buf.length, this.opt.port, '255.255.255.255', function() {
        return log('sent', msg);
      });
    }

    close() {
      var ref;
      if ((ref = this.port) != null) {
        ref.close();
      }
      return this.port = null;
    }

  };

  module.exports = udp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWRwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWUvdWRwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUE7O0VBUUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztFQUVGLE1BQU4sTUFBQSxJQUFBO0lBRUksV0FBYSxJQUFBLENBQUE7QUFFVCxVQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7TUFGVSxJQUFDLENBQUE7O1FBRVgsSUFBQyxDQUFBLE1BQU8sQ0FBQTs7O1lBQ0osQ0FBQyxPQUFROztNQUViLEdBQUEsR0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVIsR0FBbUIsT0FBTyxDQUFDLEdBQTNCLEdBQW9DLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFFMUM7UUFDSSxJQUFDLENBQUEsSUFBRCxHQUFRLEtBQUssQ0FBQyxZQUFOLENBQW1CLE1BQW5CO1FBRVIsSUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVI7VUFFSSxHQUFBLENBQUksVUFBSixFQUFnQixJQUFDLENBQUEsR0FBakI7VUFFQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxXQUFULEVBQXNCLENBQUEsQ0FBQSxHQUFBO0FBQ2xCLGdCQUFBO0FBQUE7Y0FDSSxHQUFBLENBQUksV0FBSixFQUFpQixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBQSxDQUFlLENBQUMsT0FBakMsRUFBMEMsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLENBQUEsQ0FBZSxDQUFDLElBQTFEO3FCQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsWUFBTixDQUFtQixJQUFuQixFQUZKO2FBQUEsYUFBQTtjQUdNO3FCQUNGLEdBQUEsQ0FBSSx1QkFBSixFQUE2QixHQUE3QixFQUpKOztVQURrQixDQUF0QjtVQU9BLElBQUMsQ0FBQSxJQUFJLENBQUMsRUFBTixDQUFTLFNBQVQsRUFBb0IsQ0FBQyxPQUFELEVBQVUsS0FBVixDQUFBLEdBQUE7QUFDaEIsZ0JBQUEsR0FBQSxFQUFBLGFBQUEsRUFBQTtZQUFBLGFBQUEsR0FBZ0IsT0FBTyxDQUFDLFFBQVIsQ0FBQTtZQUNoQixHQUFBLENBQUksZUFBSixFQUFxQixhQUFyQjtBQUNBO2NBQ0ksR0FBQSxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsYUFBWCxFQURWO2FBQUEsYUFBQTtjQUVNO2NBQ0YsR0FBQSxDQUFJLGtCQUFKLEVBQXdCLEdBQXhCO0FBQ0EscUJBSko7O1lBS0EsR0FBQSxDQUFJLFNBQUosRUFBZSxLQUFLLENBQUMsT0FBckIsRUFBOEIsS0FBSyxDQUFDLElBQXBDLEVBQTBDLEdBQTFDO21CQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBTCxDQUFXLEdBQVg7VUFUZ0IsQ0FBcEI7VUFXQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxPQUFULEVBQWtCLENBQUMsR0FBRCxDQUFBLEdBQUE7bUJBQ2QsR0FBQSxDQUFJLG9CQUFKLEVBQTBCLEdBQTFCO1VBRGMsQ0FBbEI7VUFHQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxJQUFDLENBQUEsR0FBRyxDQUFDLElBQWhCLEVBekJKO1NBQUEsTUFBQTtVQTZCSSxHQUFBLENBQUksUUFBSixFQUFjLElBQUMsQ0FBQSxHQUFmO1VBRUEsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsQ0FBQSxDQUFBLEdBQUE7QUFDUCxnQkFBQSxHQUFBLEVBQUE7WUFBQSxHQUFBLENBQUksYUFBSixpQ0FBd0IsQ0FBRSxPQUFQLENBQUEsQ0FBZ0IsQ0FBQyxhQUFwQztvREFDSyxDQUFFLFlBQVAsQ0FBb0IsSUFBcEI7VUFGTyxDQUFYLEVBL0JKO1NBSEo7T0FBQSxhQUFBO1FBcUNNO1FBQ0YsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLEdBQUEsQ0FBSSxnQ0FBSixFQUFzQyxHQUF0QyxFQXZDSjs7SUFQUzs7SUFnRGIsSUFBTSxDQUFBLEdBQUMsSUFBRCxDQUFBO0FBRUYsVUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO01BQUEsSUFBVSxDQUFJLElBQUMsQ0FBQSxJQUFmO0FBQUEsZUFBQTs7TUFFQSxHQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxLQUFSLEdBQW1CLE9BQU8sQ0FBQyxHQUEzQixHQUFvQyxRQUFBLENBQUEsQ0FBQSxFQUFBO01BRTFDLElBQUcsSUFBSSxDQUFDLE1BQUwsR0FBYyxDQUFqQjtRQUNJLEdBQUEsR0FBTSxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsRUFEVjtPQUFBLE1BQUE7UUFHSSxHQUFBLEdBQU0sSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFLLENBQUEsQ0FBQSxDQUFwQixFQUhWO09BSkE7O01BU0EsR0FBQSxHQUFNLElBQUksTUFBSixDQUFXLEdBQVg7YUFDTixJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxHQUFYLEVBQWdCLENBQWhCLEVBQW1CLEdBQUcsQ0FBQyxNQUF2QixFQUErQixJQUFDLENBQUEsR0FBRyxDQUFDLElBQXBDLEVBQTBDLGlCQUExQyxFQUE2RCxRQUFBLENBQUEsQ0FBQTtlQUN6RCxHQUFBLENBQUksTUFBSixFQUFZLEdBQVo7TUFEeUQsQ0FBN0Q7SUFaRTs7SUFlTixLQUFPLENBQUEsQ0FBQTtBQUVILFVBQUE7O1dBQUssQ0FBRSxLQUFQLENBQUE7O2FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUTtJQUhMOztFQWpFWDs7RUFzRUEsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUFoRmpCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICBcbiAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgICAgICAgIFxuIyMjXG5cbmRncmFtID0gcmVxdWlyZSAnZGdyYW0nXG5cbmNsYXNzIHVkcFxuXG4gICAgY29uc3RydWN0b3I6IChAb3B0KSAtPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAb3B0ID89IHt9XG4gICAgICAgIEBvcHQucG9ydCA/PSA5NjY5XG4gICAgICAgIFxuICAgICAgICBsb2cgPSBpZiBAb3B0LmRlYnVnIHRoZW4gY29uc29sZS5sb2cgZWxzZSAtPlxuICAgICAgICAgICAgXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgQHBvcnQgPSBkZ3JhbS5jcmVhdGVTb2NrZXQgJ3VkcDQnXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIEBvcHQub25Nc2dcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsb2cgJ3JlY2VpdmVyJywgQG9wdFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0Lm9uICdsaXN0ZW5pbmcnLCA9PiBcbiAgICAgICAgICAgICAgICAgICAgdHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cgJ2xpc3RlbmluZycsIEBwb3J0LmFkZHJlc3MoKS5hZGRyZXNzLCBAcG9ydC5hZGRyZXNzKCkucG9ydFxuICAgICAgICAgICAgICAgICAgICAgICAgQHBvcnQuc2V0QnJvYWRjYXN0IHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cgXCJbRVJST1JdIGNhbid0IGxpc3RlbjpcIiwgZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAcG9ydC5vbiAnbWVzc2FnZScsIChtZXNzYWdlLCByaW5mbykgPT5cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVN0cmluZyA9IG1lc3NhZ2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICBsb2cgJ21lc3NhZ2VTdHJpbmcnLCBtZXNzYWdlU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIHRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gSlNPTi5wYXJzZSBtZXNzYWdlU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nICdjb252ZXJzaW9uIGVycm9yJywgZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgbG9nICdtZXNzYWdlJywgcmluZm8uYWRkcmVzcywgcmluZm8ucG9ydCwgbXNnXG4gICAgICAgICAgICAgICAgICAgIEBvcHQub25Nc2cgbXNnXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0Lm9uICdlcnJvcicsIChlcnIpID0+XG4gICAgICAgICAgICAgICAgICAgIGxvZyAnW0VSUk9SXSBwb3J0IGVycm9yJywgZXJyXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0LmJpbmQgQG9wdC5wb3J0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbG9nICdzZW5kZXInLCBAb3B0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQHBvcnQuYmluZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgbG9nICdzZW5kZXIgYmluZCcsIEBwb3J0Py5hZGRyZXNzKCkucG9ydFxuICAgICAgICAgICAgICAgICAgICBAcG9ydD8uc2V0QnJvYWRjYXN0IHRydWVcbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBAcG9ydCA9IG51bGxcbiAgICAgICAgICAgIGxvZyBcIltFUlJPUl0gY2FuJ3QgY3JlYXRlIHVkcCBwb3J0OlwiLCBlcnJcbiAgICAgICAgICAgICAgICBcbiAgICBzZW5kOiAoYXJncy4uLikgLT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQHBvcnRcbiAgICAgICAgXG4gICAgICAgIGxvZyA9IGlmIEBvcHQuZGVidWcgdGhlbiBjb25zb2xlLmxvZyBlbHNlIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgYXJncy5sZW5ndGggPiAxXG4gICAgICAgICAgICBtc2cgPSBKU09OLnN0cmluZ2lmeSBhcmdzXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5IGFyZ3NbMF1cbiAgICAgICAgIyBsb2cgJ3NlbmQnLCBtc2cgaWYgQG9wdC5kZWJ1Z1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyIG1zZ1xuICAgICAgICBAcG9ydC5zZW5kIGJ1ZiwgMCwgYnVmLmxlbmd0aCwgQG9wdC5wb3J0LCAnMjU1LjI1NS4yNTUuMjU1JywgLT5cbiAgICAgICAgICAgIGxvZyAnc2VudCcsIG1zZ1xuICAgICAgICAgICAgXG4gICAgY2xvc2U6IC0+XG4gICAgICAgIFxuICAgICAgICBAcG9ydD8uY2xvc2UoKVxuICAgICAgICBAcG9ydCA9IG51bGxcblxubW9kdWxlLmV4cG9ydHMgPSB1ZHBcbiAgICAiXX0=
//# sourceURL=C:/Users/t.kohnhorst/s/kxk/coffee/udp.coffee