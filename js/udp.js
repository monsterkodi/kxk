(function() {
  /*
  000   000  0000000    00000000   
  000   000  000   000  000   000  
  000   000  000   000  00000000   
  000   000  000   000  000        
   0000000   0000000    000        
  */
  var dgram, udp;

  dgram = require('dgram');

  udp = class udp {
    constructor(opt) {
      var base, log;
      this.opt = opt;
      if (this.opt == null) {
        this.opt = {};
      }
      if ((base = this.opt).port == null) {
        base.port = 9669;
      }
      this.port = dgram.createSocket('udp4');
      log = this.opt.debug ? console.log : function() {};
      if (this.opt.onMsg) {
        log('receiver', this.opt);
        this.port.on('listening', () => {
          log('listening', this.port.address().address, this.port.address().port);
          return this.port.setBroadcast(true);
        });
        this.port.on('message', (message, rinfo) => {
          var msg;
          msg = JSON.parse(message.toString());
          log('message', rinfo.address, rinfo.port, msg);
          return this.opt.onMsg(msg);
        });
        this.port.bind(this.opt.port);
      } else {
        log('sender', this.opt);
        this.port.bind(() => {
          log('sender bind', this.port.address().port);
          return this.port.setBroadcast(true);
        });
      }
    }

    send(...args) {
      var buf, log, msg;
      if (!this.port) {
        return;
      }
      log = this.opt.debug ? console.log : function() {};
      if (args.length > 1) {
        msg = JSON.stringify(args);
      } else {
        msg = JSON.stringify(args[0]);
      }
      // log 'send', msg if @opt.debug
      buf = new Buffer(msg);
      return this.port.send(buf, 0, buf.length, this.opt.port, '255.255.255.255', function() {
        return log('sent', msg);
      });
    }

    close() {
      this.port.close();
      return this.port = null;
    }

  };

  module.exports = udp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWRwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWUvdWRwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUE7O0VBUUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztFQUVGLE1BQU4sTUFBQSxJQUFBO0lBRUksV0FBYSxJQUFBLENBQUE7QUFFVCxVQUFBLElBQUEsRUFBQTtNQUZVLElBQUMsQ0FBQTs7UUFFWCxJQUFDLENBQUEsTUFBTyxDQUFBOzs7WUFDSixDQUFDLE9BQVE7O01BRWIsSUFBQyxDQUFBLElBQUQsR0FBUSxLQUFLLENBQUMsWUFBTixDQUFtQixNQUFuQjtNQUVSLEdBQUEsR0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVIsR0FBbUIsT0FBTyxDQUFDLEdBQTNCLEdBQW9DLFFBQUEsQ0FBQSxDQUFBLEVBQUE7TUFFMUMsSUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVI7UUFDSSxHQUFBLENBQUksVUFBSixFQUFnQixJQUFDLENBQUEsR0FBakI7UUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxXQUFULEVBQXNCLENBQUEsQ0FBQSxHQUFBO1VBQ2xCLEdBQUEsQ0FBSSxXQUFKLEVBQWlCLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFBLENBQWUsQ0FBQyxPQUFqQyxFQUEwQyxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBQSxDQUFlLENBQUMsSUFBMUQ7aUJBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQW1CLElBQW5CO1FBRmtCLENBQXRCO1FBR0EsSUFBQyxDQUFBLElBQUksQ0FBQyxFQUFOLENBQVMsU0FBVCxFQUFvQixDQUFDLE9BQUQsRUFBVSxLQUFWLENBQUEsR0FBQTtBQUNoQixjQUFBO1VBQUEsR0FBQSxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsT0FBTyxDQUFDLFFBQVIsQ0FBQSxDQUFYO1VBQ04sR0FBQSxDQUFJLFNBQUosRUFBZSxLQUFLLENBQUMsT0FBckIsRUFBOEIsS0FBSyxDQUFDLElBQXBDLEVBQTBDLEdBQTFDO2lCQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBTCxDQUFXLEdBQVg7UUFIZ0IsQ0FBcEI7UUFJQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxJQUFDLENBQUEsR0FBRyxDQUFDLElBQWhCLEVBVEo7T0FBQSxNQUFBO1FBV0ksR0FBQSxDQUFJLFFBQUosRUFBYyxJQUFDLENBQUEsR0FBZjtRQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFXLENBQUEsQ0FBQSxHQUFBO1VBQ1AsR0FBQSxDQUFJLGFBQUosRUFBbUIsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLENBQUEsQ0FBZSxDQUFDLElBQW5DO2lCQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsWUFBTixDQUFtQixJQUFuQjtRQUZPLENBQVgsRUFaSjs7SUFUUzs7SUF5QmIsSUFBTSxDQUFBLEdBQUMsSUFBRCxDQUFBO0FBRUYsVUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO01BQUEsSUFBVSxDQUFJLElBQUMsQ0FBQSxJQUFmO0FBQUEsZUFBQTs7TUFFQSxHQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxLQUFSLEdBQW1CLE9BQU8sQ0FBQyxHQUEzQixHQUFvQyxRQUFBLENBQUEsQ0FBQSxFQUFBO01BRTFDLElBQUcsSUFBSSxDQUFDLE1BQUwsR0FBYyxDQUFqQjtRQUNJLEdBQUEsR0FBTSxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsRUFEVjtPQUFBLE1BQUE7UUFHSSxHQUFBLEdBQU0sSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFLLENBQUEsQ0FBQSxDQUFwQixFQUhWO09BSkE7O01BU0EsR0FBQSxHQUFNLElBQUksTUFBSixDQUFXLEdBQVg7YUFDTixJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxHQUFYLEVBQWdCLENBQWhCLEVBQW1CLEdBQUcsQ0FBQyxNQUF2QixFQUErQixJQUFDLENBQUEsR0FBRyxDQUFDLElBQXBDLEVBQTBDLGlCQUExQyxFQUE2RCxRQUFBLENBQUEsQ0FBQTtlQUN6RCxHQUFBLENBQUksTUFBSixFQUFZLEdBQVo7TUFEeUQsQ0FBN0Q7SUFaRTs7SUFlTixLQUFPLENBQUEsQ0FBQTtNQUVILElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFBO2FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUTtJQUhMOztFQTFDWDs7RUErQ0EsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUF6RGpCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICBcbiAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgICAgICAgIFxuIyMjXG5cbmRncmFtID0gcmVxdWlyZSAnZGdyYW0nXG5cbmNsYXNzIHVkcFxuXG4gICAgY29uc3RydWN0b3I6IChAb3B0KSAtPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAb3B0ID89IHt9XG4gICAgICAgIEBvcHQucG9ydCA/PSA5NjY5XG4gICAgICAgIFxuICAgICAgICBAcG9ydCA9IGRncmFtLmNyZWF0ZVNvY2tldCAndWRwNCdcbiAgICAgICAgXG4gICAgICAgIGxvZyA9IGlmIEBvcHQuZGVidWcgdGhlbiBjb25zb2xlLmxvZyBlbHNlIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBAb3B0Lm9uTXNnXG4gICAgICAgICAgICBsb2cgJ3JlY2VpdmVyJywgQG9wdFxuICAgICAgICAgICAgQHBvcnQub24gJ2xpc3RlbmluZycsID0+IFxuICAgICAgICAgICAgICAgIGxvZyAnbGlzdGVuaW5nJywgQHBvcnQuYWRkcmVzcygpLmFkZHJlc3MsIEBwb3J0LmFkZHJlc3MoKS5wb3J0XG4gICAgICAgICAgICAgICAgQHBvcnQuc2V0QnJvYWRjYXN0IHRydWVcbiAgICAgICAgICAgIEBwb3J0Lm9uICdtZXNzYWdlJywgKG1lc3NhZ2UsIHJpbmZvKSA9PlxuICAgICAgICAgICAgICAgIG1zZyA9IEpTT04ucGFyc2UgbWVzc2FnZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgbG9nICdtZXNzYWdlJywgcmluZm8uYWRkcmVzcywgcmluZm8ucG9ydCwgbXNnXG4gICAgICAgICAgICAgICAgQG9wdC5vbk1zZyBtc2dcbiAgICAgICAgICAgIEBwb3J0LmJpbmQgQG9wdC5wb3J0XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxvZyAnc2VuZGVyJywgQG9wdFxuICAgICAgICAgICAgQHBvcnQuYmluZCA9PiBcbiAgICAgICAgICAgICAgICBsb2cgJ3NlbmRlciBiaW5kJywgQHBvcnQuYWRkcmVzcygpLnBvcnRcbiAgICAgICAgICAgICAgICBAcG9ydC5zZXRCcm9hZGNhc3QgdHJ1ZVxuICAgICAgICAgICAgICAgIFxuICAgIHNlbmQ6IChhcmdzLi4uKSAtPlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBAcG9ydFxuICAgICAgICBcbiAgICAgICAgbG9nID0gaWYgQG9wdC5kZWJ1ZyB0aGVuIGNvbnNvbGUubG9nIGVsc2UgLT5cbiAgICAgICAgICAgIFxuICAgICAgICBpZiBhcmdzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5IGFyZ3NcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbXNnID0gSlNPTi5zdHJpbmdpZnkgYXJnc1swXVxuICAgICAgICAjIGxvZyAnc2VuZCcsIG1zZyBpZiBAb3B0LmRlYnVnXG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIgbXNnXG4gICAgICAgIEBwb3J0LnNlbmQgYnVmLCAwLCBidWYubGVuZ3RoLCBAb3B0LnBvcnQsICcyNTUuMjU1LjI1NS4yNTUnLCAtPlxuICAgICAgICAgICAgbG9nICdzZW50JywgbXNnXG4gICAgICAgICAgICBcbiAgICBjbG9zZTogLT5cbiAgICAgICAgXG4gICAgICAgIEBwb3J0LmNsb3NlKClcbiAgICAgICAgQHBvcnQgPSBudWxsXG5cbm1vZHVsZS5leHBvcnRzID0gdWRwXG4gICAgIl19
//# sourceURL=C:/Users/kodi/s/kxk/coffee/udp.coffee