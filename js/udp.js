(function() {
  /*
  000   000  0000000    00000000   
  000   000  000   000  000   000  
  000   000  000   000  00000000   
  000   000  000   000  000        
   0000000   0000000    000        
  */
  var dgram, udp;

  dgram = require('dgram');

  udp = class udp {
    constructor(opt) {
      var base, err, log;
      this.opt = opt;
      if (this.opt == null) {
        this.opt = {};
      }
      if ((base = this.opt).port == null) {
        base.port = 9669;
      }
      log = this.opt.debug ? console.log : function() {};
      try {
        this.port = dgram.createSocket('udp4');
        if (this.opt.onMsg) {
          log('receiver', this.opt);
          this.port.on('listening', () => {
            var err;
            try {
              log('listening', this.port.address().address, this.port.address().port);
              return this.port.setBroadcast(true);
            } catch (error) {
              // @port.setRecvBufferSize 1000000
              // log 'req size', @port.getRecvBufferSize()
              err = error;
              return log("[ERROR] can't listen:", err);
            }
          });
          this.port.on('message', (message, rinfo) => {
            var err, messageString, msg;
            // @port.setSendBufferSize 1000000
            // log 'send size', @port.getSendBufferSize()
            messageString = message.toString();
            log('messageString', messageString);
            try {
              msg = JSON.parse(messageString);
            } catch (error) {
              err = error;
              log('conversion error', err);
              return;
            }
            log('message', rinfo.address, rinfo.port, msg);
            return this.opt.onMsg(msg);
          });
          this.port.on('error', (err) => {
            return log('[ERROR] port error', err);
          });
          this.port.bind(this.opt.port);
        } else {
          log('sender', this.opt);
          this.port.bind(() => {
            var ref, ref1;
            log('sender bind', (ref = this.port) != null ? ref.address().port : void 0);
            return (ref1 = this.port) != null ? ref1.setBroadcast(true) : void 0;
          });
        }
      } catch (error) {
        err = error;
        this.port = null;
        log("[ERROR] can't create udp port:", err);
      }
    }

    send(...args) {
      var buf, log, msg;
      if (!this.port) {
        return;
      }
      log = this.opt.debug ? console.log : function() {};
      if (args.length > 1) {
        msg = JSON.stringify(args);
      } else {
        msg = JSON.stringify(args[0]);
      }
      buf = new Buffer(msg);
      log(`sending ${buf.length} bytes`);
      if (buf.length > this.port.getSendBufferSize()) {
        log(`msg too large! ${buf.length} ${this.port.getSendBufferSize()}`);
      }
      return this.port.send(buf, 0, buf.length, this.opt.port, '127.0.0.1', function() {
        return log('sent', msg);
      });
    }

    close() {
      var ref;
      if ((ref = this.port) != null) {
        ref.close();
      }
      return this.port = null;
    }

  };

  module.exports = udp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWRwLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIi4uL2NvZmZlZS91ZHAuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUE7Ozs7Ozs7QUFBQSxNQUFBLEtBQUEsRUFBQTs7RUFRQSxLQUFBLEdBQVEsT0FBQSxDQUFRLE9BQVI7O0VBRUYsTUFBTixNQUFBLElBQUE7SUFFSSxXQUFhLElBQUEsQ0FBQTtBQUVULFVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQTtNQUZVLElBQUMsQ0FBQTs7UUFFWCxJQUFDLENBQUEsTUFBTyxDQUFBOzs7WUFDSixDQUFDLE9BQVE7O01BRWIsR0FBQSxHQUFTLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBUixHQUFtQixPQUFPLENBQUMsR0FBM0IsR0FBb0MsUUFBQSxDQUFBLENBQUEsRUFBQTtBQUUxQztRQUNJLElBQUMsQ0FBQSxJQUFELEdBQVEsS0FBSyxDQUFDLFlBQU4sQ0FBbUIsTUFBbkI7UUFFUixJQUFHLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBUjtVQUVJLEdBQUEsQ0FBSSxVQUFKLEVBQWdCLElBQUMsQ0FBQSxHQUFqQjtVQUVBLElBQUMsQ0FBQSxJQUFJLENBQUMsRUFBTixDQUFTLFdBQVQsRUFBc0IsQ0FBQSxDQUFBLEdBQUE7QUFDbEIsZ0JBQUE7QUFBQTtjQUNJLEdBQUEsQ0FBSSxXQUFKLEVBQWlCLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFBLENBQWUsQ0FBQyxPQUFqQyxFQUEwQyxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBQSxDQUFlLENBQUMsSUFBMUQ7cUJBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQW1CLElBQW5CLEVBRko7YUFBQSxhQUFBOzs7Y0FNTTtxQkFDRixHQUFBLENBQUksdUJBQUosRUFBNkIsR0FBN0IsRUFQSjs7VUFEa0IsQ0FBdEI7VUFVQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxTQUFULEVBQW9CLENBQUMsT0FBRCxF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O0FBM0ZqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgXG4gMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAgICAgICBcbiMjI1xuXG5kZ3JhbSA9IHJlcXVpcmUgJ2RncmFtJ1xuXG5jbGFzcyB1ZHBcblxuICAgIGNvbnN0cnVjdG9yOiAoQG9wdCkgLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQG9wdCA/PSB7fVxuICAgICAgICBAb3B0LnBvcnQgPz0gOTY2OVxuICAgICAgICBcbiAgICAgICAgbG9nID0gaWYgQG9wdC5kZWJ1ZyB0aGVuIGNvbnNvbGUubG9nIGVsc2UgLT5cbiAgICAgICAgICAgIFxuICAgICAgICB0cnlcbiAgICAgICAgICAgIEBwb3J0ID0gZGdyYW0uY3JlYXRlU29ja2V0ICd1ZHA0J1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBAb3B0Lm9uTXNnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbG9nICdyZWNlaXZlcicsIEBvcHRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAcG9ydC5vbiAnbGlzdGVuaW5nJywgPT4gXG4gICAgICAgICAgICAgICAgICAgIHRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nICdsaXN0ZW5pbmcnLCBAcG9ydC5hZGRyZXNzKCkuYWRkcmVzcywgQHBvcnQuYWRkcmVzcygpLnBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIEBwb3J0LnNldEJyb2FkY2FzdCB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAjIEBwb3J0LnNldFJlY3ZCdWZmZXJTaXplIDEwMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICMgbG9nICdyZXEgc2l6ZScsIEBwb3J0LmdldFJlY3ZCdWZmZXJTaXplKClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyBcIltFUlJPUl0gY2FuJ3QgbGlzdGVuOlwiLCBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0Lm9uICdtZXNzYWdlJywgKG1lc3NhZ2UsIHJpbmZvKSA9PlxuICAgICAgICAgICAgICAgICAgICAjIEBwb3J0LnNldFNlbmRCdWZmZXJTaXplIDEwMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgIyBsb2cgJ3NlbmQgc2l6ZScsIEBwb3J0LmdldFNlbmRCdWZmZXJTaXplKClcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVN0cmluZyA9IG1lc3NhZ2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICBsb2cgJ21lc3NhZ2VTdHJpbmcnLCBtZXNzYWdlU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIHRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gSlNPTi5wYXJzZSBtZXNzYWdlU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nICdjb252ZXJzaW9uIGVycm9yJywgZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgbG9nICdtZXNzYWdlJywgcmluZm8uYWRkcmVzcywgcmluZm8ucG9ydCwgbXNnXG4gICAgICAgICAgICAgICAgICAgIEBvcHQub25Nc2cgbXNnXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0Lm9uICdlcnJvcicsIChlcnIpID0+XG4gICAgICAgICAgICAgICAgICAgIGxvZyAnW0VSUk9SXSBwb3J0IGVycm9yJywgZXJyXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0LmJpbmQgQG9wdC5wb3J0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbG9nICdzZW5kZXInLCBAb3B0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQHBvcnQuYmluZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgbG9nICdzZW5kZXIgYmluZCcsIEBwb3J0Py5hZGRyZXNzKCkucG9ydFxuICAgICAgICAgICAgICAgICAgICBAcG9ydD8uc2V0QnJvYWRjYXN0IHRydWVcbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBAcG9ydCA9IG51bGxcbiAgICAgICAgICAgIGxvZyBcIltFUlJPUl0gY2FuJ3QgY3JlYXRlIHVkcCBwb3J0OlwiLCBlcnJcbiAgICAgICAgICAgICAgICBcbiAgICBzZW5kOiAoYXJncy4uLikgLT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQHBvcnRcbiAgICAgICAgXG4gICAgICAgIGxvZyA9IGlmIEBvcHQuZGVidWcgdGhlbiBjb25zb2xlLmxvZyBlbHNlIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgYXJncy5sZW5ndGggPiAxXG4gICAgICAgICAgICBtc2cgPSBKU09OLnN0cmluZ2lmeSBhcmdzXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5IGFyZ3NbMF1cbiAgICAgICAgICAgIFxuICAgICAgICBidWYgPSBuZXcgQnVmZmVyIG1zZ1xuICAgICAgICBcbiAgICAgICAgbG9nIFwic2VuZGluZyAje2J1Zi5sZW5ndGh9IGJ5dGVzXCJcbiAgICAgICAgXG4gICAgICAgIGlmIGJ1Zi5sZW5ndGggPiBAcG9ydC5nZXRTZW5kQnVmZmVyU2l6ZSgpXG4gICAgICAgICAgICBsb2cgXCJtc2cgdG9vIGxhcmdlISAje2J1Zi5sZW5ndGh9ICN7QHBvcnQuZ2V0U2VuZEJ1ZmZlclNpemUoKX1cIlxuICAgICAgICBcbiAgICAgICAgQHBvcnQuc2VuZCBidWYsIDAsIGJ1Zi5sZW5ndGgsIEBvcHQucG9ydCwgJzEyNy4wLjAuMScsIC0+XG4gICAgICAgICAgICBsb2cgJ3NlbnQnLCBtc2dcbiAgICAgICAgICAgIFxuICAgIGNsb3NlOiAtPlxuICAgICAgICBcbiAgICAgICAgQHBvcnQ/LmNsb3NlKClcbiAgICAgICAgQHBvcnQgPSBudWxsXG5cbm1vZHVsZS5leHBvcnRzID0gdWRwXG4gICAgIl19
//# sourceURL=../coffee/udp.coffee