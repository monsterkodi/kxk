(function() {
  /*
  000   000  0000000    00000000   
  000   000  000   000  000   000  
  000   000  000   000  00000000   
  000   000  000   000  000        
   0000000   0000000    000        
  */
  var dgram, udp;

  dgram = require('dgram');

  udp = class udp {
    constructor(opt) {
      var base, err, log;
      this.opt = opt;
      if (this.opt == null) {
        this.opt = {};
      }
      if ((base = this.opt).port == null) {
        base.port = 9669;
      }
      log = this.opt.debug ? console.log : function() {};
      try {
        this.port = dgram.createSocket('udp4');
        if (this.opt.onMsg) {
          log('receiver', this.opt);
          this.port.on('listening', () => {
            var err;
            try {
              log('listening', this.port.address().address, this.port.address().port);
              return this.port.setBroadcast(true);
            } catch (error) {
              err = error;
              return log("[ERROR] can't listen:", err);
            }
          });
          this.port.on('message', (message, rinfo) => {
            var err, messageString, msg;
            messageString = message.toString();
            log('messageString', messageString);
            try {
              msg = JSON.parse(messageString);
            } catch (error) {
              err = error;
              log('conversion error', err);
              return;
            }
            log('message', rinfo.address, rinfo.port, msg);
            return this.opt.onMsg(msg);
          });
          this.port.on('error', (err) => {
            return log('[ERROR] port error', err);
          });
          this.port.bind(this.opt.port);
        } else {
          log('sender', this.opt);
          this.port.bind(() => {
            var ref, ref1;
            log('sender bind', (ref = this.port) != null ? ref.address().port : void 0);
            return (ref1 = this.port) != null ? ref1.setBroadcast(true) : void 0;
          });
        }
      } catch (error) {
        err = error;
        this.port = null;
        log("[ERROR] can't create udp port:", err);
      }
    }

    send(...args) {
      var buf, log, msg;
      if (!this.port) {
        return;
      }
      log = this.opt.debug ? console.log : function() {};
      if (args.length > 1) {
        msg = JSON.stringify(args);
      } else {
        msg = JSON.stringify(args[0]);
      }
      // log 'send', msg if @opt.debug
      buf = new Buffer(msg);
      // @port.send buf, 0, buf.length, @opt.port, '255.255.255.255', ->
      // log 'sent', msg
      return this.port.send(buf, 0, buf.length, this.opt.port, '127.0.0.1', function() {
        return log('sent', msg);
      });
    }

    close() {
      var ref;
      if ((ref = this.port) != null) {
        ref.close();
      }
      return this.port = null;
    }

  };

  module.exports = udp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWRwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWUvdWRwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUE7O0VBUUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztFQUVGLE1BQU4sTUFBQSxJQUFBO0lBRUksV0FBYSxJQUFBLENBQUE7QUFFVCxVQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7TUFGVSxJQUFDLENBQUE7O1FBRVgsSUFBQyxDQUFBLE1BQU8sQ0FBQTs7O1lBQ0osQ0FBQyxPQUFROztNQUViLEdBQUEsR0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVIsR0FBbUIsT0FBTyxDQUFDLEdBQTNCLEdBQW9DLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFFMUM7UUFDSSxJQUFDLENBQUEsSUFBRCxHQUFRLEtBQUssQ0FBQyxZQUFOLENBQW1CLE1BQW5CO1FBRVIsSUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVI7VUFFSSxHQUFBLENBQUksVUFBSixFQUFnQixJQUFDLENBQUEsR0FBakI7VUFFQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxXQUFULEVBQXNCLENBQUEsQ0FBQSxHQUFBO0FBQ2xCLGdCQUFBO0FBQUE7Y0FDSSxHQUFBLENBQUksV0FBSixFQUFpQixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBQSxDQUFlLENBQUMsT0FBakMsRUFBMEMsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLENBQUEsQ0FBZSxDQUFDLElBQTFEO3FCQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsWUFBTixDQUFtQixJQUFuQixFQUZKO2FBQUEsYUFBQTtjQUdNO3FCQUNGLEdBQUEsQ0FBSSx1QkFBSixFQUE2QixHQUE3QixFQUpKOztVQURrQixDQUF0QjtVQU9BLElBQUMsQ0FBQSxJQUFJLENBQUMsRUFBTixDQUFTLFNBQVQsRUFBb0IsQ0FBQyxPQUFELEVBQVUsS0FBVixDQUFBLEdBQUE7QUFDaEIsZ0JBQUEsR0FBQSxFQUFBLGFBQUEsRUFBQTtZQUFBLGFBQUEsR0FBZ0IsT0FBTyxDQUFDLFFBQVIsQ0FBQTtZQUNoQixHQUFBLENBQUksZUFBSixFQUFxQixhQUFyQjtBQUNBO2NBQ0ksR0FBQSxHQUFNLElBQUksQ0FBQyxLQUFMLENBQVcsYUFBWCxFQURWO2FBQUEsYUFBQTtjQUVNO2NBQ0YsR0FBQSxDQUFJLGtCQUFKLEVBQXdCLEdBQXhCO0FBQ0EscUJBSko7O1lBS0EsR0FBQSxDQUFJLFNBQUosRUFBZSxLQUFLLENBQUMsT0FBckIsRUFBOEIsS0FBSyxDQUFDLElBQXBDLEVBQTBDLEdBQTFDO21CQUNBLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBTCxDQUFXLEdBQVg7VUFUZ0IsQ0FBcEI7VUFXQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxPQUFULEVBQWtCLENBQUMsR0FBRCxDQUFBLEdBQUE7bUJBQ2QsR0FBQSxDQUFJLG9CQUFKLEVBQTBCLEdBQTFCO1VBRGMsQ0FBbEI7VUFHQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxJQUFDLENBQUEsR0FBRyxDQUFDLElBQWhCLEVBekJKO1NBQUEsTUFBQTtVQTZCSSxHQUFBLENBQUksUUFBSixFQUFjLElBQUMsQ0FBQSxHQUFmO1VBRUEsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsQ0FBQSxDQUFBLEdBQUE7QUFDUCxnQkFBQSxHQUFBLEVBQUE7WUFBQSxHQUFBLENBQUksYUFBSixpQ0FBd0IsQ0FBRSxPQUFQLENBQUEsQ0FBZ0IsQ0FBQyxhQUFwQztvREFDSyxDQUFFLFlBQVAsQ0FBb0IsSUFBcEI7VUFGTyxDQUFYLEVBL0JKO1NBSEo7T0FBQSxhQUFBO1FBcUNNO1FBQ0YsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUNSLEdBQUEsQ0FBSSxnQ0FBSixFQUFzQyxHQUF0QyxFQXZDSjs7SUFQUzs7SUFnRGIsSUFBTSxDQUFBLEdBQUMsSUFBRCxDQUFBO0FBRUYsVUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO01BQUEsSUFBVSxDQUFJLElBQUMsQ0FBQSxJQUFmO0FBQUEsZUFBQTs7TUFFQSxHQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxLQUFSLEdBQW1CLE9BQU8sQ0FBQyxHQUEzQixHQUFvQyxRQUFBLENBQUEsQ0FBQSxFQUFBO01BRTFDLElBQUcsSUFBSSxDQUFDLE1BQUwsR0FBYyxDQUFqQjtRQUNJLEdBQUEsR0FBTSxJQUFJLENBQUMsU0FBTCxDQUFlLElBQWYsRUFEVjtPQUFBLE1BQUE7UUFHSSxHQUFBLEdBQU0sSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFLLENBQUEsQ0FBQSxDQUFwQixFQUhWO09BSkE7O01BU0EsR0FBQSxHQUFNLElBQUksTUFBSixDQUFXLEdBQVgsRUFUTjs7O2FBWUEsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsR0FBWCxFQUFnQixDQUFoQixFQUFtQixHQUFHLENBQUMsTUFBdkIsRUFBK0IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFwQyxFQUEwQyxXQUExQyxFQUF1RCxRQUFBLENBQUEsQ0FBQTtlQUNuRCxHQUFBLENBQUksTUFBSixFQUFZLEdBQVo7TUFEbUQsQ0FBdkQ7SUFkRTs7SUFpQk4sS0FBTyxDQUFBLENBQUE7QUFFSCxVQUFBOztXQUFLLENBQUUsS0FBUCxDQUFBOzthQUNBLElBQUMsQ0FBQSxJQUFELEdBQVE7SUFITDs7RUFuRVg7O0VBd0VBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBbEZqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgXG4gMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAgICAgICBcbiMjI1xuXG5kZ3JhbSA9IHJlcXVpcmUgJ2RncmFtJ1xuXG5jbGFzcyB1ZHBcblxuICAgIGNvbnN0cnVjdG9yOiAoQG9wdCkgLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQG9wdCA/PSB7fVxuICAgICAgICBAb3B0LnBvcnQgPz0gOTY2OVxuICAgICAgICBcbiAgICAgICAgbG9nID0gaWYgQG9wdC5kZWJ1ZyB0aGVuIGNvbnNvbGUubG9nIGVsc2UgLT5cbiAgICAgICAgICAgIFxuICAgICAgICB0cnlcbiAgICAgICAgICAgIEBwb3J0ID0gZGdyYW0uY3JlYXRlU29ja2V0ICd1ZHA0J1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBAb3B0Lm9uTXNnXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbG9nICdyZWNlaXZlcicsIEBvcHRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAcG9ydC5vbiAnbGlzdGVuaW5nJywgPT4gXG4gICAgICAgICAgICAgICAgICAgIHRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nICdsaXN0ZW5pbmcnLCBAcG9ydC5hZGRyZXNzKCkuYWRkcmVzcywgQHBvcnQuYWRkcmVzcygpLnBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIEBwb3J0LnNldEJyb2FkY2FzdCB0cnVlXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nIFwiW0VSUk9SXSBjYW4ndCBsaXN0ZW46XCIsIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQHBvcnQub24gJ21lc3NhZ2UnLCAobWVzc2FnZSwgcmluZm8pID0+XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VTdHJpbmcgPSBtZXNzYWdlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgbG9nICdtZXNzYWdlU3RyaW5nJywgbWVzc2FnZVN0cmluZ1xuICAgICAgICAgICAgICAgICAgICB0cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IEpTT04ucGFyc2UgbWVzc2FnZVN0cmluZ1xuICAgICAgICAgICAgICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyAnY29udmVyc2lvbiBlcnJvcicsIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIGxvZyAnbWVzc2FnZScsIHJpbmZvLmFkZHJlc3MsIHJpbmZvLnBvcnQsIG1zZ1xuICAgICAgICAgICAgICAgICAgICBAb3B0Lm9uTXNnIG1zZ1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAcG9ydC5vbiAnZXJyb3InLCAoZXJyKSA9PlxuICAgICAgICAgICAgICAgICAgICBsb2cgJ1tFUlJPUl0gcG9ydCBlcnJvcicsIGVyclxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAcG9ydC5iaW5kIEBvcHQucG9ydFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxvZyAnc2VuZGVyJywgQG9wdFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBwb3J0LmJpbmQgPT4gXG4gICAgICAgICAgICAgICAgICAgIGxvZyAnc2VuZGVyIGJpbmQnLCBAcG9ydD8uYWRkcmVzcygpLnBvcnRcbiAgICAgICAgICAgICAgICAgICAgQHBvcnQ/LnNldEJyb2FkY2FzdCB0cnVlXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgQHBvcnQgPSBudWxsXG4gICAgICAgICAgICBsb2cgXCJbRVJST1JdIGNhbid0IGNyZWF0ZSB1ZHAgcG9ydDpcIiwgZXJyXG4gICAgICAgICAgICAgICAgXG4gICAgc2VuZDogKGFyZ3MuLi4pIC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgbm90IEBwb3J0XG4gICAgICAgIFxuICAgICAgICBsb2cgPSBpZiBAb3B0LmRlYnVnIHRoZW4gY29uc29sZS5sb2cgZWxzZSAtPlxuICAgICAgICAgICAgXG4gICAgICAgIGlmIGFyZ3MubGVuZ3RoID4gMVxuICAgICAgICAgICAgbXNnID0gSlNPTi5zdHJpbmdpZnkgYXJnc1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBtc2cgPSBKU09OLnN0cmluZ2lmeSBhcmdzWzBdXG4gICAgICAgICMgbG9nICdzZW5kJywgbXNnIGlmIEBvcHQuZGVidWdcbiAgICAgICAgYnVmID0gbmV3IEJ1ZmZlciBtc2dcbiAgICAgICAgIyBAcG9ydC5zZW5kIGJ1ZiwgMCwgYnVmLmxlbmd0aCwgQG9wdC5wb3J0LCAnMjU1LjI1NS4yNTUuMjU1JywgLT5cbiAgICAgICAgICAgICMgbG9nICdzZW50JywgbXNnXG4gICAgICAgIEBwb3J0LnNlbmQgYnVmLCAwLCBidWYubGVuZ3RoLCBAb3B0LnBvcnQsICcxMjcuMC4wLjEnLCAtPlxuICAgICAgICAgICAgbG9nICdzZW50JywgbXNnXG4gICAgICAgICAgICBcbiAgICBjbG9zZTogLT5cbiAgICAgICAgXG4gICAgICAgIEBwb3J0Py5jbG9zZSgpXG4gICAgICAgIEBwb3J0ID0gbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IHVkcFxuICAgICJdfQ==
//# sourceURL=C:/Users/t.kohnhorst/s/kxk/coffee/udp.coffee