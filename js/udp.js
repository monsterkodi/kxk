(function() {
  /*
  000   000  0000000    00000000   
  000   000  000   000  000   000  
  000   000  000   000  00000000   
  000   000  000   000  000        
   0000000   0000000    000        
  */
  var dgram, udp;

  dgram = require('dgram');

  udp = class udp {
    constructor(opt) {
      var base, err, log;
      this.opt = opt;
      if (this.opt == null) {
        this.opt = {};
      }
      if ((base = this.opt).port == null) {
        base.port = 9669;
      }
      log = this.opt.debug ? console.log : function() {};
      try {
        this.port = dgram.createSocket('udp4');
        if (this.opt.onMsg) {
          log('receiver', this.opt);
          this.port.on('listening', () => {
            log('listening', this.port.address().address, this.port.address().port);
            return this.port.setBroadcast(true);
          });
          this.port.on('message', (message, rinfo) => {
            var msg;
            msg = JSON.parse(message.toString());
            log('message', rinfo.address, rinfo.port, msg);
            return this.opt.onMsg(msg);
          });
          this.port.bind(this.opt.port);
        } else {
          log('sender', this.opt);
          this.port.bind(() => {
            var ref, ref1;
            log('sender bind', (ref = this.port) != null ? ref.address().port : void 0);
            return (ref1 = this.port) != null ? ref1.setBroadcast(true) : void 0;
          });
        }
      } catch (error) {
        err = error;
        this.port = null;
        log("[ERROR] can't create udp port:", err);
      }
    }

    send(...args) {
      var buf, log, msg;
      if (!this.port) {
        return;
      }
      log = this.opt.debug ? console.log : function() {};
      if (args.length > 1) {
        msg = JSON.stringify(args);
      } else {
        msg = JSON.stringify(args[0]);
      }
      // log 'send', msg if @opt.debug
      buf = new Buffer(msg);
      return this.port.send(buf, 0, buf.length, this.opt.port, '255.255.255.255', function() {
        return log('sent', msg);
      });
    }

    close() {
      this.port.close();
      return this.port = null;
    }

  };

  module.exports = udp;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWRwLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWUvdWRwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUFBOzs7Ozs7O0FBQUEsTUFBQSxLQUFBLEVBQUE7O0VBUUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxPQUFSOztFQUVGLE1BQU4sTUFBQSxJQUFBO0lBRUksV0FBYSxJQUFBLENBQUE7QUFFVCxVQUFBLElBQUEsRUFBQSxHQUFBLEVBQUE7TUFGVSxJQUFDLENBQUE7O1FBRVgsSUFBQyxDQUFBLE1BQU8sQ0FBQTs7O1lBQ0osQ0FBQyxPQUFROztNQUViLEdBQUEsR0FBUyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVIsR0FBbUIsT0FBTyxDQUFDLEdBQTNCLEdBQW9DLFFBQUEsQ0FBQSxDQUFBLEVBQUE7QUFFMUM7UUFDSSxJQUFDLENBQUEsSUFBRCxHQUFRLEtBQUssQ0FBQyxZQUFOLENBQW1CLE1BQW5CO1FBRVIsSUFBRyxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQVI7VUFDSSxHQUFBLENBQUksVUFBSixFQUFnQixJQUFDLENBQUEsR0FBakI7VUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sQ0FBUyxXQUFULEVBQXNCLENBQUEsQ0FBQSxHQUFBO1lBQ2xCLEdBQUEsQ0FBSSxXQUFKLEVBQWlCLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFBLENBQWUsQ0FBQyxPQUFqQyxFQUEwQyxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBQSxDQUFlLENBQUMsSUFBMUQ7bUJBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQW1CLElBQW5CO1VBRmtCLENBQXRCO1VBR0EsSUFBQyxDQUFBLElBQUksQ0FBQyxFQUFOLENBQVMsU0FBVCxFQUFvQixDQUFDLE9BQUQsRUFBVSxLQUFWLENBQUEsR0FBQTtBQUNoQixnQkFBQTtZQUFBLEdBQUEsR0FBTSxJQUFJLENBQUMsS0FBTCxDQUFXLE9BQU8sQ0FBQyxRQUFSLENBQUEsQ0FBWDtZQUNOLEdBQUEsQ0FBSSxTQUFKLEVBQWUsS0FBSyxDQUFDLE9BQXJCLEVBQThCLEtBQUssQ0FBQyxJQUFwQyxFQUEwQyxHQUExQzttQkFDQSxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQUwsQ0FBVyxHQUFYO1VBSGdCLENBQXBCO1VBSUEsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFoQixFQVRKO1NBQUEsTUFBQTtVQVdJLEdBQUEsQ0FBSSxRQUFKLEVBQWMsSUFBQyxDQUFBLEdBQWY7VUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxDQUFBLENBQUEsR0FBQTtBQUNQLGdCQUFBLEdBQUEsRUFBQTtZQUFBLEdBQUEsQ0FBSSxhQUFKLGlDQUF3QixDQUFFLE9BQVAsQ0FBQSxDQUFnQixDQUFDLGFBQXBDO29EQUNLLENBQUUsWUFBUCxDQUFvQixJQUFwQjtVQUZPLENBQVgsRUFaSjtTQUhKO09BQUEsYUFBQTtRQWtCTTtRQUNGLElBQUMsQ0FBQSxJQUFELEdBQVE7UUFDUixHQUFBLENBQUksZ0NBQUosRUFBc0MsR0FBdEMsRUFwQko7O0lBUFM7O0lBNkJiLElBQU0sQ0FBQSxHQUFDLElBQUQsQ0FBQTtBQUVGLFVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtNQUFBLElBQVUsQ0FBSSxJQUFDLENBQUEsSUFBZjtBQUFBLGVBQUE7O01BRUEsR0FBQSxHQUFTLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBUixHQUFtQixPQUFPLENBQUMsR0FBM0IsR0FBb0MsUUFBQSxDQUFBLENBQUEsRUFBQTtNQUUxQyxJQUFHLElBQUksQ0FBQyxNQUFMLEdBQWMsQ0FBakI7UUFDSSxHQUFBLEdBQU0sSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUFmLEVBRFY7T0FBQSxNQUFBO1FBR0ksR0FBQSxHQUFNLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBSyxDQUFBLENBQUEsQ0FBcEIsRUFIVjtPQUpBOztNQVNBLEdBQUEsR0FBTSxJQUFJLE1BQUosQ0FBVyxHQUFYO2FBQ04sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsR0FBWCxFQUFnQixDQUFoQixFQUFtQixHQUFHLENBQUMsTUFBdkIsRUFBK0IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFwQyxFQUEwQyxpQkFBMUMsRUFBNkQsUUFBQSxDQUFBLENBQUE7ZUFDekQsR0FBQSxDQUFJLE1BQUosRUFBWSxHQUFaO01BRHlELENBQTdEO0lBWkU7O0lBZU4sS0FBTyxDQUFBLENBQUE7TUFFSCxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBQTthQUNBLElBQUMsQ0FBQSxJQUFELEdBQVE7SUFITDs7RUE5Q1g7O0VBbURBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBN0RqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgXG4gMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAgICAgICBcbiMjI1xuXG5kZ3JhbSA9IHJlcXVpcmUgJ2RncmFtJ1xuXG5jbGFzcyB1ZHBcblxuICAgIGNvbnN0cnVjdG9yOiAoQG9wdCkgLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQG9wdCA/PSB7fVxuICAgICAgICBAb3B0LnBvcnQgPz0gOTY2OVxuICAgICAgICBcbiAgICAgICAgbG9nID0gaWYgQG9wdC5kZWJ1ZyB0aGVuIGNvbnNvbGUubG9nIGVsc2UgLT5cbiAgICAgICAgICAgIFxuICAgICAgICB0cnlcbiAgICAgICAgICAgIEBwb3J0ID0gZGdyYW0uY3JlYXRlU29ja2V0ICd1ZHA0J1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBAb3B0Lm9uTXNnXG4gICAgICAgICAgICAgICAgbG9nICdyZWNlaXZlcicsIEBvcHRcbiAgICAgICAgICAgICAgICBAcG9ydC5vbiAnbGlzdGVuaW5nJywgPT4gXG4gICAgICAgICAgICAgICAgICAgIGxvZyAnbGlzdGVuaW5nJywgQHBvcnQuYWRkcmVzcygpLmFkZHJlc3MsIEBwb3J0LmFkZHJlc3MoKS5wb3J0XG4gICAgICAgICAgICAgICAgICAgIEBwb3J0LnNldEJyb2FkY2FzdCB0cnVlXG4gICAgICAgICAgICAgICAgQHBvcnQub24gJ21lc3NhZ2UnLCAobWVzc2FnZSwgcmluZm8pID0+XG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IEpTT04ucGFyc2UgbWVzc2FnZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIGxvZyAnbWVzc2FnZScsIHJpbmZvLmFkZHJlc3MsIHJpbmZvLnBvcnQsIG1zZ1xuICAgICAgICAgICAgICAgICAgICBAb3B0Lm9uTXNnIG1zZ1xuICAgICAgICAgICAgICAgIEBwb3J0LmJpbmQgQG9wdC5wb3J0XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbG9nICdzZW5kZXInLCBAb3B0XG4gICAgICAgICAgICAgICAgQHBvcnQuYmluZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgbG9nICdzZW5kZXIgYmluZCcsIEBwb3J0Py5hZGRyZXNzKCkucG9ydFxuICAgICAgICAgICAgICAgICAgICBAcG9ydD8uc2V0QnJvYWRjYXN0IHRydWVcbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBAcG9ydCA9IG51bGxcbiAgICAgICAgICAgIGxvZyBcIltFUlJPUl0gY2FuJ3QgY3JlYXRlIHVkcCBwb3J0OlwiLCBlcnJcbiAgICAgICAgICAgICAgICBcbiAgICBzZW5kOiAoYXJncy4uLikgLT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpZiBub3QgQHBvcnRcbiAgICAgICAgXG4gICAgICAgIGxvZyA9IGlmIEBvcHQuZGVidWcgdGhlbiBjb25zb2xlLmxvZyBlbHNlIC0+XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgYXJncy5sZW5ndGggPiAxXG4gICAgICAgICAgICBtc2cgPSBKU09OLnN0cmluZ2lmeSBhcmdzXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1zZyA9IEpTT04uc3RyaW5naWZ5IGFyZ3NbMF1cbiAgICAgICAgIyBsb2cgJ3NlbmQnLCBtc2cgaWYgQG9wdC5kZWJ1Z1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyIG1zZ1xuICAgICAgICBAcG9ydC5zZW5kIGJ1ZiwgMCwgYnVmLmxlbmd0aCwgQG9wdC5wb3J0LCAnMjU1LjI1NS4yNTUuMjU1JywgLT5cbiAgICAgICAgICAgIGxvZyAnc2VudCcsIG1zZ1xuICAgICAgICAgICAgXG4gICAgY2xvc2U6IC0+XG4gICAgICAgIFxuICAgICAgICBAcG9ydC5jbG9zZSgpXG4gICAgICAgIEBwb3J0ID0gbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IHVkcFxuICAgICJdfQ==
//# sourceURL=C:/Users/kodi/s/kxk/coffee/udp.coffee