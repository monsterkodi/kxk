###
 0000000   00000000   00000000   
000   000  000   000  000   000  
000000000  00000000   00000000   
000   000  000        000        
000   000  000        000        
###

delete process.env.ELECTRON_ENABLE_SECURITY_WARNINGS
process.env.ELECTRON_DISABLE_SECURITY_WARNINGS = true
process.env.NODE_NO_WARNINGS = 1

kxk = require './kxk'
{ about, args, childp, fs, klog, os, post, prefs, slash, srcmap, watch } = kxk

if process.type == 'browser'
    electron = require 'electron'
    
    post.onGet 'appName'  -> electron.app.getName()
    post.onGet 'userData' -> electron.app.getPath 'userData'
    
    post.on 'openFileDialog' (options) ->
        winID = post.senderWinID
        electron.dialog.showOpenDialog(options).then (result) -> post.toWin winID, 'openFileDialogResult' result

    post.on 'saveFileDialog' (options) ->
        winID = post.senderWinID
        electron.dialog.showSaveDialog(options).then (result) -> post.toWin winID, 'saveFileDialogResult' result
        
    post.on 'messageBox' (options) ->
        winID = post.senderWinID
        electron.dialog.showMessageBox(options).then (result) -> 
            post.toWin winID, 'messageBoxResult' result.response
else
    error "this should be used in main process only! process.type: #{process.type} grandpa: #{module.parent.parent?.filename} parent: #{module.parent.filename} module: #{module.filename}"
    
function App
    
    @: (@opt) ->
          
        process.on 'uncaughtException' (err) ->
            srcmap = require './srcmap'    
            srcmap.logErr err, 'ðŸ”»'
            true
        
        @watchers = []
            
        @app = electron.app
        @userData = @app.getPath 'userData'
                
        @app.commandLine.appendSwitch 'disable-site-isolation-trials'
        
        electron.Menu.setApplicationMenu @opt.menu
                            
        # argl = """
            # noprefs     don't load preferences      = false
            # devtools    open developer tools        = false  -D
            # watch       watch sources for changes   = false
            # """

        @argv = args.init @opt.args if @opt.args
        
        onOther = (event, argv, dir) =>
            
            if @opt.onOtherInstance
                @opt.onOtherInstance argv, dir 
            else
                @showWindow()
        
        if @opt.single != false
            if @app.makeSingleInstance? 
                if @app.makeSingleInstance onOther
                    @app.quit()
                    return
            else if @app.requestSingleInstanceLock? 
                if @app.requestSingleInstanceLock()
                    @app.on 'second-instance' onOther
                else
                    @app.quit()
                    return
        
        electron.ipcMain.on 'menuAction'   @onMenuAction
        electron.ipcMain.on 'getWinBounds' @onGetWinBounds
        electron.ipcMain.on 'setWinBounds' @onSetWinBounds
        electron.ipcMain.on 'getWinID'     @onGetWinID
                    
        @app.setName @opt.pkg.name
        @app.on 'ready' @onReady
        @app.on 'activate' @onActivate
        @app.on 'window-all-closed' (event) => 
            if @opt.tray
                event.preventDefault()        
            else
                @quitApp()
                
    resolve: (file) => slash.resolve slash.join @opt.dir, file
    
    # 00000000   00000000   0000000   0000000    000   000
    # 000   000  000       000   000  000   000   000 000
    # 0000000    0000000   000000000  000   000    00000
    # 000   000  000       000   000  000   000     000
    # 000   000  00000000  000   000  0000000       000
    
    onReady: =>
    
        if @opt.tray then @initTray()
         
        @hideDock()
         
        @app.setName @opt.pkg.name
    
        if not @argv.noprefs
            sep = @opt.prefsSeperator ? 'â–¸'
            if @opt.shortcut
                prefs.init separator:sep, defaults:shortcut:@opt.shortcut
            else
                prefs.init separator:sep
    
        if valid prefs.get 'shortcut'
            electron.globalShortcut.register prefs.get('shortcut'), @opt.onShortcut ? @showWindow
             
        if @argv.watch
            @startWatcher()
        
        if @opt.onShow
            @opt.onShow()
        else
            @showWindow()

        post.emit 'appReady'
        
    # 000000000  00000000    0000000   000   000  
    #    000     000   000  000   000   000 000   
    #    000     0000000    000000000    00000    
    #    000     000   000  000   000     000     
    #    000     000   000  000   000     000     
    
    initTray: =>
        
        trayImg = @resolve @opt.tray
        @tray = new electron.Tray trayImg
        @tray.on 'click' @toggleWindowFromTray
        
        if os.platform() != 'darwin'
            template = [
                label: "Quit"
                click: @quitApp
            ,
                label: "About"
                click: @showAbout
            ,
                label: "Activate"
                click: @toggleWindowFromTray
            ]
            @tray.setContextMenu electron.Menu.buildFromTemplate template
            
    #  0000000   0000000     0000000   000   000  000000000  
    # 000   000  000   000  000   000  000   000     000     
    # 000000000  0000000    000   000  000   000     000     
    # 000   000  000   000  000   000  000   000     000     
    # 000   000  0000000     0000000    0000000      000     
    
    showAbout: =>
        
        dark = 'dark' == prefs.get 'scheme' 'dark'
        about
            img:        @resolve @opt.about
            color:      dark and '#333' or '#ddd'
            background: dark and '#111' or '#fff'
            highlight:  dark and '#fff' or '#000'
            pkg:        @opt.pkg
            debug:      @opt.aboutDebug
    
    #  0000000   000   000  000  000000000  
    # 000   000  000   000  000     000     
    # 000 00 00  000   000  000     000     
    # 000 0000   000   000  000     000     
    #  00000 00   0000000   000     000     
    
    quitApp: =>
        
        @stopWatcher()
        if @opt.saveBounds != false
            @saveBounds()
        prefs.save()
        
        if 'delay' != @opt.onQuit?()
            @exitApp()
            
    exitApp: =>
        
        @app.exit 0
        process.exit 0
                
    # 0000000     0000000    0000000  000   000  
    # 000   000  000   000  000       000  000   
    # 000   000  000   000  000       0000000    
    # 000   000  000   000  000       000  000   
    # 0000000     0000000    0000000  000   000  
    
    hideDock: => @app.dock?.hide()
    showDock: => @app.dock?.show()
        
    #000   000  000  000   000  0000000     0000000   000   000
    #000 0 000  000  0000  000  000   000  000   000  000 0 000
    #000000000  000  000 0 000  000   000  000   000  000000000
    #000   000  000  000  0000  000   000  000   000  000   000
    #00     00  000  000   000  0000000     0000000   00     00
    
    toggleWindowFromTray: => @showWindow()
       
    onActivate: (event, hasVisibleWindows) =>
        
        if @opt.onActivate
            if @opt.onActivate event, hasVisibleWindows
                return
                
        if not hasVisibleWindows
            @showWindow()
                
    showWindow: =>

        @opt.onWillShowWin?()
        
        if @win?
            @win.show()
        else
            @createWindow()
            
        @showDock()
        
    #  0000000  00000000   00000000   0000000   000000000  00000000  
    # 000       000   000  000       000   000     000     000       
    # 000       0000000    0000000   000000000     000     0000000   
    # 000       000   000  000       000   000     000     000       
    #  0000000  000   000  00000000  000   000     000     00000000  
    
    createWindow: (onReadyToShow) =>
    
        onReadyToShow ?= @opt.onWinReady
        
        if @opt.saveBounds != false
            bounds = prefs.get 'bounds'
            
        width  = bounds?.width  ? @opt.width  ? 500
        height = bounds?.height ? @opt.height ? 500
        
        @win = new electron.BrowserWindow
            width:              width
            height:             height
            minWidth:           @opt.minWidth           ? 250
            minHeight:          @opt.minHeight          ? 250
            maxWidth:           @opt.maxWidth           ? 100000
            maxHeight:          @opt.maxHeight          ? 100000
            backgroundColor:    @opt.backgroundColor    ? '#181818'
            frame:              @opt.frame              ? false
            transparent:        @opt.transparent        ? false
            fullscreen:         @opt.fullscreen         ? false
            fullscreenable:     @opt.fullscreenable     ? true
            acceptFirstMouse:   @opt.acceptFirstMouse   ? true
            resizable:          @opt.resizable          ? true
            maximizable:        @opt.maximizable        ? true
            minimizable:        @opt.minimizable        ? true
            closable:           @opt.closable           ? true
            autoHideMenuBar:    true
            thickFrame:         false
            show:               false
            icon:               @resolve @opt.icon 
            webPreferences: 
                webSecurity:             false
                contextIsolation:        false
                nodeIntegration:         true
                nodeIntegrationInWorker: true
   
        @win.setPosition bounds.x, bounds.y if bounds?
    
        if @opt.indexURL
            @win.loadURL @opt.index, baseURLForDataURL:@opt.indexURL
        else
            @win.loadURL slash.fileUrl @resolve @opt.index
        
        @win.webContents.on 'devtools-opened' (event) -> post.toWin event.sender.id, 'devTools' true
        @win.webContents.on 'devtools-closed' (event) -> post.toWin event.sender.id, 'devTools' false
            
        @win.webContents.openDevTools(mode:'detach') if @argv.devtools
        if @opt.saveBounds != false
            @win.setPosition bounds.x, bounds.y if bounds?
            @win.on 'resize' @saveBounds
            @win.on 'move'   @saveBounds
        @win.on 'closed' => @win = null
        @win.on 'close'  => if @opt.single then @hideDock()
        @win.on 'moved'  (event) => post.toWin event.sender, 'winMoved' event.sender.getBounds()
        @win.on 'ready-to-show' ((w, orts) -> -> 
            orts? w
            w.show() 
            post.emit 'winReady' w.id
            ) @win, onReadyToShow 
            
        @showDock()
        @win

    # 0000000     0000000   000   000  000   000  0000000     0000000  
    # 000   000  000   000  000   000  0000  000  000   000  000       
    # 0000000    000   000  000   000  000 0 000  000   000  0000000   
    # 000   000  000   000  000   000  000  0000  000   000       000  
    # 0000000     0000000    0000000   000   000  0000000    0000000   
    
    onSetWinBounds: (event, bounds) =>

        @winForEvent(event)?.setBounds bounds
        
    onGetWinBounds: (event) =>
        
        event.returnValue = @winForEvent(event)?.getBounds()
       
    onGetWinID: (event) => event.returnValue = event.sender.id
 
    saveBounds: => if @win? then prefs.set 'bounds' @win.getBounds()
        
    screenSize: -> electron.screen.getPrimaryDisplay().workAreaSize
        
    allWins: -> electron.BrowserWindow.getAllWindows().sort (a,b) -> a.id - b.id
        
    winForEvent: (event) =>
                
        w = electron.BrowserWindow.fromWebContents event.sender
        if not w
            klog 'no win?' event.sender.id
            for w in @allWins()
                klog 'win' w.id, w.webContents.id
        w

    toggleDevTools: (wc) ->
        
        if wc.isDevToolsOpened()
            wc.closeDevTools()
        else
            wc.openDevTools mode:'detach'
        
    # 00     00  00000000  000   000  000   000   0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000       0000  000  000   000  000   000  000          000     000  000   000  0000  000  
    # 000000000  0000000   000 0 000  000   000  000000000  000          000     000  000   000  000 0 000  
    # 000 0 000  000       000  0000  000   000  000   000  000          000     000  000   000  000  0000  
    # 000   000  00000000  000   000   0000000   000   000   0000000     000     000   0000000   000   000  
    
    onMenuAction: (event, action) =>
        
        # klog 'kxk.app.onMenuAction' action, event.sender.id
        
        if w = @winForEvent event
            
            switch action.toLowerCase()
                'about'       âžœ @showAbout()
                'quit'        âžœ @quitApp()
                'screenshot'  âžœ @screenshot w
                'fullscreen'  âžœ w.setFullScreen not w.isFullScreen()
                'devtools'    âžœ @toggleDevTools w.webContents
                'reload'      âžœ w.webContents.reloadIgnoringCache()
                'close'       âžœ w.close()
                'hide'        âžœ w.hide()
                'minimize'    âžœ w.minimize()
                'maximize' 
                    wa = @screenSize()
                    wb = w.getBounds()
                    maximized = w.isMaximized() or (wb.width == wa.width and wb.height == wa.height)
                    if maximized then w.unmaximize() else w.maximize()  
        else
            klog "kxk.app.onMenuAction NO WIN!"
                          
    #  0000000   0000000  00000000   00000000  00000000  000   000   0000000  000   000   0000000   000000000
    # 000       000       000   000  000       000       0000  000  000       000   000  000   000     000
    # 0000000   000       0000000    0000000   0000000   000 0 000  0000000   000000000  000   000     000
    #      000  000       000   000  000       000       000  0000       000  000   000  000   000     000
    # 0000000    0000000  000   000  00000000  00000000  000   000  0000000   000   000   0000000      000
    
    screenshot: (w) ->
        
        w.webContents.capturePage().then (img) =>
            
            file = slash.unused "~/Desktop/#{@opt.pkg.name}.png"
            
            fs.writeFile file, img.toPNG(), (err) ->
                if valid err
                    klog 'saving screenshot failed' err
                else
                    klog "screenshot saved to #{file}"
            
    # 000   000   0000000   000000000   0000000  000   000  00000000  00000000     
    # 000 0 000  000   000     000     000       000   000  000       000   000    
    # 000000000  000000000     000     000       000000000  0000000   0000000      
    # 000   000  000   000     000     000       000   000  000       000   000    
    # 00     00  000   000     000      0000000  000   000  00000000  000   000    
        
    startWatcher: =>
        
        @opt.dir = slash.resolve @opt.dir
        watcher = watch.dir @opt.dir
        watcher.on 'change' @onSrcChange
        watcher.on 'error' (err) -> error err
        @watchers.push watcher
        
        return if empty @opt.dirs
        
        for dir in @opt.dirs
            toWatch = 
                if slash.isRelative dir
                    slash.resolve slash.join @opt.dir, dir
                else
                    slash.resolve dir
            watcher = watch.dir toWatch
            watcher.on 'change' @onSrcChange
            watcher.on 'error' (err) -> error err
            @watchers.push watcher 
    
    stopWatcher: =>
         
        return if empty @watchers
        for watcher in @watchers
            watcher.close()
        @watchers = []
    
    onSrcChange: (info) =>
    
        # klog 'onSrcChange' info.change, info.path
        if slash.base(info.path) == 'main'
            @stopWatcher()
            @app.exit 0
            if pkg = slash.pkg @opt.dir
                if slash.isDir slash.join pkg, 'node_modules'
                    childp.execSync "#{pkg}/node_modules/.bin/electron . -w",
                        cwd:      pkg
                        encoding: 'utf8'
                        stdio:    'inherit'
                        shell:    true
                    process.exit 0
                    return
        post.toWins 'menuAction' 'Reload'
             
module.exports = App
    
