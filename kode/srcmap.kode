###
 0000000  00000000    0000000  00     00   0000000   00000000   
000       000   000  000       000   000  000   000  000   000  
0000000   0000000    000       000000000  000000000  00000000   
     000  000   000  000       000 0 000  000   000  000        
0000000   000   000   0000000  000   000  000   000  000        
###

kxk = require './kxk'
{ _, klog, sh, slash } = kxk

regex1     = /^\s+at\s+(\S+)\s+\((.*):(\d+):(\d+)\)/
regex2     = /^\s+at\s+(.*):(\d+):(\d+)/

# 000       0000000    0000000   00000000  00000000   00000000   
# 000      000   000  000        000       000   000  000   000  
# 000      000   000  000  0000  0000000   0000000    0000000    
# 000      000   000  000   000  000       000   000  000   000  
# 0000000   0000000    0000000   00000000  000   000  000   000  

logErr = (err, sep='💥') ->
    
    # log errorStack err
    console.log "#{err}"
    return
    trace = errorTrace err
    # console.log 'trace:', kstr(trace)
    if valid trace?.lines
        klog.flog str:trace.text, source:trace.lines[0].file, line:trace.lines[0].line, sep:sep
        for line in trace.lines
            sep = if slash.isAbsolute(line.file) or line.file[0]=='~' then '🐞' else '🔼'
            if sep == '🐞' or line.file[0] == '.'
                klog.flog str:'       '+line.func, source:line.file, line:line.line, sep:sep
    else
        klog.flog str:trace.text, source:'', line:0, sep:sep

# 00000000  000  000      00000000  00000000    0000000    0000000  
# 000       000  000      000       000   000  000   000  000       
# 000000    000  000      0000000   00000000   000   000  0000000   
# 000       000  000      000       000        000   000       000  
# 000       000  0000000  00000000  000         0000000   0000000   

filePos = (line) ->

    if match = regex1.exec line
        
        result =
            func: match[1].replace '.<anonymous>', ''
            file: match[2]
            line: match[3]
            col:  match[4]
        
        if slash.ext(result.file) == 'js'
            
            mappedLine = toCoffee result.file, result.line, result.col
            
            if mappedLine?
                result.file = mappedLine[0]
                result.line = mappedLine[1]
                result.col  = mappedLine[2]
                
        else if false and slash.ext(result.file) == 'coffee' and not slash.isAbsolute result.file
            
            # seems like chrome is resolving to relative paths already without mapping the line numbers correctly :(
            
            # console.log "filePos1 line:'#{line}' result:", kstr result
            # console.log 'process.cwd', process.cwd()
            # try
                # console.log 'app.getPath("exe")', require('electron').remote.app.getPath 'exe'
            # catch err
                # console.log err.stack

            absFile = slash.resolve slash.join process.cwd(), 'coffee', result.file
            if slash.fileExists absFile
                [jsFile,a,b] = toJs absFile, 1, 0
                if slash.fileExists jsFile
                    [coffeeFile, coffeeLine, coffeeCol] = toCoffee jsFile, result.line, result.col
                    if slash.fileExists coffeeFile
                        result.file = coffeeFile # this 'fix' relies on process.cwd to be unchanged
                        result.line = coffeeLine # and only works for app started from source
                        result.col  = coffeeCol  # via node_modules/electron... :(
                        # using app.getPath("exe") and filter out node_modules would probably be better
                        
    else if match = regex2.exec line
        
        result =
            func: slash.file match[1]
            file: match[1]
            line: match[2]
            col:  match[3]
        
        if slash.ext(result.file) == 'js'
            
            mappedLine = toCoffee result.file, result.line, result.col
            
            if mappedLine?
                result.file = mappedLine[0]
                result.line = mappedLine[1]
                result.col  = mappedLine[2]
                
        # else if slash.ext(result.file) == 'coffee' and not slash.isAbsolute result.file                
#             
            # console.log "filePos2 FIXME!", line, result
            
    result

#  0000000  000000000   0000000    0000000  000   000  
# 000          000     000   000  000       000  000   
# 0000000      000     000000000  000       0000000    
#      000     000     000   000  000       000  000   
# 0000000      000     000   000   0000000  000   000  

errorStack = (err) ->
    
    lines = []
    
    for stackLine in err.stack.split '\n' 
        
        if fp = filePos stackLine
            lines.push "       #{_.padEnd fp.func, 30} #{fp.file}:#{fp.line}" 
        else
            lines.push stackLine 

    lines.join '\n'

# 000000000  00000000    0000000    0000000  00000000  
#    000     000   000  000   000  000       000       
#    000     0000000    000000000  000       0000000   
#    000     000   000  000   000  000       000       
#    000     000   000  000   000   0000000  00000000  

errorTrace = (err) ->
    
    lines = []
    text  = []

    for stackLine in err.stack.split '\n' 
        
        if fp = filePos stackLine
            lines.push fp
        else
            text.push stackLine 

    lines:  lines
    text:   text.join '\n'
    
# 0000000    00000000   0000000   0000000   0000000    00000000  
# 000   000  000       000       000   000  000   000  000       
# 000   000  0000000   000       000   000  000   000  0000000   
# 000   000  000       000       000   000  000   000  000       
# 0000000    00000000   0000000   0000000   0000000    00000000  

decode = (segment) ->
    # ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
    rs = []
    sh = rc = 0
    for i in [0...segment.length]
        cc = segment.charCodeAt(i)-65
        cc -= 6  if cc >=  32
        cc  = 62 if cc == -22
        cc  = 63 if cc == -18
        cc += 69 if cc < 0
        if cc & 32
            sh += 5
            rc = cc & 0b011111
        else
            vl = rc + (cc << sh)
            vs = vl >> 1
            vs = -vs if vl & 1
            rs.push vs
            sh = rc = 0
    rs
    
# 00000000   00000000   0000000   0000000    00     00   0000000   00000000   
# 000   000  000       000   000  000   000  000   000  000   000  000   000  
# 0000000    0000000   000000000  000   000  000000000  000000000  00000000   
# 000   000  000       000   000  000   000  000 0 000  000   000  000        
# 000   000  00000000  000   000  0000000    000   000  000   000  000        

readMap = (jsFile) ->
    
    source = slash.readText jsFile
    
    urlVar = '//# sourceURL='
    mapVar = '//# sourceMappingURL='
    for l in source.split /\r?\n/
        if not url and l.startsWith urlVar then url = l.split(urlVar)[1]
        if not map and l.startsWith mapVar then map = l.split(mapVar)[1]
        break if map and url
    if map
        map = map.slice 'data:application/json;base64,'.length
        map = Buffer.from(map, 'base64').toString()
        map = JSON.parse map
        if url and empty map.sources[0]
            map.sources[0] = url
    map

#  0000000   0000000   00000000  00000000  00000000  00000000  00000000    0000000    0000000  
# 000       000   000  000       000       000       000       000   000  000   000  000       
# 000       000   000  000000    000000    0000000   0000000   00000000   000   000  0000000   
# 000       000   000  000       000       000       000       000        000   000       000  
#  0000000   0000000   000       000       00000000  00000000  000         0000000   0000000   

coffeePos = (mapData, sjsLine, sjsCol) ->
    
    lines = mapData.mappings.split ';'
    jsLine = 1
    coLine = 1
    coCol  = 0
    for line in lines
        jsCol = 0
        if line.length
            for segment in line.split ','
                seg = decode segment
                jsCol  += seg[0]
                coLine += seg[2]
                coCol  += seg[3]
                if jsLine == sjsLine and jsCol >= sjsCol
                    return line:coLine, col:coCol
        if jsLine == sjsLine
            return line:coLine, col:0
        jsLine++
    line:0, col:0

# 000   000   0000000   0000000    00000000  00000000    0000000    0000000  
# 000  000   000   000  000   000  000       000   000  000   000  000       
# 0000000    000   000  000   000  0000000   00000000   000   000  0000000   
# 000  000   000   000  000   000  000       000        000   000       000  
# 000   000   0000000   0000000    00000000  000         0000000   0000000   

kodePos = (mapData, sjsLine, sjsCol) ->
    
    return coffeePos mapData, sjsLine, sjsCol
    
# 000000000   0000000          0000000   0000000   00000000  00000000  00000000  00000000  
#    000     000   000        000       000   000  000       000       000       000       
#    000     000   000        000       000   000  000000    000000    0000000   0000000   
#    000     000   000        000       000   000  000       000       000       000       
#    000      0000000          0000000   0000000   000       000       00000000  00000000  

toCoffee = (jsFile, jsLine, jsCol=0) ->

    jsLine = parseInt jsLine
    jsCol  = parseInt jsCol
    
    coffeeFile = jsFile.replace /\/js\//, '/coffee/'
    coffeeFile = coffeeFile.replace /\.js$/, '.coffee'
    coffeeLine = jsLine
    coffeeCol  = jsCol
    
    if slash.fileExists jsFile
        if valid (mapData = readMap jsFile)
            coPos = coffeePos mapData, jsLine, jsCol
            coffeeFile = slash.tilde slash.join mapData.sourceRoot, mapData.sources[0]
            coffeeLine = coPos.line 
            coffeeCol  = coPos.col
            
    [coffeeFile, coffeeLine, coffeeCol]

# 000000000   0000000       000   000   0000000   0000000    00000000  
#    000     000   000      000  000   000   000  000   000  000       
#    000     000   000      0000000    000   000  000   000  0000000   
#    000     000   000      000  000   000   000  000   000  000       
#    000      0000000       000   000   0000000   0000000    00000000  

toKode = (jsFile, jsLine, jsCol=0) ->

    jsLine = parseInt jsLine
    jsCol  = parseInt jsCol
    
    kodeFile = jsFile.replace /\/js\//, '/kode/'
    kodeFile = kodeFile.replace /\.js$/, '.kode'
    kodeLine = jsLine
    kodeCol  = jsCol
    
    if slash.fileExists jsFile
        if valid (mapData = readMap jsFile)
            coPos = kodePos mapData, jsLine, jsCol
            kodeFile = slash.tilde slash.join mapData.sourceRoot, mapData.sources[0]
            kodeLine = coPos.line 
            kodeCol  = coPos.col
            
    [kodeFile, kodeLine, kodeCol]
    
#       000   0000000       00000000    0000000    0000000  
#       000  000            000   000  000   000  000       
#       000  0000000        00000000   000   000  0000000   
# 000   000       000       000        000   000       000  
#  0000000   0000000        000         0000000   0000000   

jsPosition = (mapData, coffeeLine, coffeeCol) ->
    # klog 'jsPosition' coffeeLine, coffeeCol, mapData.file, mapData.sourceRoot, mapData.sources[0] #, mapData.mappings
    lines = mapData.mappings.split ';'
    jsLine = 1
    coLine = 1
    coCol  = 0
    dfMin  = line:lines.length, col:9999
    result = line:0, col:0
    for line in lines
        jsCol = 0
        if line.length
            for segment in line.split ','
                seg = decode segment
                jsCol  += seg[0]
                coLine += seg[2]
                coCol  += seg[3]
                dfLine = Math.abs coffeeLine - coLine
                dfCol  = Math.abs coffeeCol - coCol
                if dfLine < dfMin.line or dfLine == dfMin.line and dfCol < dfMin.col
                    dfMin =
                        line: dfLine
                        col:  dfCol
                    result =
                        line:   jsLine
                        col:    jsCol
        jsLine++
    result

# 000000000   0000000               000   0000000  
#    000     000   000              000  000       
#    000     000   000              000  0000000   
#    000     000   000        000   000       000  
#    000      0000000          0000000   0000000   
    
toJs = (coffeeFile, coffeeLine, coffeeCol=0) ->
    
    jsFile = coffeeFile.replace /\/coffee\//, '/js/'
    jsFile = jsFile.replace /\.coffee$/, '.js'
    
    if not slash.fileExists jsFile
        return [null, null, null]
        
    if not coffeeLine? 
        return [jsFile, null, null]
    
    if valid (mapData = readMap jsFile)
        jsPos = jsPosition mapData, coffeeLine, coffeeCol
        [jsFile, jsPos.line, jsPos.col]
    else    
        [jsFile, null, null]
        
module.exports =
    toJs:       toJs
    toKode:     toKode
    toCoffee:   toCoffee
    errorStack: errorStack
    errorTrace: errorTrace
    logErr:     logErr
    
    